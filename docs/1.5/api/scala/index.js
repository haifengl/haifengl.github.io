Index.PACKAGES = {"smile.wavelet" : [{"name" : "smile.wavelet.Operators", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "smile\/wavelet\/Operators.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/wavelet\/Operators.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Operators) ⇒ Boolean, msg: ⇒ Any): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/wavelet\/Operators.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Operators) ⇒ Boolean): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/wavelet\/Operators.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/wavelet\/Operators.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/wavelet\/Operators.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Operators, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/wavelet\/Operators.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Operators, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/wavelet\/Operators.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "wsdenoise", "tail" : "(t: Array[Double], filter: String, soft: Boolean): Unit", "member" : "smile.wavelet.Operators.wsdenoise", "link" : "smile\/wavelet\/Operators.html#wsdenoise(t:Array[Double],filter:String,soft:Boolean):Unit", "kind" : "def"}, {"label" : "idwt", "tail" : "(wt: Array[Double], filter: String): Unit", "member" : "smile.wavelet.Operators.idwt", "link" : "smile\/wavelet\/Operators.html#idwt(wt:Array[Double],filter:String):Unit", "kind" : "def"}, {"label" : "dwt", "tail" : "(t: Array[Double], filter: String): Unit", "member" : "smile.wavelet.Operators.dwt", "link" : "smile\/wavelet\/Operators.html#dwt(t:Array[Double],filter:String):Unit", "kind" : "def"}, {"label" : "wavelet", "tail" : "(filter: String): Wavelet", "member" : "smile.wavelet.Operators.wavelet", "link" : "smile\/wavelet\/Operators.html#wavelet(filter:String):smile.wavelet.Wavelet", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/wavelet\/Operators.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/wavelet\/Operators.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/wavelet\/Operators.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/wavelet\/Operators.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/wavelet\/Operators.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/wavelet\/Operators.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/wavelet\/Operators.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/wavelet\/Operators.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/wavelet\/Operators.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/wavelet\/Operators.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/wavelet\/Operators.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/wavelet\/Operators.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/wavelet\/Operators.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/wavelet\/Operators.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/wavelet\/Operators.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/wavelet\/Operators.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/wavelet\/Operators.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/wavelet\/Operators.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/wavelet\/Operators.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Discrete wavelet transform (DWT).", "trait" : "smile\/wavelet\/Operators.html", "kind" : "trait"}], "smile.util" : [{"name" : "smile.util.time", "shortDescription" : "Measure running time of a function\/block", "object" : "smile\/util\/package$$time$.html", "members_object" : [{"label" : "apply", "tail" : "(f: ⇒ A): A", "member" : "smile.util.time.apply", "link" : "smile\/util\/package$$time$.html#apply[A](f:=>A):A", "kind" : "def"}, {"label" : "off", "tail" : "(): Unit", "member" : "smile.util.time.off", "link" : "smile\/util\/package$$time$.html#off:Unit", "kind" : "def"}, {"label" : "on", "tail" : "(): Unit", "member" : "smile.util.time.on", "link" : "smile\/util\/package$$time$.html#on:Unit", "kind" : "def"}, {"label" : "echo", "tail" : ": Boolean", "member" : "smile.util.time.echo", "link" : "smile\/util\/package$$time$.html#echo:Boolean", "kind" : "var"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/util\/package$$time$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/util\/package$$time$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/util\/package$$time$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/util\/package$$time$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/util\/package$$time$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/util\/package$$time$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/util\/package$$time$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/util\/package$$time$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/util\/package$$time$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/util\/package$$time$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/util\/package$$time$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/util\/package$$time$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/util\/package$$time$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/util\/package$$time$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/util\/package$$time$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/util\/package$$time$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/util\/package$$time$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/util\/package$$time$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/util\/package$$time$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "smile.mds" : [{"name" : "smile.mds.Operators", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "smile\/mds\/Operators.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/mds\/Operators.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Operators) ⇒ Boolean, msg: ⇒ Any): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/mds\/Operators.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Operators) ⇒ Boolean): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/mds\/Operators.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/mds\/Operators.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/mds\/Operators.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Operators, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/mds\/Operators.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Operators, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/mds\/Operators.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "sammon", "tail" : "(proximity: Array[Array[Double]], k: Int, lambda: Double, tol: Double, maxIter: Int): SammonMapping", "member" : "smile.mds.Operators.sammon", "link" : "smile\/mds\/Operators.html#sammon(proximity:Array[Array[Double]],k:Int,lambda:Double,tol:Double,maxIter:Int):smile.mds.SammonMapping", "kind" : "def"}, {"label" : "isomds", "tail" : "(proximity: Array[Array[Double]], k: Int, tol: Double, maxIter: Int): IsotonicMDS", "member" : "smile.mds.Operators.isomds", "link" : "smile\/mds\/Operators.html#isomds(proximity:Array[Array[Double]],k:Int,tol:Double,maxIter:Int):smile.mds.IsotonicMDS", "kind" : "def"}, {"label" : "mds", "tail" : "(proximity: Array[Array[Double]], k: Int, add: Boolean): MDS", "member" : "smile.mds.Operators.mds", "link" : "smile\/mds\/Operators.html#mds(proximity:Array[Array[Double]],k:Int,add:Boolean):smile.mds.MDS", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/mds\/Operators.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/mds\/Operators.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/mds\/Operators.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/mds\/Operators.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/mds\/Operators.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/mds\/Operators.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/mds\/Operators.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/mds\/Operators.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/mds\/Operators.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/mds\/Operators.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/mds\/Operators.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/mds\/Operators.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/mds\/Operators.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/mds\/Operators.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/mds\/Operators.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/mds\/Operators.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/mds\/Operators.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/mds\/Operators.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/mds\/Operators.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "High level multi-dimensional scaling operators.", "trait" : "smile\/mds\/Operators.html", "kind" : "trait"}], "smile.math.distance" : [{"name" : "smile.math.distance.Hamming", "shortDescription" : "Hamming distance between two bit strings.", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "smile\/math\/distance\/Hamming.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/distance\/Hamming.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Hamming) ⇒ Boolean, msg: ⇒ Any): Hamming", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/distance\/Hamming.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Hamming) ⇒ Boolean): Hamming", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/distance\/Hamming.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Hamming", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/distance\/Hamming.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Hamming", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/distance\/Hamming.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Hamming, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/distance\/Hamming.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Hamming, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/distance\/Hamming.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "d", "tail" : "(x: Array[Int], y: Array[Int]): Double", "member" : "smile.math.distance.Hamming.d", "link" : "smile\/math\/distance\/Hamming.html#d(x:Array[Int],y:Array[Int]):Double", "kind" : "def"}, {"member" : "smile.math.distance.Hamming#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/distance\/Hamming.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/distance\/Hamming.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/distance\/Hamming.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/distance\/Hamming.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/distance\/Hamming.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/distance\/Hamming.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/distance\/Hamming.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/distance\/Hamming.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/distance\/Hamming.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/distance\/Hamming.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/distance\/Hamming.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/distance\/Hamming.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/math\/distance\/Hamming.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/distance\/Hamming.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/math\/distance\/Hamming.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/math\/distance\/Hamming.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/distance\/Hamming.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/distance\/Hamming.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/distance\/Hamming.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "smile\/math\/distance\/Hamming.html", "kind" : "class"}, {"name" : "smile.math.distance.MeanMahanttan", "shortDescription" : "Mean Mahantan distance.", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "smile\/math\/distance\/MeanMahanttan.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/distance\/MeanMahanttan.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MeanMahanttan) ⇒ Boolean, msg: ⇒ Any): MeanMahanttan", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/distance\/MeanMahanttan.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MeanMahanttan) ⇒ Boolean): MeanMahanttan", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/distance\/MeanMahanttan.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): MeanMahanttan", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/distance\/MeanMahanttan.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): MeanMahanttan", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/distance\/MeanMahanttan.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (MeanMahanttan, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/distance\/MeanMahanttan.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (MeanMahanttan, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/distance\/MeanMahanttan.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "d", "tail" : "(x: Array[Int], y: Array[Int]): Double", "member" : "smile.math.distance.MeanMahanttan.d", "link" : "smile\/math\/distance\/MeanMahanttan.html#d(x:Array[Int],y:Array[Int]):Double", "kind" : "def"}, {"member" : "smile.math.distance.MeanMahanttan#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/distance\/MeanMahanttan.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/distance\/MeanMahanttan.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/distance\/MeanMahanttan.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/distance\/MeanMahanttan.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/distance\/MeanMahanttan.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/distance\/MeanMahanttan.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/distance\/MeanMahanttan.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/distance\/MeanMahanttan.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/distance\/MeanMahanttan.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/distance\/MeanMahanttan.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/distance\/MeanMahanttan.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/distance\/MeanMahanttan.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/math\/distance\/MeanMahanttan.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/distance\/MeanMahanttan.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/math\/distance\/MeanMahanttan.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/math\/distance\/MeanMahanttan.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/distance\/MeanMahanttan.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/distance\/MeanMahanttan.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/distance\/MeanMahanttan.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "smile\/math\/distance\/MeanMahanttan.html", "kind" : "class"}, {"name" : "smile.math.distance.PatternDifference", "shortDescription" : "Pattern difference distance.", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "smile\/math\/distance\/PatternDifference.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/distance\/PatternDifference.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (PatternDifference) ⇒ Boolean, msg: ⇒ Any): PatternDifference", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/distance\/PatternDifference.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (PatternDifference) ⇒ Boolean): PatternDifference", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/distance\/PatternDifference.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): PatternDifference", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/distance\/PatternDifference.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): PatternDifference", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/distance\/PatternDifference.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (PatternDifference, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/distance\/PatternDifference.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (PatternDifference, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/distance\/PatternDifference.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "d", "tail" : "(x: Array[Int], y: Array[Int]): Double", "member" : "smile.math.distance.PatternDifference.d", "link" : "smile\/math\/distance\/PatternDifference.html#d(x:Array[Int],y:Array[Int]):Double", "kind" : "def"}, {"member" : "smile.math.distance.PatternDifference#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/distance\/PatternDifference.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/distance\/PatternDifference.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/distance\/PatternDifference.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/distance\/PatternDifference.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/distance\/PatternDifference.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/distance\/PatternDifference.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/distance\/PatternDifference.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/distance\/PatternDifference.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/distance\/PatternDifference.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/distance\/PatternDifference.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/distance\/PatternDifference.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/distance\/PatternDifference.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/math\/distance\/PatternDifference.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/distance\/PatternDifference.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/math\/distance\/PatternDifference.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/math\/distance\/PatternDifference.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/distance\/PatternDifference.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/distance\/PatternDifference.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/distance\/PatternDifference.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "smile\/math\/distance\/PatternDifference.html", "kind" : "class"}, {"name" : "smile.math.distance.ShapeDifference", "shortDescription" : "Shape Difference distance.", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "smile\/math\/distance\/ShapeDifference.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/distance\/ShapeDifference.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ShapeDifference) ⇒ Boolean, msg: ⇒ Any): ShapeDifference", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/distance\/ShapeDifference.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ShapeDifference) ⇒ Boolean): ShapeDifference", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/distance\/ShapeDifference.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ShapeDifference", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/distance\/ShapeDifference.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ShapeDifference", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/distance\/ShapeDifference.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ShapeDifference, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/distance\/ShapeDifference.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ShapeDifference, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/distance\/ShapeDifference.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "d", "tail" : "(x: Array[Int], y: Array[Int]): Double", "member" : "smile.math.distance.ShapeDifference.d", "link" : "smile\/math\/distance\/ShapeDifference.html#d(x:Array[Int],y:Array[Int]):Double", "kind" : "def"}, {"member" : "smile.math.distance.ShapeDifference#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/distance\/ShapeDifference.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/distance\/ShapeDifference.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/distance\/ShapeDifference.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/distance\/ShapeDifference.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/distance\/ShapeDifference.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/distance\/ShapeDifference.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/distance\/ShapeDifference.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/distance\/ShapeDifference.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/distance\/ShapeDifference.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/distance\/ShapeDifference.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/distance\/ShapeDifference.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/distance\/ShapeDifference.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/math\/distance\/ShapeDifference.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/distance\/ShapeDifference.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/math\/distance\/ShapeDifference.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/math\/distance\/ShapeDifference.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/distance\/ShapeDifference.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/distance\/ShapeDifference.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/distance\/ShapeDifference.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "smile\/math\/distance\/ShapeDifference.html", "kind" : "class"}, {"name" : "smile.math.distance.SizeDifference", "shortDescription" : "Size Difference distance.", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "smile\/math\/distance\/SizeDifference.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/distance\/SizeDifference.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SizeDifference) ⇒ Boolean, msg: ⇒ Any): SizeDifference", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/distance\/SizeDifference.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SizeDifference) ⇒ Boolean): SizeDifference", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/distance\/SizeDifference.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): SizeDifference", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/distance\/SizeDifference.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): SizeDifference", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/distance\/SizeDifference.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (SizeDifference, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/distance\/SizeDifference.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (SizeDifference, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/distance\/SizeDifference.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "d", "tail" : "(x: Array[Int], y: Array[Int]): Double", "member" : "smile.math.distance.SizeDifference.d", "link" : "smile\/math\/distance\/SizeDifference.html#d(x:Array[Int],y:Array[Int]):Double", "kind" : "def"}, {"member" : "smile.math.distance.SizeDifference#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/distance\/SizeDifference.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/distance\/SizeDifference.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/distance\/SizeDifference.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/distance\/SizeDifference.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/distance\/SizeDifference.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/distance\/SizeDifference.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/distance\/SizeDifference.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/distance\/SizeDifference.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/distance\/SizeDifference.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/distance\/SizeDifference.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/distance\/SizeDifference.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/distance\/SizeDifference.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/math\/distance\/SizeDifference.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/distance\/SizeDifference.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/math\/distance\/SizeDifference.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/math\/distance\/SizeDifference.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/distance\/SizeDifference.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/distance\/SizeDifference.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/distance\/SizeDifference.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "smile\/math\/distance\/SizeDifference.html", "kind" : "class"}, {"name" : "smile.math.distance.Vari", "shortDescription" : "Vari distance class.", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "smile\/math\/distance\/Vari.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/distance\/Vari.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Vari) ⇒ Boolean, msg: ⇒ Any): Vari", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/distance\/Vari.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Vari) ⇒ Boolean): Vari", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/distance\/Vari.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Vari", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/distance\/Vari.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Vari", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/distance\/Vari.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Vari, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/distance\/Vari.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Vari, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/distance\/Vari.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "d", "tail" : "(x: Array[Int], y: Array[Int]): Double", "member" : "smile.math.distance.Vari.d", "link" : "smile\/math\/distance\/Vari.html#d(x:Array[Int],y:Array[Int]):Double", "kind" : "def"}, {"member" : "smile.math.distance.Vari#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/distance\/Vari.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/distance\/Vari.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/distance\/Vari.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/distance\/Vari.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/distance\/Vari.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/distance\/Vari.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/distance\/Vari.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/distance\/Vari.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/distance\/Vari.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/distance\/Vari.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/distance\/Vari.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/distance\/Vari.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/math\/distance\/Vari.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/distance\/Vari.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/math\/distance\/Vari.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/math\/distance\/Vari.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/distance\/Vari.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/distance\/Vari.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/distance\/Vari.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "smile\/math\/distance\/Vari.html", "kind" : "class"}], "smile.clustering" : [{"name" : "smile.clustering.KModes", "shortDescription" : "K-Modes clustering.", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "smile\/clustering\/KModes.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/clustering\/KModes.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (KModes) ⇒ Boolean, msg: ⇒ Any): KModes", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/clustering\/KModes.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (KModes) ⇒ Boolean): KModes", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/clustering\/KModes.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): KModes", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/clustering\/KModes.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): KModes", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/clustering\/KModes.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (KModes, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/clustering\/KModes.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (KModes, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/clustering\/KModes.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "predict", "tail" : "(x: Array[Int]): Int", "member" : "smile.clustering.KModes.predict", "link" : "smile\/clustering\/KModes.html#predict(x:Array[Int]):Int", "kind" : "def"}, {"label" : "modes", "tail" : ": Array[Array[Int]]", "member" : "smile.clustering.KModes.modes", "link" : "smile\/clustering\/KModes.html#modes:Array[Array[Int]]", "kind" : "val"}, {"label" : "p", "tail" : ": Int", "member" : "smile.clustering.KModes.p", "link" : "smile\/clustering\/KModes.html#p:Int", "kind" : "val"}, {"member" : "smile.clustering.KModes#<init>", "error" : "unsupported entity"}, {"label" : "getClusterSize", "tail" : "(): Array[Int]", "member" : "smile.clustering.PartitionClustering.getClusterSize", "link" : "smile\/clustering\/KModes.html#getClusterSize():Array[Int]", "kind" : "def"}, {"label" : "getClusterLabel", "tail" : "(): Array[Int]", "member" : "smile.clustering.PartitionClustering.getClusterLabel", "link" : "smile\/clustering\/KModes.html#getClusterLabel():Array[Int]", "kind" : "def"}, {"label" : "getNumClusters", "tail" : "(): Int", "member" : "smile.clustering.PartitionClustering.getNumClusters", "link" : "smile\/clustering\/KModes.html#getNumClusters():Int", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/clustering\/KModes.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/clustering\/KModes.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/clustering\/KModes.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/clustering\/KModes.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/clustering\/KModes.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/clustering\/KModes.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/clustering\/KModes.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/clustering\/KModes.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/clustering\/KModes.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/clustering\/KModes.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/clustering\/KModes.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/clustering\/KModes.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/clustering\/KModes.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/clustering\/KModes.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/clustering\/KModes.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/clustering\/KModes.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/clustering\/KModes.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/clustering\/KModes.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/clustering\/KModes.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "smile\/clustering\/KModes.html", "kind" : "class"}, {"name" : "smile.clustering.Operators", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "smile\/clustering\/Operators.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/clustering\/Operators.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Operators) ⇒ Boolean, msg: ⇒ Any): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/clustering\/Operators.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Operators) ⇒ Boolean): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/clustering\/Operators.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/clustering\/Operators.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/clustering\/Operators.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Operators, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/clustering\/Operators.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Operators, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/clustering\/Operators.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "specc", "tail" : "(data: Array[Array[Double]], k: Int, l: Int, sigma: Double): SpectralClustering", "member" : "smile.clustering.Operators.specc", "link" : "smile\/clustering\/Operators.html#specc(data:Array[Array[Double]],k:Int,l:Int,sigma:Double):smile.clustering.SpectralClustering", "kind" : "def"}, {"label" : "specc", "tail" : "(data: Array[Array[Double]], k: Int, sigma: Double): SpectralClustering", "member" : "smile.clustering.Operators.specc", "link" : "smile\/clustering\/Operators.html#specc(data:Array[Array[Double]],k:Int,sigma:Double):smile.clustering.SpectralClustering", "kind" : "def"}, {"label" : "specc", "tail" : "(W: Array[Array[Double]], k: Int): SpectralClustering", "member" : "smile.clustering.Operators.specc", "link" : "smile\/clustering\/Operators.html#specc(W:Array[Array[Double]],k:Int):smile.clustering.SpectralClustering", "kind" : "def"}, {"label" : "mec", "tail" : "(data: Array[T], nns: RNNSearch[T, T], k: Int, radius: Double, y: Array[Int]): MEC[T]", "member" : "smile.clustering.Operators.mec", "link" : "smile\/clustering\/Operators.html#mec[T<:Object](data:Array[T],nns:smile.neighbor.RNNSearch[T,T],k:Int,radius:Double,y:Array[Int]):smile.clustering.MEC[T]", "kind" : "def"}, {"label" : "mec", "tail" : "(data: Array[Array[Double]], k: Int, radius: Double): MEC[Array[Double]]", "member" : "smile.clustering.Operators.mec", "link" : "smile\/clustering\/Operators.html#mec(data:Array[Array[Double]],k:Int,radius:Double):smile.clustering.MEC[Array[Double]]", "kind" : "def"}, {"label" : "mec", "tail" : "(data: Array[T], distance: Metric[T], k: Int, radius: Double): MEC[T]", "member" : "smile.clustering.Operators.mec", "link" : "smile\/clustering\/Operators.html#mec[T<:Object](data:Array[T],distance:smile.math.distance.Metric[T],k:Int,radius:Double):smile.clustering.MEC[T]", "kind" : "def"}, {"label" : "mec", "tail" : "(data: Array[T], distance: Distance[T], k: Int, radius: Double): MEC[T]", "member" : "smile.clustering.Operators.mec", "link" : "smile\/clustering\/Operators.html#mec[T<:Object](data:Array[T],distance:smile.math.distance.Distance[T],k:Int,radius:Double):smile.clustering.MEC[T]", "kind" : "def"}, {"label" : "denclue", "tail" : "(data: Array[Array[Double]], sigma: Double, m: Int): DENCLUE", "member" : "smile.clustering.Operators.denclue", "link" : "smile\/clustering\/Operators.html#denclue(data:Array[Array[Double]],sigma:Double,m:Int):smile.clustering.DENCLUE", "kind" : "def"}, {"label" : "dbscan", "tail" : "(data: Array[Array[Double]], minPts: Int, radius: Double): DBSCAN[Array[Double]]", "member" : "smile.clustering.Operators.dbscan", "link" : "smile\/clustering\/Operators.html#dbscan(data:Array[Array[Double]],minPts:Int,radius:Double):smile.clustering.DBSCAN[Array[Double]]", "kind" : "def"}, {"label" : "dbscan", "tail" : "(data: Array[T], distance: Metric[T], minPts: Int, radius: Double): DBSCAN[T]", "member" : "smile.clustering.Operators.dbscan", "link" : "smile\/clustering\/Operators.html#dbscan[T<:Object](data:Array[T],distance:smile.math.distance.Metric[T],minPts:Int,radius:Double):smile.clustering.DBSCAN[T]", "kind" : "def"}, {"label" : "dbscan", "tail" : "(data: Array[T], nns: RNNSearch[T, T], minPts: Int, radius: Double): DBSCAN[T]", "member" : "smile.clustering.Operators.dbscan", "link" : "smile\/clustering\/Operators.html#dbscan[T<:Object](data:Array[T],nns:smile.neighbor.RNNSearch[T,T],minPts:Int,radius:Double):smile.clustering.DBSCAN[T]", "kind" : "def"}, {"label" : "birch", "tail" : "(data: Array[Array[Double]], k: Int, minPts: Int, branch: Int, radius: Double): BIRCH", "member" : "smile.clustering.Operators.birch", "link" : "smile\/clustering\/Operators.html#birch(data:Array[Array[Double]],k:Int,minPts:Int,branch:Int,radius:Double):smile.clustering.BIRCH", "kind" : "def"}, {"label" : "clarans", "tail" : "(data: Array[Array[Double]], k: Int, maxNeighbor: Int, numLocal: Int): CLARANS[Array[Double]]", "member" : "smile.clustering.Operators.clarans", "link" : "smile\/clustering\/Operators.html#clarans(data:Array[Array[Double]],k:Int,maxNeighbor:Int,numLocal:Int):smile.clustering.CLARANS[Array[Double]]", "kind" : "def"}, {"label" : "clarans", "tail" : "(data: Array[T], distance: Distance[T], k: Int, maxNeighbor: Int, numLocal: Int): CLARANS[T]", "member" : "smile.clustering.Operators.clarans", "link" : "smile\/clustering\/Operators.html#clarans[T<:Object](data:Array[T],distance:smile.math.distance.Distance[T],k:Int,maxNeighbor:Int,numLocal:Int):smile.clustering.CLARANS[T]", "kind" : "def"}, {"label" : "dac", "tail" : "(data: Array[Array[Double]], k: Int, alpha: Double): DeterministicAnnealing", "member" : "smile.clustering.Operators.dac", "link" : "smile\/clustering\/Operators.html#dac(data:Array[Array[Double]],k:Int,alpha:Double):smile.clustering.DeterministicAnnealing", "kind" : "def"}, {"label" : "sib", "tail" : "(data: SparseDataset, k: Int, maxIter: Int, runs: Int): SIB", "member" : "smile.clustering.Operators.sib", "link" : "smile\/clustering\/Operators.html#sib(data:smile.data.SparseDataset,k:Int,maxIter:Int,runs:Int):smile.clustering.SIB", "kind" : "def"}, {"label" : "sib", "tail" : "(data: Array[Array[Double]], k: Int, maxIter: Int, runs: Int): SIB", "member" : "smile.clustering.Operators.sib", "link" : "smile\/clustering\/Operators.html#sib(data:Array[Array[Double]],k:Int,maxIter:Int,runs:Int):smile.clustering.SIB", "kind" : "def"}, {"label" : "gmeans", "tail" : "(data: Array[Array[Double]], k: Int): GMeans", "member" : "smile.clustering.Operators.gmeans", "link" : "smile\/clustering\/Operators.html#gmeans(data:Array[Array[Double]],k:Int):smile.clustering.GMeans", "kind" : "def"}, {"label" : "xmeans", "tail" : "(data: Array[Array[Double]], k: Int): XMeans", "member" : "smile.clustering.Operators.xmeans", "link" : "smile\/clustering\/Operators.html#xmeans(data:Array[Array[Double]],k:Int):smile.clustering.XMeans", "kind" : "def"}, {"label" : "kmeans", "tail" : "(data: Array[Array[Double]], k: Int, maxIter: Int, runs: Int): KMeans", "member" : "smile.clustering.Operators.kmeans", "link" : "smile\/clustering\/Operators.html#kmeans(data:Array[Array[Double]],k:Int,maxIter:Int,runs:Int):smile.clustering.KMeans", "kind" : "def"}, {"label" : "hclust", "tail" : "(proximity: Array[Array[Double]], method: String): HierarchicalClustering", "member" : "smile.clustering.Operators.hclust", "link" : "smile\/clustering\/Operators.html#hclust(proximity:Array[Array[Double]],method:String):smile.clustering.HierarchicalClustering", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/clustering\/Operators.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/clustering\/Operators.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/clustering\/Operators.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/clustering\/Operators.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/clustering\/Operators.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/clustering\/Operators.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/clustering\/Operators.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/clustering\/Operators.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/clustering\/Operators.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/clustering\/Operators.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/clustering\/Operators.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/clustering\/Operators.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/clustering\/Operators.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/clustering\/Operators.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/clustering\/Operators.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/clustering\/Operators.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/clustering\/Operators.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/clustering\/Operators.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/clustering\/Operators.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "High level cluster analysis operators.", "trait" : "smile\/clustering\/Operators.html", "kind" : "trait"}], "smile.association" : [{"name" : "smile.association.Operators", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "smile\/association\/Operators.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/association\/Operators.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Operators) ⇒ Boolean, msg: ⇒ Any): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/association\/Operators.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Operators) ⇒ Boolean): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/association\/Operators.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/association\/Operators.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/association\/Operators.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Operators, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/association\/Operators.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Operators, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/association\/Operators.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "arm", "tail" : "(file: String, minSupport: Int, confidence: Double, output: String): Long", "member" : "smile.association.Operators.arm", "link" : "smile\/association\/Operators.html#arm(file:String,minSupport:Int,confidence:Double,output:String):Long", "kind" : "def"}, {"label" : "arm", "tail" : "(file: String, minSupport: Int, confidence: Double, output: PrintStream): Long", "member" : "smile.association.Operators.arm", "link" : "smile\/association\/Operators.html#arm(file:String,minSupport:Int,confidence:Double,output:java.io.PrintStream):Long", "kind" : "def"}, {"label" : "arm", "tail" : "(itemsets: Array[Array[Int]], minSupport: Int, confidence: Double, output: String): Long", "member" : "smile.association.Operators.arm", "link" : "smile\/association\/Operators.html#arm(itemsets:Array[Array[Int]],minSupport:Int,confidence:Double,output:String):Long", "kind" : "def"}, {"label" : "arm", "tail" : "(itemsets: Array[Array[Int]], minSupport: Int, confidence: Double, output: PrintStream): Long", "member" : "smile.association.Operators.arm", "link" : "smile\/association\/Operators.html#arm(itemsets:Array[Array[Int]],minSupport:Int,confidence:Double,output:java.io.PrintStream):Long", "kind" : "def"}, {"label" : "arm", "tail" : "(itemsets: Array[Array[Int]], minSupport: Int, confidence: Double): Buffer[AssociationRule]", "member" : "smile.association.Operators.arm", "link" : "smile\/association\/Operators.html#arm(itemsets:Array[Array[Int]],minSupport:Int,confidence:Double):scala.collection.mutable.Buffer[smile.association.AssociationRule]", "kind" : "def"}, {"label" : "fpgrowth", "tail" : "(file: String, minSupport: Int, output: String): Long", "member" : "smile.association.Operators.fpgrowth", "link" : "smile\/association\/Operators.html#fpgrowth(file:String,minSupport:Int,output:String):Long", "kind" : "def"}, {"label" : "fpgrowth", "tail" : "(file: String, minSupport: Int, output: PrintStream): Long", "member" : "smile.association.Operators.fpgrowth", "link" : "smile\/association\/Operators.html#fpgrowth(file:String,minSupport:Int,output:java.io.PrintStream):Long", "kind" : "def"}, {"label" : "fpgrowth", "tail" : "(itemsets: Array[Array[Int]], minSupport: Int, output: String): Long", "member" : "smile.association.Operators.fpgrowth", "link" : "smile\/association\/Operators.html#fpgrowth(itemsets:Array[Array[Int]],minSupport:Int,output:String):Long", "kind" : "def"}, {"label" : "fpgrowth", "tail" : "(itemsets: Array[Array[Int]], minSupport: Int, output: PrintStream): Long", "member" : "smile.association.Operators.fpgrowth", "link" : "smile\/association\/Operators.html#fpgrowth(itemsets:Array[Array[Int]],minSupport:Int,output:java.io.PrintStream):Long", "kind" : "def"}, {"label" : "fpgrowth", "tail" : "(itemsets: Array[Array[Int]], minSupport: Int): Buffer[ItemSet]", "member" : "smile.association.Operators.fpgrowth", "link" : "smile\/association\/Operators.html#fpgrowth(itemsets:Array[Array[Int]],minSupport:Int):scala.collection.mutable.Buffer[smile.association.ItemSet]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/association\/Operators.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/association\/Operators.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/association\/Operators.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/association\/Operators.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/association\/Operators.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/association\/Operators.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/association\/Operators.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/association\/Operators.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/association\/Operators.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/association\/Operators.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/association\/Operators.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/association\/Operators.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/association\/Operators.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/association\/Operators.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/association\/Operators.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/association\/Operators.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/association\/Operators.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/association\/Operators.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/association\/Operators.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "High level association rule operators.", "trait" : "smile\/association\/Operators.html", "kind" : "trait"}], "smile.regression" : [{"name" : "smile.regression.Operators", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "smile\/regression\/Operators.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/regression\/Operators.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Operators) ⇒ Boolean, msg: ⇒ Any): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/regression\/Operators.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Operators) ⇒ Boolean): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/regression\/Operators.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/regression\/Operators.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/regression\/Operators.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Operators, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/regression\/Operators.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Operators, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/regression\/Operators.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "nrbfnet", "tail" : "(x: Array[T], y: Array[Double], distance: Metric[T], rbf: Array[RBF], centers: Array[T]): RBFNetwork[T]", "member" : "smile.regression.Operators.nrbfnet", "link" : "smile\/regression\/Operators.html#nrbfnet[T<:AnyRef,RBF<:smile.math.rbf.RadialBasisFunction](x:Array[T],y:Array[Double],distance:smile.math.distance.Metric[T],rbf:Array[RBF],centers:Array[T]):smile.regression.RBFNetwork[T]", "kind" : "def"}, {"label" : "rbfnet", "tail" : "(x: Array[T], y: Array[Double], distance: Metric[T], rbf: Array[RBF], centers: Array[T]): RBFNetwork[T]", "member" : "smile.regression.Operators.rbfnet", "link" : "smile\/regression\/Operators.html#rbfnet[T<:AnyRef,RBF<:smile.math.rbf.RadialBasisFunction](x:Array[T],y:Array[Double],distance:smile.math.distance.Metric[T],rbf:Array[RBF],centers:Array[T]):smile.regression.RBFNetwork[T]", "kind" : "def"}, {"label" : "nrbfnet", "tail" : "(x: Array[T], y: Array[Double], distance: Metric[T], rbf: RadialBasisFunction, centers: Array[T]): RBFNetwork[T]", "member" : "smile.regression.Operators.nrbfnet", "link" : "smile\/regression\/Operators.html#nrbfnet[T<:AnyRef](x:Array[T],y:Array[Double],distance:smile.math.distance.Metric[T],rbf:smile.math.rbf.RadialBasisFunction,centers:Array[T]):smile.regression.RBFNetwork[T]", "kind" : "def"}, {"label" : "rbfnet", "tail" : "(x: Array[T], y: Array[Double], distance: Metric[T], rbf: RadialBasisFunction, centers: Array[T]): RBFNetwork[T]", "member" : "smile.regression.Operators.rbfnet", "link" : "smile\/regression\/Operators.html#rbfnet[T<:AnyRef](x:Array[T],y:Array[Double],distance:smile.math.distance.Metric[T],rbf:smile.math.rbf.RadialBasisFunction,centers:Array[T]):smile.regression.RBFNetwork[T]", "kind" : "def"}, {"label" : "gpr", "tail" : "(x: Array[T], y: Array[Double], t: Array[T], kernel: MercerKernel[T], lambda: Double, nystrom: Boolean): GaussianProcessRegression[T]", "member" : "smile.regression.Operators.gpr", "link" : "smile\/regression\/Operators.html#gpr[T<:AnyRef](x:Array[T],y:Array[Double],t:Array[T],kernel:smile.math.kernel.MercerKernel[T],lambda:Double,nystrom:Boolean):smile.regression.GaussianProcessRegression[T]", "kind" : "def"}, {"label" : "gpr", "tail" : "(x: Array[T], y: Array[Double], kernel: MercerKernel[T], lambda: Double): GaussianProcessRegression[T]", "member" : "smile.regression.Operators.gpr", "link" : "smile\/regression\/Operators.html#gpr[T<:AnyRef](x:Array[T],y:Array[Double],kernel:smile.math.kernel.MercerKernel[T],lambda:Double):smile.regression.GaussianProcessRegression[T]", "kind" : "def"}, {"label" : "gbm", "tail" : "(x: Array[Array[Double]], y: Array[Double], attributes: Array[Attribute], loss: Loss, ntrees: Int, maxNodes: Int, shrinkage: Double, subsample: Double): GradientTreeBoost", "member" : "smile.regression.Operators.gbm", "link" : "smile\/regression\/Operators.html#gbm(x:Array[Array[Double]],y:Array[Double],attributes:Array[smile.data.Attribute],loss:smile.regression.GradientTreeBoost.Loss,ntrees:Int,maxNodes:Int,shrinkage:Double,subsample:Double):smile.regression.GradientTreeBoost", "kind" : "def"}, {"label" : "randomForest", "tail" : "(x: Array[Array[Double]], y: Array[Double], attributes: Array[Attribute], ntrees: Int, maxNodes: Int, nodeSize: Int, mtry: Int, subsample: Double): RandomForest", "member" : "smile.regression.Operators.randomForest", "link" : "smile\/regression\/Operators.html#randomForest(x:Array[Array[Double]],y:Array[Double],attributes:Array[smile.data.Attribute],ntrees:Int,maxNodes:Int,nodeSize:Int,mtry:Int,subsample:Double):smile.regression.RandomForest", "kind" : "def"}, {"label" : "cart", "tail" : "(x: Array[Array[Double]], y: Array[Double], maxNodes: Int, attributes: Array[Attribute]): RegressionTree", "member" : "smile.regression.Operators.cart", "link" : "smile\/regression\/Operators.html#cart(x:Array[Array[Double]],y:Array[Double],maxNodes:Int,attributes:Array[smile.data.Attribute]):smile.regression.RegressionTree", "kind" : "def"}, {"label" : "svr", "tail" : "(x: Array[T], y: Array[Double], kernel: MercerKernel[T], eps: Double, C: Double, weight: Array[Double], tol: Double): SVR[T]", "member" : "smile.regression.Operators.svr", "link" : "smile\/regression\/Operators.html#svr[T<:AnyRef](x:Array[T],y:Array[Double],kernel:smile.math.kernel.MercerKernel[T],eps:Double,C:Double,weight:Array[Double],tol:Double):smile.regression.SVR[T]", "kind" : "def"}, {"label" : "lasso", "tail" : "(x: Array[Array[Double]], y: Array[Double], lambda: Double, tol: Double, maxIter: Int): LASSO", "member" : "smile.regression.Operators.lasso", "link" : "smile\/regression\/Operators.html#lasso(x:Array[Array[Double]],y:Array[Double],lambda:Double,tol:Double,maxIter:Int):smile.regression.LASSO", "kind" : "def"}, {"label" : "ridge", "tail" : "(x: Array[Array[Double]], y: Array[Double], lambda: Double): RidgeRegression", "member" : "smile.regression.Operators.ridge", "link" : "smile\/regression\/Operators.html#ridge(x:Array[Array[Double]],y:Array[Double],lambda:Double):smile.regression.RidgeRegression", "kind" : "def"}, {"label" : "ols", "tail" : "(x: Array[Array[Double]], y: Array[Double], method: String): OLS", "member" : "smile.regression.Operators.ols", "link" : "smile\/regression\/Operators.html#ols(x:Array[Array[Double]],y:Array[Double],method:String):smile.regression.OLS", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/regression\/Operators.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/regression\/Operators.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/regression\/Operators.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/regression\/Operators.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/regression\/Operators.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/regression\/Operators.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/regression\/Operators.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/regression\/Operators.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/regression\/Operators.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/regression\/Operators.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/regression\/Operators.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/regression\/Operators.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/regression\/Operators.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/regression\/Operators.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/regression\/Operators.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/regression\/Operators.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/regression\/Operators.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/regression\/Operators.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/regression\/Operators.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "High level regression operators.", "trait" : "smile\/regression\/Operators.html", "kind" : "trait"}], "smile.manifold" : [{"name" : "smile.manifold.Operators", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "smile\/manifold\/Operators.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/manifold\/Operators.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Operators) ⇒ Boolean, msg: ⇒ Any): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/manifold\/Operators.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Operators) ⇒ Boolean): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/manifold\/Operators.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/manifold\/Operators.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/manifold\/Operators.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Operators, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/manifold\/Operators.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Operators, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/manifold\/Operators.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "tsne", "tail" : "(X: Array[Array[Double]], d: Int, perplexity: Double, eta: Double, iterations: Int): TSNE", "member" : "smile.manifold.Operators.tsne", "link" : "smile\/manifold\/Operators.html#tsne(X:Array[Array[Double]],d:Int,perplexity:Double,eta:Double,iterations:Int):smile.manifold.TSNE", "kind" : "def"}, {"label" : "laplacian", "tail" : "(data: Array[Array[Double]], d: Int, k: Int, t: Double): LaplacianEigenmap", "member" : "smile.manifold.Operators.laplacian", "link" : "smile\/manifold\/Operators.html#laplacian(data:Array[Array[Double]],d:Int,k:Int,t:Double):smile.manifold.LaplacianEigenmap", "kind" : "def"}, {"label" : "lle", "tail" : "(data: Array[Array[Double]], d: Int, k: Int): LLE", "member" : "smile.manifold.Operators.lle", "link" : "smile\/manifold\/Operators.html#lle(data:Array[Array[Double]],d:Int,k:Int):smile.manifold.LLE", "kind" : "def"}, {"label" : "isomap", "tail" : "(data: Array[Array[Double]], d: Int, k: Int, CIsomap: Boolean): IsoMap", "member" : "smile.manifold.Operators.isomap", "link" : "smile\/manifold\/Operators.html#isomap(data:Array[Array[Double]],d:Int,k:Int,CIsomap:Boolean):smile.manifold.IsoMap", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/manifold\/Operators.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/manifold\/Operators.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/manifold\/Operators.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/manifold\/Operators.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/manifold\/Operators.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/manifold\/Operators.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/manifold\/Operators.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/manifold\/Operators.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/manifold\/Operators.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/manifold\/Operators.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/manifold\/Operators.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/manifold\/Operators.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/manifold\/Operators.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/manifold\/Operators.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/manifold\/Operators.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/manifold\/Operators.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/manifold\/Operators.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/manifold\/Operators.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/manifold\/Operators.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "High level manifold learning operators.", "trait" : "smile\/manifold\/Operators.html", "kind" : "trait"}], "smile" : [{"name" : "smile.read", "shortDescription" : "Input operators.", "object" : "smile\/read$.html", "members_object" : [{"label" : "wavefront", "tail" : "(file: String): (Array[Array[Double]], Array[Array[Int]])", "member" : "smile.read.wavefront", "link" : "smile\/read$.html#wavefront(file:String):(Array[Array[Double]],Array[Array[Int]])", "kind" : "def"}, {"label" : "txt", "tail" : "(file: String): AttributeDataset", "member" : "smile.read.txt", "link" : "smile\/read$.html#txt(file:String):smile.data.AttributeDataset", "kind" : "def"}, {"label" : "res", "tail" : "(file: String): AttributeDataset", "member" : "smile.read.res", "link" : "smile\/read$.html#res(file:String):smile.data.AttributeDataset", "kind" : "def"}, {"label" : "pcl", "tail" : "(file: String): AttributeDataset", "member" : "smile.read.pcl", "link" : "smile\/read$.html#pcl(file:String):smile.data.AttributeDataset", "kind" : "def"}, {"label" : "gct", "tail" : "(file: String): AttributeDataset", "member" : "smile.read.gct", "link" : "smile\/read$.html#gct(file:String):smile.data.AttributeDataset", "kind" : "def"}, {"label" : "csv", "tail" : "(file: String, attributes: Array[Attribute], response: Option[(Attribute, Int)], comment: String, missing: String, header: Boolean, rowNames: Boolean): AttributeDataset", "member" : "smile.read.csv", "link" : "smile\/read$.html#csv(file:String,attributes:Array[smile.data.Attribute],response:Option[(smile.data.Attribute,Int)],comment:String,missing:String,header:Boolean,rowNames:Boolean):smile.data.AttributeDataset", "kind" : "def"}, {"label" : "table", "tail" : "(file: String, attributes: Array[Attribute], response: Option[(Attribute, Int)], delimiter: String, comment: String, missing: String, header: Boolean, rowNames: Boolean): AttributeDataset", "member" : "smile.read.table", "link" : "smile\/read$.html#table(file:String,attributes:Array[smile.data.Attribute],response:Option[(smile.data.Attribute,Int)],delimiter:String,comment:String,missing:String,header:Boolean,rowNames:Boolean):smile.data.AttributeDataset", "kind" : "def"}, {"label" : "sb", "tail" : "(file: String): BinarySparseDataset", "member" : "smile.read.sb", "link" : "smile\/read$.html#sb(file:String):smile.data.BinarySparseDataset", "kind" : "def"}, {"label" : "coo", "tail" : "(file: String, arrayIndexOrigin: Int): SparseDataset", "member" : "smile.read.coo", "link" : "smile\/read$.html#coo(file:String,arrayIndexOrigin:Int):smile.data.SparseDataset", "kind" : "def"}, {"label" : "hb", "tail" : "(file: String): SparseMatrix", "member" : "smile.read.hb", "link" : "smile\/read$.html#hb(file:String):smile.math.matrix.SparseMatrix", "kind" : "def"}, {"label" : "libsvm", "tail" : "(file: String): SparseDataset", "member" : "smile.read.libsvm", "link" : "smile\/read$.html#libsvm(file:String):smile.data.SparseDataset", "kind" : "def"}, {"label" : "arff", "tail" : "(file: String, responseIndex: Int): AttributeDataset", "member" : "smile.read.arff", "link" : "smile\/read$.html#arff(file:String,responseIndex:Int):smile.data.AttributeDataset", "kind" : "def"}, {"label" : "jdbc", "tail" : "(rs: ResultSet): AttributeDataset", "member" : "smile.read.jdbc", "link" : "smile\/read$.html#jdbc(rs:java.sql.ResultSet):smile.data.AttributeDataset", "kind" : "def"}, {"label" : "xstream", "tail" : "(file: String): AnyRef", "member" : "smile.read.xstream", "link" : "smile\/read$.html#xstream(file:String):AnyRef", "kind" : "def"}, {"label" : "apply", "tail" : "(file: String): AnyRef", "member" : "smile.read.apply", "link" : "smile\/read$.html#apply(file:String):AnyRef", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/read$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/read$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/read$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/read$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/read$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/read$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/read$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/read$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/read$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/read$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/read$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/read$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/read$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/read$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/read$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/read$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/read$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/read$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/read$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "smile.write", "shortDescription" : "Output operators.", "object" : "smile\/write$.html", "members_object" : [{"label" : "apply", "tail" : "(data: Array[T], file: String): Unit", "member" : "smile.write.apply", "link" : "smile\/write$.html#apply[T](data:Array[T],file:String):Unit", "kind" : "def"}, {"label" : "apply", "tail" : "(data: AttributeVector, file: String): Unit", "member" : "smile.write.apply", "link" : "smile\/write$.html#apply[T](data:smile.data.AttributeVector,file:String):Unit", "kind" : "def"}, {"label" : "csv", "tail" : "(data: Array[Array[T]], file: String): Unit", "member" : "smile.write.csv", "link" : "smile\/write$.html#csv[T](data:Array[Array[T]],file:String):Unit", "kind" : "def"}, {"label" : "table", "tail" : "(data: Array[Array[T]], file: String, delimiter: String): Unit", "member" : "smile.write.table", "link" : "smile\/write$.html#table[T](data:Array[Array[T]],file:String,delimiter:String):Unit", "kind" : "def"}, {"label" : "csv", "tail" : "(data: AttributeDataset, file: String): Unit", "member" : "smile.write.csv", "link" : "smile\/write$.html#csv(data:smile.data.AttributeDataset,file:String):Unit", "kind" : "def"}, {"label" : "table", "tail" : "(data: AttributeDataset, file: String, delimiter: String): Unit", "member" : "smile.write.table", "link" : "smile\/write$.html#table(data:smile.data.AttributeDataset,file:String,delimiter:String):Unit", "kind" : "def"}, {"label" : "arff", "tail" : "(data: AttributeDataset, file: String): Unit", "member" : "smile.write.arff", "link" : "smile\/write$.html#arff(data:smile.data.AttributeDataset,file:String):Unit", "kind" : "def"}, {"label" : "xstream", "tail" : "(x: T, file: String): Unit", "member" : "smile.write.xstream", "link" : "smile\/write$.html#xstream[T<:Object](x:T,file:String):Unit", "kind" : "def"}, {"label" : "apply", "tail" : "(x: T, file: String): Unit", "member" : "smile.write.apply", "link" : "smile\/write$.html#apply[T<:java.io.Serializable](x:T,file:String):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/write$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/write$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/write$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/write$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/write$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/write$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/write$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/write$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/write$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/write$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/write$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/write$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/write$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/write$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/write$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/write$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/write$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/write$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/write$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "smile.math.matrix" : [{"name" : "smile.math.matrix.matrix", "shortDescription" : "Matrix companion object.", "object" : "smile\/math\/matrix\/matrix$.html", "members_object" : [{"label" : "apply", "tail" : "(A: Array[Double]): DenseMatrix", "member" : "smile.math.matrix.matrix.apply", "link" : "smile\/math\/matrix\/matrix$.html#apply(A:Array[Double]):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "apply", "tail" : "(A: Array[Double]*): DenseMatrix", "member" : "smile.math.matrix.matrix.apply", "link" : "smile\/math\/matrix\/matrix$.html#apply(A:Array[Double]*):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "apply", "tail" : "(A: Array[Array[Double]]): DenseMatrix", "member" : "smile.math.matrix.matrix.apply", "link" : "smile\/math\/matrix\/matrix$.html#apply(A:Array[Array[Double]]):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "apply", "tail" : "(nrows: Int, ncols: Int, value: Double): DenseMatrix", "member" : "smile.math.matrix.matrix.apply", "link" : "smile\/math\/matrix\/matrix$.html#apply(nrows:Int,ncols:Int,value:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/matrix\/matrix$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/matrix\/matrix$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/matrix\/matrix$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/matrix\/matrix$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/matrix\/matrix$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/matrix\/matrix$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/matrix\/matrix$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/matrix\/matrix$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/matrix\/matrix$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/matrix\/matrix$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/matrix\/matrix$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/matrix\/matrix$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/math\/matrix\/matrix$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/matrix\/matrix$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/math\/matrix\/matrix$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/math\/matrix\/matrix$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/matrix\/matrix$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/matrix\/matrix$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/matrix\/matrix$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "smile.plot" : [{"name" : "smile.plot.Operators", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "smile\/plot\/Operators.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/plot\/Operators.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Operators) ⇒ Boolean, msg: ⇒ Any): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/plot\/Operators.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Operators) ⇒ Boolean): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/plot\/Operators.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/plot\/Operators.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/plot\/Operators.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Operators, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/plot\/Operators.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Operators, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/plot\/Operators.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "dendrogram", "tail" : "(merge: Array[Array[Int]], height: Array[Double]): Window", "member" : "smile.plot.Operators.dendrogram", "link" : "smile\/plot\/Operators.html#dendrogram(merge:Array[Array[Int]],height:Array[Double]):smile.plot.Window", "kind" : "def"}, {"label" : "dendrogram", "tail" : "(hc: HierarchicalClustering): Window", "member" : "smile.plot.Operators.dendrogram", "link" : "smile\/plot\/Operators.html#dendrogram(hc:smile.clustering.HierarchicalClustering):smile.plot.Window", "kind" : "def"}, {"label" : "screeplot", "tail" : "(pca: PCA): Window", "member" : "smile.plot.Operators.screeplot", "link" : "smile\/plot\/Operators.html#screeplot(pca:smile.projection.PCA):smile.plot.Window", "kind" : "def"}, {"label" : "plot", "tail" : "(x: Array[Array[Double]], y: Array[Double], model: Regression[Array[Double]]): Window", "member" : "smile.plot.Operators.plot", "link" : "smile\/plot\/Operators.html#plot(x:Array[Array[Double]],y:Array[Double],model:smile.regression.Regression[Array[Double]]):smile.plot.Window", "kind" : "def"}, {"label" : "plot", "tail" : "(x: Array[Array[Double]], y: Array[Int], model: Classifier[Array[Double]]): Window", "member" : "smile.plot.Operators.plot", "link" : "smile\/plot\/Operators.html#plot(x:Array[Array[Double]],y:Array[Int],model:smile.classification.Classifier[Array[Double]]):smile.plot.Window", "kind" : "def"}, {"label" : "qqplot", "tail" : "(x: Array[Int], y: Array[Int]): Window", "member" : "smile.plot.Operators.qqplot", "link" : "smile\/plot\/Operators.html#qqplot(x:Array[Int],y:Array[Int]):smile.plot.Window", "kind" : "def"}, {"label" : "qqplot", "tail" : "(x: Array[Int], d: DiscreteDistribution): Window", "member" : "smile.plot.Operators.qqplot", "link" : "smile\/plot\/Operators.html#qqplot(x:Array[Int],d:smile.stat.distribution.DiscreteDistribution):smile.plot.Window", "kind" : "def"}, {"label" : "qqplot", "tail" : "(x: Array[Double], y: Array[Double]): Window", "member" : "smile.plot.Operators.qqplot", "link" : "smile\/plot\/Operators.html#qqplot(x:Array[Double],y:Array[Double]):smile.plot.Window", "kind" : "def"}, {"label" : "qqplot", "tail" : "(x: Array[Double], d: Distribution): Window", "member" : "smile.plot.Operators.qqplot", "link" : "smile\/plot\/Operators.html#qqplot(x:Array[Double],d:smile.stat.distribution.Distribution):smile.plot.Window", "kind" : "def"}, {"label" : "qqplot", "tail" : "(x: Array[Double]): Window", "member" : "smile.plot.Operators.qqplot", "link" : "smile\/plot\/Operators.html#qqplot(x:Array[Double]):smile.plot.Window", "kind" : "def"}, {"label" : "hist", "tail" : "(data: Array[Array[Double]], xbins: Int, ybins: Int): Window", "member" : "smile.plot.Operators.hist", "link" : "smile\/plot\/Operators.html#hist(data:Array[Array[Double]],xbins:Int,ybins:Int):smile.plot.Window", "kind" : "def"}, {"label" : "hist", "tail" : "(data: Array[Array[Double]], k: Int): Window", "member" : "smile.plot.Operators.hist", "link" : "smile\/plot\/Operators.html#hist(data:Array[Array[Double]],k:Int):smile.plot.Window", "kind" : "def"}, {"label" : "hist", "tail" : "(data: Array[Array[Double]]): Window", "member" : "smile.plot.Operators.hist", "link" : "smile\/plot\/Operators.html#hist(data:Array[Array[Double]]):smile.plot.Window", "kind" : "def"}, {"label" : "hist", "tail" : "(data: Array[Double], breaks: Array[Double]): Window", "member" : "smile.plot.Operators.hist", "link" : "smile\/plot\/Operators.html#hist(data:Array[Double],breaks:Array[Double]):smile.plot.Window", "kind" : "def"}, {"label" : "hist", "tail" : "(data: Array[Double], k: Int): Window", "member" : "smile.plot.Operators.hist", "link" : "smile\/plot\/Operators.html#hist(data:Array[Double],k:Int):smile.plot.Window", "kind" : "def"}, {"label" : "hist", "tail" : "(data: Array[Double]): Window", "member" : "smile.plot.Operators.hist", "link" : "smile\/plot\/Operators.html#hist(data:Array[Double]):smile.plot.Window", "kind" : "def"}, {"label" : "hexmap", "tail" : "(labels: Array[Array[String]], z: Array[Array[Double]], palette: Array[Color]): Window", "member" : "smile.plot.Operators.hexmap", "link" : "smile\/plot\/Operators.html#hexmap(labels:Array[Array[String]],z:Array[Array[Double]],palette:Array[java.awt.Color]):smile.plot.Window", "kind" : "def"}, {"label" : "hexmap", "tail" : "(labels: Array[Array[String]], z: Array[Array[Double]]): Window", "member" : "smile.plot.Operators.hexmap", "link" : "smile\/plot\/Operators.html#hexmap(labels:Array[Array[String]],z:Array[Array[Double]]):smile.plot.Window", "kind" : "def"}, {"label" : "hexmap", "tail" : "(z: Array[Array[Double]], palette: Array[Color]): Window", "member" : "smile.plot.Operators.hexmap", "link" : "smile\/plot\/Operators.html#hexmap(z:Array[Array[Double]],palette:Array[java.awt.Color]):smile.plot.Window", "kind" : "def"}, {"label" : "hexmap", "tail" : "(z: Array[Array[Double]]): Window", "member" : "smile.plot.Operators.hexmap", "link" : "smile\/plot\/Operators.html#hexmap(z:Array[Array[Double]]):smile.plot.Window", "kind" : "def"}, {"label" : "spy", "tail" : "(matrix: SparseMatrix): Window", "member" : "smile.plot.Operators.spy", "link" : "smile\/plot\/Operators.html#spy(matrix:smile.math.matrix.SparseMatrix):smile.plot.Window", "kind" : "def"}, {"label" : "heatmap", "tail" : "(rowLabels: Array[String], columnLabels: Array[String], z: Array[Array[Double]], palette: Array[Color]): Window", "member" : "smile.plot.Operators.heatmap", "link" : "smile\/plot\/Operators.html#heatmap(rowLabels:Array[String],columnLabels:Array[String],z:Array[Array[Double]],palette:Array[java.awt.Color]):smile.plot.Window", "kind" : "def"}, {"label" : "heatmap", "tail" : "(rowLabels: Array[String], columnLabels: Array[String], z: Array[Array[Double]]): Window", "member" : "smile.plot.Operators.heatmap", "link" : "smile\/plot\/Operators.html#heatmap(rowLabels:Array[String],columnLabels:Array[String],z:Array[Array[Double]]):smile.plot.Window", "kind" : "def"}, {"label" : "heatmap", "tail" : "(x: Array[Double], y: Array[Double], z: Array[Array[Double]], palette: Array[Color]): Window", "member" : "smile.plot.Operators.heatmap", "link" : "smile\/plot\/Operators.html#heatmap(x:Array[Double],y:Array[Double],z:Array[Array[Double]],palette:Array[java.awt.Color]):smile.plot.Window", "kind" : "def"}, {"label" : "heatmap", "tail" : "(x: Array[Double], y: Array[Double], z: Array[Array[Double]]): Window", "member" : "smile.plot.Operators.heatmap", "link" : "smile\/plot\/Operators.html#heatmap(x:Array[Double],y:Array[Double],z:Array[Array[Double]]):smile.plot.Window", "kind" : "def"}, {"label" : "heatmap", "tail" : "(z: Array[Array[Double]], palette: Array[Color]): Window", "member" : "smile.plot.Operators.heatmap", "link" : "smile\/plot\/Operators.html#heatmap(z:Array[Array[Double]],palette:Array[java.awt.Color]):smile.plot.Window", "kind" : "def"}, {"label" : "heatmap", "tail" : "(z: Array[Array[Double]]): Window", "member" : "smile.plot.Operators.heatmap", "link" : "smile\/plot\/Operators.html#heatmap(z:Array[Array[Double]]):smile.plot.Window", "kind" : "def"}, {"label" : "grid", "tail" : "(data: Array[Array[Array[Double]]]): Window", "member" : "smile.plot.Operators.grid", "link" : "smile\/plot\/Operators.html#grid(data:Array[Array[Array[Double]]]):smile.plot.Window", "kind" : "def"}, {"label" : "wireframe", "tail" : "(vertices: Array[Array[Double]], edges: Array[Array[Int]]): Window", "member" : "smile.plot.Operators.wireframe", "link" : "smile\/plot\/Operators.html#wireframe(vertices:Array[Array[Double]],edges:Array[Array[Int]]):smile.plot.Window", "kind" : "def"}, {"label" : "surface", "tail" : "(x: Array[Double], y: Array[Double], z: Array[Array[Double]], palette: Array[Color]): Window", "member" : "smile.plot.Operators.surface", "link" : "smile\/plot\/Operators.html#surface(x:Array[Double],y:Array[Double],z:Array[Array[Double]],palette:Array[java.awt.Color]):smile.plot.Window", "kind" : "def"}, {"label" : "surface", "tail" : "(x: Array[Double], y: Array[Double], z: Array[Array[Double]]): Window", "member" : "smile.plot.Operators.surface", "link" : "smile\/plot\/Operators.html#surface(x:Array[Double],y:Array[Double],z:Array[Array[Double]]):smile.plot.Window", "kind" : "def"}, {"label" : "surface", "tail" : "(z: Array[Array[Double]], palette: Array[Color]): Window", "member" : "smile.plot.Operators.surface", "link" : "smile\/plot\/Operators.html#surface(z:Array[Array[Double]],palette:Array[java.awt.Color]):smile.plot.Window", "kind" : "def"}, {"label" : "surface", "tail" : "(z: Array[Array[Double]]): Window", "member" : "smile.plot.Operators.surface", "link" : "smile\/plot\/Operators.html#surface(z:Array[Array[Double]]):smile.plot.Window", "kind" : "def"}, {"label" : "contour", "tail" : "(x: Array[Double], y: Array[Double], z: Array[Array[Double]], levels: Array[Double], palette: Array[Color]): Window", "member" : "smile.plot.Operators.contour", "link" : "smile\/plot\/Operators.html#contour(x:Array[Double],y:Array[Double],z:Array[Array[Double]],levels:Array[Double],palette:Array[java.awt.Color]):smile.plot.Window", "kind" : "def"}, {"label" : "contour", "tail" : "(x: Array[Double], y: Array[Double], z: Array[Array[Double]]): Window", "member" : "smile.plot.Operators.contour", "link" : "smile\/plot\/Operators.html#contour(x:Array[Double],y:Array[Double],z:Array[Array[Double]]):smile.plot.Window", "kind" : "def"}, {"label" : "contour", "tail" : "(z: Array[Array[Double]], levels: Array[Double], palette: Array[Color]): Window", "member" : "smile.plot.Operators.contour", "link" : "smile\/plot\/Operators.html#contour(z:Array[Array[Double]],levels:Array[Double],palette:Array[java.awt.Color]):smile.plot.Window", "kind" : "def"}, {"label" : "contour", "tail" : "(z: Array[Array[Double]]): Window", "member" : "smile.plot.Operators.contour", "link" : "smile\/plot\/Operators.html#contour(z:Array[Array[Double]]):smile.plot.Window", "kind" : "def"}, {"label" : "boxplot", "tail" : "(data: Array[Array[Double]], labels: Array[String]): Window", "member" : "smile.plot.Operators.boxplot", "link" : "smile\/plot\/Operators.html#boxplot(data:Array[Array[Double]],labels:Array[String]):smile.plot.Window", "kind" : "def"}, {"label" : "boxplot", "tail" : "(data: Array[Double]*): Window", "member" : "smile.plot.Operators.boxplot", "link" : "smile\/plot\/Operators.html#boxplot(data:Array[Double]*):smile.plot.Window", "kind" : "def"}, {"label" : "staircase", "tail" : "(data: Array[Double]*): Window", "member" : "smile.plot.Operators.staircase", "link" : "smile\/plot\/Operators.html#staircase(data:Array[Double]*):smile.plot.Window", "kind" : "def"}, {"label" : "line", "tail" : "(data: Array[Array[Double]], style: Style, color: Color, legend: Char): Window", "member" : "smile.plot.Operators.line", "link" : "smile\/plot\/Operators.html#line(data:Array[Array[Double]],style:smile.plot.Line.Style,color:java.awt.Color,legend:Char):smile.plot.Window", "kind" : "def"}, {"label" : "plot", "tail" : "(data: AttributeDataset, legend: Array[Char], palette: Array[Color]): JFrame", "member" : "smile.plot.Operators.plot", "link" : "smile\/plot\/Operators.html#plot(data:smile.data.AttributeDataset,legend:Array[Char],palette:Array[java.awt.Color]):javax.swing.JFrame", "kind" : "def"}, {"label" : "plot", "tail" : "(data: AttributeDataset, legend: Char, palette: Array[Color]): JFrame", "member" : "smile.plot.Operators.plot", "link" : "smile\/plot\/Operators.html#plot(data:smile.data.AttributeDataset,legend:Char,palette:Array[java.awt.Color]):javax.swing.JFrame", "kind" : "def"}, {"label" : "plot", "tail" : "(data: AttributeDataset, legend: Char): JFrame", "member" : "smile.plot.Operators.plot", "link" : "smile\/plot\/Operators.html#plot(data:smile.data.AttributeDataset,legend:Char):javax.swing.JFrame", "kind" : "def"}, {"label" : "plot", "tail" : "(data: Array[Array[Double]], label: Array[Int], legend: Array[Char], palette: Array[Color]): Window", "member" : "smile.plot.Operators.plot", "link" : "smile\/plot\/Operators.html#plot(data:Array[Array[Double]],label:Array[Int],legend:Array[Char],palette:Array[java.awt.Color]):smile.plot.Window", "kind" : "def"}, {"label" : "plot", "tail" : "(data: Array[Array[Double]], label: Array[Int], legend: Char, palette: Array[Color]): Window", "member" : "smile.plot.Operators.plot", "link" : "smile\/plot\/Operators.html#plot(data:Array[Array[Double]],label:Array[Int],legend:Char,palette:Array[java.awt.Color]):smile.plot.Window", "kind" : "def"}, {"label" : "plot", "tail" : "(data: Array[Array[Double]], labels: Array[String]): Window", "member" : "smile.plot.Operators.plot", "link" : "smile\/plot\/Operators.html#plot(data:Array[Array[Double]],labels:Array[String]):smile.plot.Window", "kind" : "def"}, {"label" : "plot", "tail" : "(data: Array[Array[Double]], legend: Char, color: Color): Window", "member" : "smile.plot.Operators.plot", "link" : "smile\/plot\/Operators.html#plot(data:Array[Array[Double]],legend:Char,color:java.awt.Color):smile.plot.Window", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/plot\/Operators.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/plot\/Operators.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/plot\/Operators.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/plot\/Operators.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/plot\/Operators.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/plot\/Operators.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/plot\/Operators.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/Operators.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/Operators.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/Operators.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/plot\/Operators.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/plot\/Operators.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/plot\/Operators.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/plot\/Operators.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/plot\/Operators.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/plot\/Operators.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/plot\/Operators.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/plot\/Operators.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/plot\/Operators.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Data visualization operators.", "trait" : "smile\/plot\/Operators.html", "kind" : "trait"}, {"name" : "smile.plot.Window", "shortDescription" : "", "object" : "smile\/plot\/Window$.html", "members_object" : [{"label" : "frame", "tail" : "(title: String): JFrame", "member" : "smile.plot.Window.frame", "link" : "smile\/plot\/Window$.html#frame(title:String):javax.swing.JFrame", "kind" : "def"}, {"label" : "apply", "tail" : "(canvas: PlotCanvas, title: String): Window", "member" : "smile.plot.Window.apply", "link" : "smile\/plot\/Window$.html#apply(canvas:smile.plot.PlotCanvas,title:String):smile.plot.Window", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/plot\/Window$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/plot\/Window$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/plot\/Window$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/plot\/Window$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/plot\/Window$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/plot\/Window$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/plot\/Window$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/Window$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/Window$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/Window$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/plot\/Window$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/plot\/Window$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/plot\/Window$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/plot\/Window$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/plot\/Window$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/plot\/Window$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/plot\/Window$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/plot\/Window$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/plot\/Window$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "smile\/plot\/Window.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/plot\/Window.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Window) ⇒ Boolean, msg: ⇒ Any): Window", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/plot\/Window.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Window) ⇒ Boolean): Window", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/plot\/Window.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Window", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/plot\/Window.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Window", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/plot\/Window.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Window, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/plot\/Window.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Window, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/plot\/Window.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "close", "tail" : "(): Unit", "member" : "smile.plot.Window.close", "link" : "smile\/plot\/Window.html#close:Unit", "kind" : "def"}, {"member" : "smile.plot.Window#<init>", "error" : "unsupported entity"}, {"label" : "canvas", "tail" : ": PlotCanvas", "member" : "smile.plot.Window.canvas", "link" : "smile\/plot\/Window.html#canvas:smile.plot.PlotCanvas", "kind" : "val"}, {"label" : "frame", "tail" : ": JFrame", "member" : "smile.plot.Window.frame", "link" : "smile\/plot\/Window.html#frame:javax.swing.JFrame", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/plot\/Window.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/plot\/Window.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/plot\/Window.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/plot\/Window.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/plot\/Window.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/plot\/Window.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/plot\/Window.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/Window.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/Window.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/Window.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/plot\/Window.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/plot\/Window.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/plot\/Window.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/plot\/Window.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/plot\/Window.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/plot\/Window.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/plot\/Window.html", "kind" : "case class"}], "smile.data" : [{"name" : "smile.data.DataFrame", "shortDescription" : "Immutable data frame.", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "smile\/data\/DataFrame.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/data\/DataFrame.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (DataFrame) ⇒ Boolean, msg: ⇒ Any): DataFrame", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/data\/DataFrame.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (DataFrame) ⇒ Boolean): DataFrame", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/data\/DataFrame.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): DataFrame", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/data\/DataFrame.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): DataFrame", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/data\/DataFrame.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (DataFrame, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/data\/DataFrame.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (DataFrame, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/data\/DataFrame.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "unzipDouble", "tail" : "(): (Array[Array[Double]], Array[Double])", "member" : "smile.data.DataFrame.unzipDouble", "link" : "smile\/data\/DataFrame.html#unzipDouble:(Array[Array[Double]],Array[Double])", "kind" : "def"}, {"label" : "unzipInt", "tail" : "(): (Array[Array[Double]], Array[Int])", "member" : "smile.data.DataFrame.unzipInt", "link" : "smile\/data\/DataFrame.html#unzipInt:(Array[Array[Double]],Array[Int])", "kind" : "def"}, {"label" : "unzip", "tail" : "(): Array[Array[Double]]", "member" : "smile.data.DataFrame.unzip", "link" : "smile\/data\/DataFrame.html#unzip:Array[Array[Double]]", "kind" : "def"}, {"label" : "selectDynamic", "tail" : "(col: String): AttributeVector", "member" : "smile.data.DataFrame.selectDynamic", "link" : "smile\/data\/DataFrame.html#selectDynamic(col:String):smile.data.AttributeVector", "kind" : "def"}, {"label" : "applyDynamic", "tail" : "(col: String): AttributeVector", "member" : "smile.data.DataFrame.applyDynamic", "link" : "smile\/data\/DataFrame.html#applyDynamic(col:String):smile.data.AttributeVector", "kind" : "def"}, {"label" : "remove", "tail" : "(cols: String*): DataFrame", "member" : "smile.data.DataFrame.remove", "link" : "smile\/data\/DataFrame.html#remove(cols:String*):smile.data.DataFrame", "kind" : "def"}, {"label" : "apply", "tail" : "(cols: String*): DataFrame", "member" : "smile.data.DataFrame.apply", "link" : "smile\/data\/DataFrame.html#apply(cols:String*):smile.data.DataFrame", "kind" : "def"}, {"label" : "apply", "tail" : "(col: String): AttributeVector", "member" : "smile.data.DataFrame.apply", "link" : "smile\/data\/DataFrame.html#apply(col:String):smile.data.AttributeVector", "kind" : "def"}, {"label" : "apply", "tail" : "(from: Int, to: Int): DataFrame", "member" : "smile.data.DataFrame.apply", "link" : "smile\/data\/DataFrame.html#apply(from:Int,to:Int):smile.data.DataFrame", "kind" : "def"}, {"label" : "apply", "tail" : "(row: Int): Datum[Array[Double]]", "member" : "smile.data.DataFrame.apply", "link" : "smile\/data\/DataFrame.html#apply(row:Int):smile.data.Datum[Array[Double]]", "kind" : "def"}, {"label" : "names", "tail" : "(): Array[String]", "member" : "smile.data.DataFrame.names", "link" : "smile\/data\/DataFrame.html#names:Array[String]", "kind" : "def"}, {"label" : "colnames", "tail" : ": Array[String]", "member" : "smile.data.DataFrame.colnames", "link" : "smile\/data\/DataFrame.html#colnames:Array[String]", "kind" : "val"}, {"label" : "rownames", "tail" : ": Array[String]", "member" : "smile.data.DataFrame.rownames", "link" : "smile\/data\/DataFrame.html#rownames:Array[String]", "kind" : "val"}, {"label" : "groupBy", "tail" : "(c1: String, c2: String, c3: String): Map[(Double, Double, Double), DataFrame]", "member" : "smile.data.DataFrame.groupBy", "link" : "smile\/data\/DataFrame.html#groupBy(c1:String,c2:String,c3:String):scala.collection.immutable.Map[(Double,Double,Double),smile.data.DataFrame]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(c1: String, c2: String): Map[(Double, Double), DataFrame]", "member" : "smile.data.DataFrame.groupBy", "link" : "smile\/data\/DataFrame.html#groupBy(c1:String,c2:String):scala.collection.immutable.Map[(Double,Double),smile.data.DataFrame]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(col: String): Map[Double, DataFrame]", "member" : "smile.data.DataFrame.groupBy", "link" : "smile\/data\/DataFrame.html#groupBy(col:String):scala.collection.immutable.Map[Double,smile.data.DataFrame]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (Row) ⇒ K): Map[K, DataFrame]", "member" : "smile.data.DataFrame.groupBy", "link" : "smile\/data\/DataFrame.html#groupBy[K](f:DataFrame.this.Row=>K):scala.collection.immutable.Map[K,smile.data.DataFrame]", "kind" : "def"}, {"label" : "partition", "tail" : "(p: (Row) ⇒ Boolean): (DataFrame, DataFrame)", "member" : "smile.data.DataFrame.partition", "link" : "smile\/data\/DataFrame.html#partition(p:DataFrame.this.Row=>Boolean):(smile.data.DataFrame,smile.data.DataFrame)", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (Row) ⇒ Boolean): DataFrame", "member" : "smile.data.DataFrame.filter", "link" : "smile\/data\/DataFrame.html#filter(p:DataFrame.this.Row=>Boolean):smile.data.DataFrame", "kind" : "def"}, {"label" : "map", "tail" : "(attributes: Array[Attribute], response: Attribute)(p: (Row) ⇒ (Array[Double], Double)): DataFrame", "member" : "smile.data.DataFrame.map", "link" : "smile\/data\/DataFrame.html#map(attributes:Array[smile.data.Attribute],response:smile.data.Attribute)(p:DataFrame.this.Row=>(Array[Double],Double)):smile.data.DataFrame", "kind" : "def"}, {"label" : "map", "tail" : "(attributes: Array[Attribute])(p: (Row) ⇒ Array[Double]): DataFrame", "member" : "smile.data.DataFrame.map", "link" : "smile\/data\/DataFrame.html#map(attributes:Array[smile.data.Attribute])(p:DataFrame.this.Row=>Array[Double]):smile.data.DataFrame", "kind" : "def"}, {"label" : "map", "tail" : "(p: (Row) ⇒ U): Traversable[U]", "member" : "smile.data.DataFrame.map", "link" : "smile\/data\/DataFrame.html#map[U](p:DataFrame.this.Row=>U):Traversable[U]", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "smile.data.DataFrame.isEmpty", "link" : "smile\/data\/DataFrame.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "foreach", "tail" : "(p: (Row) ⇒ U): Unit", "member" : "smile.data.DataFrame.foreach", "link" : "smile\/data\/DataFrame.html#foreach[U](p:DataFrame.this.Row=>U):Unit", "kind" : "def"}, {"label" : "forall", "tail" : "(p: (Row) ⇒ Boolean): Boolean", "member" : "smile.data.DataFrame.forall", "link" : "smile\/data\/DataFrame.html#forall(p:DataFrame.this.Row=>Boolean):Boolean", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (Row) ⇒ Boolean): Boolean", "member" : "smile.data.DataFrame.exists", "link" : "smile\/data\/DataFrame.html#exists(p:DataFrame.this.Row=>Boolean):Boolean", "kind" : "def"}, {"label" : "find", "tail" : "(p: (Row) ⇒ Boolean): Option[Row]", "member" : "smile.data.DataFrame.find", "link" : "smile\/data\/DataFrame.html#find(p:DataFrame.this.Row=>Boolean):Option[DataFrame.this.Row]", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "smile.data.DataFrame.size", "link" : "smile\/data\/DataFrame.html#size:Int", "kind" : "def"}, {"label" : "responseAttribute", "tail" : "(): Attribute", "member" : "smile.data.DataFrame.responseAttribute", "link" : "smile\/data\/DataFrame.html#responseAttribute:smile.data.Attribute", "kind" : "def"}, {"label" : "response", "tail" : "(): AttributeVector", "member" : "smile.data.DataFrame.response", "link" : "smile\/data\/DataFrame.html#response:smile.data.AttributeVector", "kind" : "def"}, {"label" : "attributes", "tail" : "(): Array[Attribute]", "member" : "smile.data.DataFrame.attributes", "link" : "smile\/data\/DataFrame.html#attributes:Array[smile.data.Attribute]", "kind" : "def"}, {"label" : "rows", "tail" : ": Buffer[Row]", "member" : "smile.data.DataFrame.rows", "link" : "smile\/data\/DataFrame.html#rows:scala.collection.mutable.Buffer[DataFrame.this.Row]", "kind" : "lazy val"}, {"label" : "Row", "tail" : "", "member" : "smile.data.DataFrame.Row", "link" : "smile\/data\/DataFrame.html#Row=DataFrame.this.data.Row", "kind" : "type"}, {"member" : "smile.data.DataFrame#<init>", "error" : "unsupported entity"}, {"label" : "data", "tail" : ": AttributeDataset", "member" : "smile.data.DataFrame.data", "link" : "smile\/data\/DataFrame.html#data:smile.data.AttributeDataset", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/data\/DataFrame.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/data\/DataFrame.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/data\/DataFrame.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/data\/DataFrame.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/data\/DataFrame.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/data\/DataFrame.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/data\/DataFrame.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/data\/DataFrame.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/data\/DataFrame.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/data\/DataFrame.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/data\/DataFrame.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/data\/DataFrame.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/data\/DataFrame.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/data\/DataFrame.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/data\/DataFrame.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/data\/DataFrame.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/data\/DataFrame.html", "kind" : "case class"}], "smile.feature" : [{"name" : "smile.feature.Operators", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "smile\/feature\/Operators.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/feature\/Operators.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Operators) ⇒ Boolean, msg: ⇒ Any): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/feature\/Operators.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Operators) ⇒ Boolean): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/feature\/Operators.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/feature\/Operators.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/feature\/Operators.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Operators, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/feature\/Operators.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Operators, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/feature\/Operators.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "sumSquaresRatio", "tail" : "(x: Array[Array[Double]], y: Array[Int]): Array[Double]", "member" : "smile.feature.Operators.sumSquaresRatio", "link" : "smile\/feature\/Operators.html#sumSquaresRatio(x:Array[Array[Double]],y:Array[Int]):Array[Double]", "kind" : "def"}, {"label" : "signalNoiseRatio", "tail" : "(x: Array[Array[Double]], y: Array[Int]): Array[Double]", "member" : "smile.feature.Operators.signalNoiseRatio", "link" : "smile\/feature\/Operators.html#signalNoiseRatio(x:Array[Array[Double]],y:Array[Int]):Array[Double]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/feature\/Operators.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/feature\/Operators.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/feature\/Operators.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/feature\/Operators.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/feature\/Operators.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/feature\/Operators.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/feature\/Operators.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/feature\/Operators.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/feature\/Operators.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/feature\/Operators.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/feature\/Operators.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/feature\/Operators.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/feature\/Operators.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/feature\/Operators.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/feature\/Operators.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/feature\/Operators.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/feature\/Operators.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/feature\/Operators.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/feature\/Operators.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "High level feature selection operators.", "trait" : "smile\/feature\/Operators.html", "kind" : "trait"}], "smile.sequence" : [{"name" : "smile.sequence.Operators", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "smile\/sequence\/Operators.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/sequence\/Operators.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Operators) ⇒ Boolean, msg: ⇒ Any): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/sequence\/Operators.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Operators) ⇒ Boolean): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/sequence\/Operators.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/sequence\/Operators.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/sequence\/Operators.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Operators, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/sequence\/Operators.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Operators, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/sequence\/Operators.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "crf", "tail" : "(sequences: Array[Array[Array[Double]]], labels: Array[Array[Int]], attributes: Array[Attribute], k: Int, eta: Double, ntrees: Int, maxNodes: Int): CRF", "member" : "smile.sequence.Operators.crf", "link" : "smile\/sequence\/Operators.html#crf(sequences:Array[Array[Array[Double]]],labels:Array[Array[Int]],attributes:Array[smile.data.Attribute],k:Int,eta:Double,ntrees:Int,maxNodes:Int):smile.sequence.CRF", "kind" : "def"}, {"label" : "hmm", "tail" : "(observations: Array[Array[T]], labels: Array[Array[Int]]): HMM[T]", "member" : "smile.sequence.Operators.hmm", "link" : "smile\/sequence\/Operators.html#hmm[T<:Object](observations:Array[Array[T]],labels:Array[Array[Int]]):smile.sequence.HMM[T]", "kind" : "def"}, {"label" : "hmm", "tail" : "(observations: Array[Array[Int]], labels: Array[Array[Int]]): HMM[Int]", "member" : "smile.sequence.Operators.hmm", "link" : "smile\/sequence\/Operators.html#hmm(observations:Array[Array[Int]],labels:Array[Array[Int]]):smile.sequence.HMM[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/sequence\/Operators.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/sequence\/Operators.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/sequence\/Operators.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/sequence\/Operators.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/sequence\/Operators.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/sequence\/Operators.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/sequence\/Operators.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/sequence\/Operators.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/sequence\/Operators.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/sequence\/Operators.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/sequence\/Operators.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/sequence\/Operators.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/sequence\/Operators.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/sequence\/Operators.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/sequence\/Operators.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/sequence\/Operators.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/sequence\/Operators.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/sequence\/Operators.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/sequence\/Operators.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "High level sequence annotation operators.", "trait" : "smile\/sequence\/Operators.html", "kind" : "trait"}], "smile.imputation" : [{"name" : "smile.imputation.Operators", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "smile\/imputation\/Operators.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/imputation\/Operators.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Operators) ⇒ Boolean, msg: ⇒ Any): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/imputation\/Operators.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Operators) ⇒ Boolean): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/imputation\/Operators.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/imputation\/Operators.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/imputation\/Operators.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Operators, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/imputation\/Operators.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Operators, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/imputation\/Operators.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "svdimpute", "tail" : "(data: Array[Array[Double]], k: Int, maxIter: Int): Unit", "member" : "smile.imputation.Operators.svdimpute", "link" : "smile\/imputation\/Operators.html#svdimpute(data:Array[Array[Double]],k:Int,maxIter:Int):Unit", "kind" : "def"}, {"label" : "llsimpute", "tail" : "(data: Array[Array[Double]], k: Int): Unit", "member" : "smile.imputation.Operators.llsimpute", "link" : "smile\/imputation\/Operators.html#llsimpute(data:Array[Array[Double]],k:Int):Unit", "kind" : "def"}, {"label" : "impute", "tail" : "(data: Array[Array[Double]], k: Int, runs: Int): Unit", "member" : "smile.imputation.Operators.impute", "link" : "smile\/imputation\/Operators.html#impute(data:Array[Array[Double]],k:Int,runs:Int):Unit", "kind" : "def"}, {"label" : "knnimpute", "tail" : "(data: Array[Array[Double]], k: Int): Unit", "member" : "smile.imputation.Operators.knnimpute", "link" : "smile\/imputation\/Operators.html#knnimpute(data:Array[Array[Double]],k:Int):Unit", "kind" : "def"}, {"label" : "avgimpute", "tail" : "(data: Array[Array[Double]]): Unit", "member" : "smile.imputation.Operators.avgimpute", "link" : "smile\/imputation\/Operators.html#avgimpute(data:Array[Array[Double]]):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/imputation\/Operators.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/imputation\/Operators.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/imputation\/Operators.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/imputation\/Operators.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/imputation\/Operators.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/imputation\/Operators.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/imputation\/Operators.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/imputation\/Operators.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/imputation\/Operators.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/imputation\/Operators.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/imputation\/Operators.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/imputation\/Operators.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/imputation\/Operators.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/imputation\/Operators.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/imputation\/Operators.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/imputation\/Operators.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/imputation\/Operators.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/imputation\/Operators.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/imputation\/Operators.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "High level missing value imputation operators.", "trait" : "smile\/imputation\/Operators.html", "kind" : "trait"}], "smile.validation" : [{"name" : "smile.validation.MutualInformationScore", "shortDescription" : "Mutual Information score between two clusterings with optional normalization.", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "smile\/validation\/MutualInformationScore.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/validation\/MutualInformationScore.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MutualInformationScore) ⇒ Boolean, msg: ⇒ Any): MutualInformationScore", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/validation\/MutualInformationScore.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MutualInformationScore) ⇒ Boolean): MutualInformationScore", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/validation\/MutualInformationScore.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): MutualInformationScore", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/validation\/MutualInformationScore.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): MutualInformationScore", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/validation\/MutualInformationScore.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (MutualInformationScore, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/validation\/MutualInformationScore.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (MutualInformationScore, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/validation\/MutualInformationScore.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "measure", "tail" : "(x: Array[Int], y: Array[Int]): Double", "member" : "smile.validation.MutualInformationScore.measure", "link" : "smile\/validation\/MutualInformationScore.html#measure(x:Array[Int],y:Array[Int]):Double", "kind" : "def"}, {"member" : "smile.validation.MutualInformationScore#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/validation\/MutualInformationScore.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/validation\/MutualInformationScore.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/validation\/MutualInformationScore.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/validation\/MutualInformationScore.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/validation\/MutualInformationScore.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/validation\/MutualInformationScore.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/validation\/MutualInformationScore.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/validation\/MutualInformationScore.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/validation\/MutualInformationScore.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/validation\/MutualInformationScore.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/validation\/MutualInformationScore.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/validation\/MutualInformationScore.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/validation\/MutualInformationScore.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/validation\/MutualInformationScore.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/validation\/MutualInformationScore.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/validation\/MutualInformationScore.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/validation\/MutualInformationScore.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/validation\/MutualInformationScore.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/validation\/MutualInformationScore.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "smile\/validation\/MutualInformationScore.html", "kind" : "class"}, {"name" : "smile.validation.Operators", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "smile\/validation\/Operators.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/validation\/Operators.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Operators) ⇒ Boolean, msg: ⇒ Any): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/validation\/Operators.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Operators) ⇒ Boolean): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/validation\/Operators.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/validation\/Operators.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/validation\/Operators.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Operators, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/validation\/Operators.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Operators, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/validation\/Operators.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "bootstrap", "tail" : "(x: Array[T], y: Array[Double], k: Int, measures: RegressionMeasure*)(trainer: ⇒ (Array[T], Array[Double]) ⇒ Regression[T]): Array[Double]", "member" : "smile.validation.Operators.bootstrap", "link" : "smile\/validation\/Operators.html#bootstrap[T<:Object](x:Array[T],y:Array[Double],k:Int,measures:smile.validation.RegressionMeasure*)(trainer:=>(Array[T],Array[Double])=>smile.regression.Regression[T]):Array[Double]", "kind" : "def"}, {"label" : "bootstrap", "tail" : "(x: Array[T], y: Array[Int], k: Int, measures: ClassificationMeasure*)(trainer: ⇒ (Array[T], Array[Int]) ⇒ Classifier[T]): Array[Double]", "member" : "smile.validation.Operators.bootstrap", "link" : "smile\/validation\/Operators.html#bootstrap[T<:Object](x:Array[T],y:Array[Int],k:Int,measures:smile.validation.ClassificationMeasure*)(trainer:=>(Array[T],Array[Int])=>smile.classification.Classifier[T]):Array[Double]", "kind" : "def"}, {"label" : "cv", "tail" : "(x: Array[T], y: Array[Double], k: Int, measures: RegressionMeasure*)(trainer: ⇒ (Array[T], Array[Double]) ⇒ Regression[T]): Array[Double]", "member" : "smile.validation.Operators.cv", "link" : "smile\/validation\/Operators.html#cv[T<:Object](x:Array[T],y:Array[Double],k:Int,measures:smile.validation.RegressionMeasure*)(trainer:=>(Array[T],Array[Double])=>smile.regression.Regression[T]):Array[Double]", "kind" : "def"}, {"label" : "cv", "tail" : "(x: Array[T], y: Array[Double], split: CrossValidation, measures: RegressionMeasure*)(trainer: ⇒ (Array[T], Array[Double]) ⇒ Regression[T]): Array[Double]", "member" : "smile.validation.Operators.cv", "link" : "smile\/validation\/Operators.html#cv[T<:Object](x:Array[T],y:Array[Double],split:smile.validation.CrossValidation,measures:smile.validation.RegressionMeasure*)(trainer:=>(Array[T],Array[Double])=>smile.regression.Regression[T]):Array[Double]", "kind" : "def"}, {"label" : "cv", "tail" : "(x: Array[T], y: Array[Int], split: CrossValidation, measures: ClassificationMeasure*)(trainer: ⇒ (Array[T], Array[Int]) ⇒ Classifier[T]): Array[Double]", "member" : "smile.validation.Operators.cv", "link" : "smile\/validation\/Operators.html#cv[T<:Object](x:Array[T],y:Array[Int],split:smile.validation.CrossValidation,measures:smile.validation.ClassificationMeasure*)(trainer:=>(Array[T],Array[Int])=>smile.classification.Classifier[T]):Array[Double]", "kind" : "def"}, {"label" : "cv", "tail" : "(x: Array[T], y: Array[Int], k: Int, measures: ClassificationMeasure*)(trainer: ⇒ (Array[T], Array[Int]) ⇒ Classifier[T]): Array[Double]", "member" : "smile.validation.Operators.cv", "link" : "smile\/validation\/Operators.html#cv[T<:Object](x:Array[T],y:Array[Int],k:Int,measures:smile.validation.ClassificationMeasure*)(trainer:=>(Array[T],Array[Int])=>smile.classification.Classifier[T]):Array[Double]", "kind" : "def"}, {"label" : "loocv", "tail" : "(x: Array[T], y: Array[Double], measures: RegressionMeasure*)(trainer: ⇒ (Array[T], Array[Double]) ⇒ Regression[T]): Array[Double]", "member" : "smile.validation.Operators.loocv", "link" : "smile\/validation\/Operators.html#loocv[T<:Object](x:Array[T],y:Array[Double],measures:smile.validation.RegressionMeasure*)(trainer:=>(Array[T],Array[Double])=>smile.regression.Regression[T]):Array[Double]", "kind" : "def"}, {"label" : "loocv", "tail" : "(x: Array[T], y: Array[Int], measures: ClassificationMeasure*)(trainer: ⇒ (Array[T], Array[Int]) ⇒ Classifier[T]): Array[Double]", "member" : "smile.validation.Operators.loocv", "link" : "smile\/validation\/Operators.html#loocv[T<:Object](x:Array[T],y:Array[Int],measures:smile.validation.ClassificationMeasure*)(trainer:=>(Array[T],Array[Int])=>smile.classification.Classifier[T]):Array[Double]", "kind" : "def"}, {"label" : "test2soft", "tail" : "(x: Array[T], y: Array[Int], testx: Array[T], testy: Array[Int], parTest: Boolean)(trainer: ⇒ (Array[T], Array[Int]) ⇒ C): C", "member" : "smile.validation.Operators.test2soft", "link" : "smile\/validation\/Operators.html#test2soft[T,C<:smile.classification.SoftClassifier[T]](x:Array[T],y:Array[Int],testx:Array[T],testy:Array[Int],parTest:Boolean)(trainer:=>(Array[T],Array[Int])=>C):C", "kind" : "def"}, {"label" : "test2", "tail" : "(x: Array[T], y: Array[Int], testx: Array[T], testy: Array[Int], parTest: Boolean)(trainer: ⇒ (Array[T], Array[Int]) ⇒ C): C", "member" : "smile.validation.Operators.test2", "link" : "smile\/validation\/Operators.html#test2[T,C<:smile.classification.Classifier[T]](x:Array[T],y:Array[Int],testx:Array[T],testy:Array[Int],parTest:Boolean)(trainer:=>(Array[T],Array[Int])=>C):C", "kind" : "def"}, {"label" : "test", "tail" : "(x: Array[T], y: Array[Int], testx: Array[T], testy: Array[Int], parTest: Boolean)(trainer: ⇒ (Array[T], Array[Int]) ⇒ C): C", "member" : "smile.validation.Operators.test", "link" : "smile\/validation\/Operators.html#test[T,C<:smile.classification.Classifier[T]](x:Array[T],y:Array[Int],testx:Array[T],testy:Array[Int],parTest:Boolean)(trainer:=>(Array[T],Array[Int])=>C):C", "kind" : "def"}, {"label" : "mutualInformationScore", "tail" : "(truth: Array[Int], prediction: Array[Int]): Double", "member" : "smile.validation.Operators.mutualInformationScore", "link" : "smile\/validation\/Operators.html#mutualInformationScore(truth:Array[Int],prediction:Array[Int]):Double", "kind" : "def"}, {"label" : "adjustedRandIndex", "tail" : "(truth: Array[Int], prediction: Array[Int]): Double", "member" : "smile.validation.Operators.adjustedRandIndex", "link" : "smile\/validation\/Operators.html#adjustedRandIndex(truth:Array[Int],prediction:Array[Int]):Double", "kind" : "def"}, {"label" : "randIndex", "tail" : "(truth: Array[Int], prediction: Array[Int]): Double", "member" : "smile.validation.Operators.randIndex", "link" : "smile\/validation\/Operators.html#randIndex(truth:Array[Int],prediction:Array[Int]):Double", "kind" : "def"}, {"label" : "mad", "tail" : "(truth: Array[Double], prediction: Array[Double]): Double", "member" : "smile.validation.Operators.mad", "link" : "smile\/validation\/Operators.html#mad(truth:Array[Double],prediction:Array[Double]):Double", "kind" : "def"}, {"label" : "rss", "tail" : "(truth: Array[Double], prediction: Array[Double]): Double", "member" : "smile.validation.Operators.rss", "link" : "smile\/validation\/Operators.html#rss(truth:Array[Double],prediction:Array[Double]):Double", "kind" : "def"}, {"label" : "rmse", "tail" : "(truth: Array[Double], prediction: Array[Double]): Double", "member" : "smile.validation.Operators.rmse", "link" : "smile\/validation\/Operators.html#rmse(truth:Array[Double],prediction:Array[Double]):Double", "kind" : "def"}, {"label" : "mse", "tail" : "(truth: Array[Double], prediction: Array[Double]): Double", "member" : "smile.validation.Operators.mse", "link" : "smile\/validation\/Operators.html#mse(truth:Array[Double],prediction:Array[Double]):Double", "kind" : "def"}, {"label" : "mcc", "tail" : "(truth: Array[Int], prediction: Array[Int]): Double", "member" : "smile.validation.Operators.mcc", "link" : "smile\/validation\/Operators.html#mcc(truth:Array[Int],prediction:Array[Int]):Double", "kind" : "def"}, {"label" : "auc", "tail" : "(truth: Array[Int], probability: Array[Double]): Double", "member" : "smile.validation.Operators.auc", "link" : "smile\/validation\/Operators.html#auc(truth:Array[Int],probability:Array[Double]):Double", "kind" : "def"}, {"label" : "f1", "tail" : "(truth: Array[Int], prediction: Array[Int]): Double", "member" : "smile.validation.Operators.f1", "link" : "smile\/validation\/Operators.html#f1(truth:Array[Int],prediction:Array[Int]):Double", "kind" : "def"}, {"label" : "fdr", "tail" : "(truth: Array[Int], prediction: Array[Int]): Double", "member" : "smile.validation.Operators.fdr", "link" : "smile\/validation\/Operators.html#fdr(truth:Array[Int],prediction:Array[Int]):Double", "kind" : "def"}, {"label" : "fallout", "tail" : "(truth: Array[Int], prediction: Array[Int]): Double", "member" : "smile.validation.Operators.fallout", "link" : "smile\/validation\/Operators.html#fallout(truth:Array[Int],prediction:Array[Int]):Double", "kind" : "def"}, {"label" : "specificity", "tail" : "(truth: Array[Int], prediction: Array[Int]): Double", "member" : "smile.validation.Operators.specificity", "link" : "smile\/validation\/Operators.html#specificity(truth:Array[Int],prediction:Array[Int]):Double", "kind" : "def"}, {"label" : "sensitivity", "tail" : "(truth: Array[Int], prediction: Array[Int]): Double", "member" : "smile.validation.Operators.sensitivity", "link" : "smile\/validation\/Operators.html#sensitivity(truth:Array[Int],prediction:Array[Int]):Double", "kind" : "def"}, {"label" : "precision", "tail" : "(truth: Array[Int], prediction: Array[Int]): Double", "member" : "smile.validation.Operators.precision", "link" : "smile\/validation\/Operators.html#precision(truth:Array[Int],prediction:Array[Int]):Double", "kind" : "def"}, {"label" : "recall", "tail" : "(truth: Array[Int], prediction: Array[Int]): Double", "member" : "smile.validation.Operators.recall", "link" : "smile\/validation\/Operators.html#recall(truth:Array[Int],prediction:Array[Int]):Double", "kind" : "def"}, {"label" : "accuracy", "tail" : "(truth: Array[Int], prediction: Array[Int]): Double", "member" : "smile.validation.Operators.accuracy", "link" : "smile\/validation\/Operators.html#accuracy(truth:Array[Int],prediction:Array[Int]):Double", "kind" : "def"}, {"label" : "confusion", "tail" : "(truth: Array[Int], prediction: Array[Int]): ConfusionMatrix", "member" : "smile.validation.Operators.confusion", "link" : "smile\/validation\/Operators.html#confusion(truth:Array[Int],prediction:Array[Int]):smile.validation.ConfusionMatrix", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/validation\/Operators.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/validation\/Operators.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/validation\/Operators.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/validation\/Operators.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/validation\/Operators.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/validation\/Operators.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/validation\/Operators.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/validation\/Operators.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/validation\/Operators.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/validation\/Operators.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/validation\/Operators.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/validation\/Operators.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/validation\/Operators.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/validation\/Operators.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/validation\/Operators.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/validation\/Operators.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/validation\/Operators.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/validation\/Operators.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/validation\/Operators.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Model validation.", "trait" : "smile\/validation\/Operators.html", "kind" : "trait"}], "smile.math" : [{"name" : "smile.math.AbsMatrix", "shortDescription" : "", "members_case class" : [{"label" : "array", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.Operators.matrixExpression2Array.array", "link" : "smile\/math\/AbsMatrix.html#array():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.sum", "link" : "smile\/math\/AbsMatrix.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/AbsMatrix.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/AbsMatrix.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/AbsMatrix.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/AbsMatrix.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/AbsMatrix.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/AbsMatrix.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/AbsMatrix.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/AbsMatrix.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/AbsMatrix.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/AbsMatrix.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/AbsMatrix.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/AbsMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/AbsMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/AbsMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/AbsMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/AbsMatrix.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/AbsMatrix.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colMeans", "link" : "smile\/math\/AbsMatrix.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colSums", "link" : "smile\/math\/AbsMatrix.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowMeans", "link" : "smile\/math\/AbsMatrix.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowSums", "link" : "smile\/math\/AbsMatrix.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.Operators.matrixExpression2Array.xax", "link" : "smile\/math\/AbsMatrix.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normFro", "link" : "smile\/math\/AbsMatrix.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normInf", "link" : "smile\/math\/AbsMatrix.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm", "link" : "smile\/math\/AbsMatrix.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm2", "link" : "smile\/math\/AbsMatrix.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm1", "link" : "smile\/math\/AbsMatrix.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/AbsMatrix.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/AbsMatrix.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/AbsMatrix.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/AbsMatrix.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/AbsMatrix.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/AbsMatrix.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/AbsMatrix.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/AbsMatrix.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.update", "link" : "smile\/math\/AbsMatrix.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/AbsMatrix.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/AbsMatrix.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/AbsMatrix.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/AbsMatrix.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.trace", "link" : "smile\/math\/AbsMatrix.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.diag", "link" : "smile\/math\/AbsMatrix.html#diag():Array[Double]", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.Operators.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/AbsMatrix.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.Operators.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/AbsMatrix.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/AbsMatrix.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/AbsMatrix.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/AbsMatrix.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/AbsMatrix.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.aat", "link" : "smile\/math\/AbsMatrix.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.ata", "link" : "smile\/math\/AbsMatrix.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "copy", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.copy", "link" : "smile\/math\/AbsMatrix.html#copy():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.transpose", "link" : "smile\/math\/AbsMatrix.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/AbsMatrix.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/AbsMatrix.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/AbsMatrix.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/AbsMatrix.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/AbsMatrix.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/AbsMatrix.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.set", "link" : "smile\/math\/AbsMatrix.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.Operators.matrixExpression2Array.ld", "link" : "smile\/math\/AbsMatrix.html#ld():Int", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.data", "link" : "smile\/math\/AbsMatrix.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.atbmm", "link" : "smile\/math\/AbsMatrix.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abtmm", "link" : "smile\/math\/AbsMatrix.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abmm", "link" : "smile\/math\/AbsMatrix.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/AbsMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/AbsMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atx", "link" : "smile\/math\/AbsMatrix.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/AbsMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/AbsMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.ax", "link" : "smile\/math\/AbsMatrix.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.Operators.matrixExpression2Array.get", "link" : "smile\/math\/AbsMatrix.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/AbsMatrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AbsMatrix) ⇒ Boolean, msg: ⇒ Any): AbsMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AbsMatrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AbsMatrix) ⇒ Boolean): AbsMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AbsMatrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): AbsMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AbsMatrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): AbsMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AbsMatrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (AbsMatrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/AbsMatrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (AbsMatrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/AbsMatrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.AbsMatrix.toMatrix", "link" : "smile\/math\/AbsMatrix.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.AbsMatrix.apply", "link" : "smile\/math\/AbsMatrix.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.AbsMatrix.ncols", "link" : "smile\/math\/AbsMatrix.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.AbsMatrix.nrows", "link" : "smile\/math\/AbsMatrix.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.AbsMatrix#<init>", "error" : "unsupported entity"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.AbsMatrix.A", "link" : "smile\/math\/AbsMatrix.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/AbsMatrix.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/AbsMatrix.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/AbsMatrix.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/AbsMatrix.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/AbsMatrix.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/AbsMatrix.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/AbsMatrix.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/AbsMatrix.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/AbsMatrix.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/AbsMatrix.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/AbsMatrix.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/AbsMatrix.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/AbsMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/AbsMatrix.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/AbsMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/AbsMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/AbsMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/AbsMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/AbsMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/AbsMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/AbsMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/AbsMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/AbsMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/AbsMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/AbsMatrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/AbsMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/AbsMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/AbsMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/AbsMatrix.html", "kind" : "case class"}, {"name" : "smile.math.AbsVector", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.Operators.vectorExpression2Array.update", "link" : "smile\/math\/AbsVector.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/AbsVector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AbsVector) ⇒ Boolean, msg: ⇒ Any): AbsVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AbsVector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AbsVector) ⇒ Boolean): AbsVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AbsVector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): AbsVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AbsVector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): AbsVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AbsVector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (AbsVector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/AbsVector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (AbsVector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/AbsVector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.AbsVector.toArray", "link" : "smile\/math\/AbsVector.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.AbsVector.apply", "link" : "smile\/math\/AbsVector.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.AbsVector.length", "link" : "smile\/math\/AbsVector.html#length:Int", "kind" : "def"}, {"member" : "smile.math.AbsVector#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.AbsVector.x", "link" : "smile\/math\/AbsVector.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/AbsVector.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/AbsVector.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/AbsVector.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/AbsVector.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/AbsVector.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/AbsVector.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/AbsVector.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/AbsVector.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/AbsVector.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/AbsVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/AbsVector.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/AbsVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/AbsVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/AbsVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/AbsVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/AbsVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/AbsVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/AbsVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/AbsVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/AbsVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/AbsVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/AbsVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/AbsVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/AbsVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/AbsVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/AbsVector.html", "kind" : "case class"}, {"name" : "smile.math.AcosMatrix", "shortDescription" : "", "members_case class" : [{"label" : "array", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.Operators.matrixExpression2Array.array", "link" : "smile\/math\/AcosMatrix.html#array():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.sum", "link" : "smile\/math\/AcosMatrix.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/AcosMatrix.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/AcosMatrix.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/AcosMatrix.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/AcosMatrix.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/AcosMatrix.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/AcosMatrix.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/AcosMatrix.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/AcosMatrix.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/AcosMatrix.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/AcosMatrix.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/AcosMatrix.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/AcosMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/AcosMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/AcosMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/AcosMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/AcosMatrix.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/AcosMatrix.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colMeans", "link" : "smile\/math\/AcosMatrix.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colSums", "link" : "smile\/math\/AcosMatrix.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowMeans", "link" : "smile\/math\/AcosMatrix.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowSums", "link" : "smile\/math\/AcosMatrix.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.Operators.matrixExpression2Array.xax", "link" : "smile\/math\/AcosMatrix.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normFro", "link" : "smile\/math\/AcosMatrix.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normInf", "link" : "smile\/math\/AcosMatrix.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm", "link" : "smile\/math\/AcosMatrix.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm2", "link" : "smile\/math\/AcosMatrix.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm1", "link" : "smile\/math\/AcosMatrix.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/AcosMatrix.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/AcosMatrix.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/AcosMatrix.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/AcosMatrix.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/AcosMatrix.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/AcosMatrix.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/AcosMatrix.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/AcosMatrix.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.update", "link" : "smile\/math\/AcosMatrix.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/AcosMatrix.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/AcosMatrix.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/AcosMatrix.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/AcosMatrix.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.trace", "link" : "smile\/math\/AcosMatrix.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.diag", "link" : "smile\/math\/AcosMatrix.html#diag():Array[Double]", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.Operators.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/AcosMatrix.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.Operators.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/AcosMatrix.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/AcosMatrix.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/AcosMatrix.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/AcosMatrix.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/AcosMatrix.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.aat", "link" : "smile\/math\/AcosMatrix.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.ata", "link" : "smile\/math\/AcosMatrix.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "copy", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.copy", "link" : "smile\/math\/AcosMatrix.html#copy():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.transpose", "link" : "smile\/math\/AcosMatrix.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/AcosMatrix.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/AcosMatrix.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/AcosMatrix.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/AcosMatrix.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/AcosMatrix.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/AcosMatrix.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.set", "link" : "smile\/math\/AcosMatrix.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.Operators.matrixExpression2Array.ld", "link" : "smile\/math\/AcosMatrix.html#ld():Int", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.data", "link" : "smile\/math\/AcosMatrix.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.atbmm", "link" : "smile\/math\/AcosMatrix.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abtmm", "link" : "smile\/math\/AcosMatrix.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abmm", "link" : "smile\/math\/AcosMatrix.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/AcosMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/AcosMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atx", "link" : "smile\/math\/AcosMatrix.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/AcosMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/AcosMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.ax", "link" : "smile\/math\/AcosMatrix.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.Operators.matrixExpression2Array.get", "link" : "smile\/math\/AcosMatrix.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/AcosMatrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AcosMatrix) ⇒ Boolean, msg: ⇒ Any): AcosMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AcosMatrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AcosMatrix) ⇒ Boolean): AcosMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AcosMatrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): AcosMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AcosMatrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): AcosMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AcosMatrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (AcosMatrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/AcosMatrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (AcosMatrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/AcosMatrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.AcosMatrix.toMatrix", "link" : "smile\/math\/AcosMatrix.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.AcosMatrix.apply", "link" : "smile\/math\/AcosMatrix.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.AcosMatrix.ncols", "link" : "smile\/math\/AcosMatrix.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.AcosMatrix.nrows", "link" : "smile\/math\/AcosMatrix.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.AcosMatrix#<init>", "error" : "unsupported entity"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.AcosMatrix.A", "link" : "smile\/math\/AcosMatrix.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/AcosMatrix.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/AcosMatrix.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/AcosMatrix.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/AcosMatrix.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/AcosMatrix.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/AcosMatrix.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/AcosMatrix.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/AcosMatrix.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/AcosMatrix.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/AcosMatrix.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/AcosMatrix.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/AcosMatrix.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/AcosMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/AcosMatrix.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/AcosMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/AcosMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/AcosMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/AcosMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/AcosMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/AcosMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/AcosMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/AcosMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/AcosMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/AcosMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/AcosMatrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/AcosMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/AcosMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/AcosMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/AcosMatrix.html", "kind" : "case class"}, {"name" : "smile.math.AcosVector", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.Operators.vectorExpression2Array.update", "link" : "smile\/math\/AcosVector.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/AcosVector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AcosVector) ⇒ Boolean, msg: ⇒ Any): AcosVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AcosVector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AcosVector) ⇒ Boolean): AcosVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AcosVector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): AcosVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AcosVector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): AcosVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AcosVector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (AcosVector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/AcosVector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (AcosVector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/AcosVector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.AcosVector.toArray", "link" : "smile\/math\/AcosVector.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.AcosVector.apply", "link" : "smile\/math\/AcosVector.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.AcosVector.length", "link" : "smile\/math\/AcosVector.html#length:Int", "kind" : "def"}, {"member" : "smile.math.AcosVector#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.AcosVector.x", "link" : "smile\/math\/AcosVector.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/AcosVector.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/AcosVector.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/AcosVector.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/AcosVector.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/AcosVector.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/AcosVector.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/AcosVector.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/AcosVector.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/AcosVector.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/AcosVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/AcosVector.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/AcosVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/AcosVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/AcosVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/AcosVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/AcosVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/AcosVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/AcosVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/AcosVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/AcosVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/AcosVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/AcosVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/AcosVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/AcosVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/AcosVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/AcosVector.html", "kind" : "case class"}, {"name" : "smile.math.AsinMatrix", "shortDescription" : "", "members_case class" : [{"label" : "array", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.Operators.matrixExpression2Array.array", "link" : "smile\/math\/AsinMatrix.html#array():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.sum", "link" : "smile\/math\/AsinMatrix.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/AsinMatrix.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/AsinMatrix.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/AsinMatrix.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/AsinMatrix.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/AsinMatrix.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/AsinMatrix.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/AsinMatrix.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/AsinMatrix.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/AsinMatrix.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/AsinMatrix.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/AsinMatrix.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/AsinMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/AsinMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/AsinMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/AsinMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/AsinMatrix.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/AsinMatrix.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colMeans", "link" : "smile\/math\/AsinMatrix.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colSums", "link" : "smile\/math\/AsinMatrix.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowMeans", "link" : "smile\/math\/AsinMatrix.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowSums", "link" : "smile\/math\/AsinMatrix.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.Operators.matrixExpression2Array.xax", "link" : "smile\/math\/AsinMatrix.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normFro", "link" : "smile\/math\/AsinMatrix.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normInf", "link" : "smile\/math\/AsinMatrix.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm", "link" : "smile\/math\/AsinMatrix.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm2", "link" : "smile\/math\/AsinMatrix.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm1", "link" : "smile\/math\/AsinMatrix.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/AsinMatrix.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/AsinMatrix.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/AsinMatrix.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/AsinMatrix.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/AsinMatrix.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/AsinMatrix.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/AsinMatrix.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/AsinMatrix.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.update", "link" : "smile\/math\/AsinMatrix.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/AsinMatrix.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/AsinMatrix.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/AsinMatrix.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/AsinMatrix.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.trace", "link" : "smile\/math\/AsinMatrix.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.diag", "link" : "smile\/math\/AsinMatrix.html#diag():Array[Double]", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.Operators.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/AsinMatrix.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.Operators.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/AsinMatrix.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/AsinMatrix.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/AsinMatrix.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/AsinMatrix.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/AsinMatrix.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.aat", "link" : "smile\/math\/AsinMatrix.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.ata", "link" : "smile\/math\/AsinMatrix.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "copy", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.copy", "link" : "smile\/math\/AsinMatrix.html#copy():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.transpose", "link" : "smile\/math\/AsinMatrix.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/AsinMatrix.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/AsinMatrix.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/AsinMatrix.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/AsinMatrix.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/AsinMatrix.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/AsinMatrix.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.set", "link" : "smile\/math\/AsinMatrix.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.Operators.matrixExpression2Array.ld", "link" : "smile\/math\/AsinMatrix.html#ld():Int", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.data", "link" : "smile\/math\/AsinMatrix.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.atbmm", "link" : "smile\/math\/AsinMatrix.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abtmm", "link" : "smile\/math\/AsinMatrix.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abmm", "link" : "smile\/math\/AsinMatrix.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/AsinMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/AsinMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atx", "link" : "smile\/math\/AsinMatrix.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/AsinMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/AsinMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.ax", "link" : "smile\/math\/AsinMatrix.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.Operators.matrixExpression2Array.get", "link" : "smile\/math\/AsinMatrix.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/AsinMatrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AsinMatrix) ⇒ Boolean, msg: ⇒ Any): AsinMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AsinMatrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AsinMatrix) ⇒ Boolean): AsinMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AsinMatrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): AsinMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AsinMatrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): AsinMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AsinMatrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (AsinMatrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/AsinMatrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (AsinMatrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/AsinMatrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.AsinMatrix.toMatrix", "link" : "smile\/math\/AsinMatrix.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.AsinMatrix.apply", "link" : "smile\/math\/AsinMatrix.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.AsinMatrix.ncols", "link" : "smile\/math\/AsinMatrix.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.AsinMatrix.nrows", "link" : "smile\/math\/AsinMatrix.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.AsinMatrix#<init>", "error" : "unsupported entity"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.AsinMatrix.A", "link" : "smile\/math\/AsinMatrix.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/AsinMatrix.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/AsinMatrix.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/AsinMatrix.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/AsinMatrix.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/AsinMatrix.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/AsinMatrix.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/AsinMatrix.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/AsinMatrix.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/AsinMatrix.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/AsinMatrix.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/AsinMatrix.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/AsinMatrix.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/AsinMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/AsinMatrix.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/AsinMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/AsinMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/AsinMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/AsinMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/AsinMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/AsinMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/AsinMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/AsinMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/AsinMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/AsinMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/AsinMatrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/AsinMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/AsinMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/AsinMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/AsinMatrix.html", "kind" : "case class"}, {"name" : "smile.math.AsinVector", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.Operators.vectorExpression2Array.update", "link" : "smile\/math\/AsinVector.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/AsinVector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AsinVector) ⇒ Boolean, msg: ⇒ Any): AsinVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AsinVector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AsinVector) ⇒ Boolean): AsinVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AsinVector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): AsinVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AsinVector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): AsinVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AsinVector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (AsinVector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/AsinVector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (AsinVector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/AsinVector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.AsinVector.toArray", "link" : "smile\/math\/AsinVector.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.AsinVector.apply", "link" : "smile\/math\/AsinVector.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.AsinVector.length", "link" : "smile\/math\/AsinVector.html#length:Int", "kind" : "def"}, {"member" : "smile.math.AsinVector#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.AsinVector.x", "link" : "smile\/math\/AsinVector.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/AsinVector.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/AsinVector.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/AsinVector.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/AsinVector.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/AsinVector.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/AsinVector.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/AsinVector.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/AsinVector.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/AsinVector.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/AsinVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/AsinVector.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/AsinVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/AsinVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/AsinVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/AsinVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/AsinVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/AsinVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/AsinVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/AsinVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/AsinVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/AsinVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/AsinVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/AsinVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/AsinVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/AsinVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/AsinVector.html", "kind" : "case class"}, {"name" : "smile.math.AtanMatrix", "shortDescription" : "", "members_case class" : [{"label" : "array", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.Operators.matrixExpression2Array.array", "link" : "smile\/math\/AtanMatrix.html#array():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.sum", "link" : "smile\/math\/AtanMatrix.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/AtanMatrix.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/AtanMatrix.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/AtanMatrix.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/AtanMatrix.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/AtanMatrix.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/AtanMatrix.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/AtanMatrix.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/AtanMatrix.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/AtanMatrix.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/AtanMatrix.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/AtanMatrix.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/AtanMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/AtanMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/AtanMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/AtanMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/AtanMatrix.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/AtanMatrix.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colMeans", "link" : "smile\/math\/AtanMatrix.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colSums", "link" : "smile\/math\/AtanMatrix.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowMeans", "link" : "smile\/math\/AtanMatrix.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowSums", "link" : "smile\/math\/AtanMatrix.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.Operators.matrixExpression2Array.xax", "link" : "smile\/math\/AtanMatrix.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normFro", "link" : "smile\/math\/AtanMatrix.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normInf", "link" : "smile\/math\/AtanMatrix.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm", "link" : "smile\/math\/AtanMatrix.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm2", "link" : "smile\/math\/AtanMatrix.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm1", "link" : "smile\/math\/AtanMatrix.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/AtanMatrix.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/AtanMatrix.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/AtanMatrix.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/AtanMatrix.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/AtanMatrix.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/AtanMatrix.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/AtanMatrix.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/AtanMatrix.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.update", "link" : "smile\/math\/AtanMatrix.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/AtanMatrix.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/AtanMatrix.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/AtanMatrix.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/AtanMatrix.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.trace", "link" : "smile\/math\/AtanMatrix.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.diag", "link" : "smile\/math\/AtanMatrix.html#diag():Array[Double]", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.Operators.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/AtanMatrix.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.Operators.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/AtanMatrix.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/AtanMatrix.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/AtanMatrix.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/AtanMatrix.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/AtanMatrix.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.aat", "link" : "smile\/math\/AtanMatrix.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.ata", "link" : "smile\/math\/AtanMatrix.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "copy", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.copy", "link" : "smile\/math\/AtanMatrix.html#copy():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.transpose", "link" : "smile\/math\/AtanMatrix.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/AtanMatrix.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/AtanMatrix.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/AtanMatrix.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/AtanMatrix.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/AtanMatrix.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/AtanMatrix.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.set", "link" : "smile\/math\/AtanMatrix.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.Operators.matrixExpression2Array.ld", "link" : "smile\/math\/AtanMatrix.html#ld():Int", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.data", "link" : "smile\/math\/AtanMatrix.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.atbmm", "link" : "smile\/math\/AtanMatrix.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abtmm", "link" : "smile\/math\/AtanMatrix.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abmm", "link" : "smile\/math\/AtanMatrix.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/AtanMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/AtanMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atx", "link" : "smile\/math\/AtanMatrix.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/AtanMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/AtanMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.ax", "link" : "smile\/math\/AtanMatrix.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.Operators.matrixExpression2Array.get", "link" : "smile\/math\/AtanMatrix.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/AtanMatrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AtanMatrix) ⇒ Boolean, msg: ⇒ Any): AtanMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AtanMatrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AtanMatrix) ⇒ Boolean): AtanMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AtanMatrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): AtanMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AtanMatrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): AtanMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AtanMatrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (AtanMatrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/AtanMatrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (AtanMatrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/AtanMatrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.AtanMatrix.toMatrix", "link" : "smile\/math\/AtanMatrix.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.AtanMatrix.apply", "link" : "smile\/math\/AtanMatrix.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.AtanMatrix.ncols", "link" : "smile\/math\/AtanMatrix.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.AtanMatrix.nrows", "link" : "smile\/math\/AtanMatrix.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.AtanMatrix#<init>", "error" : "unsupported entity"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.AtanMatrix.A", "link" : "smile\/math\/AtanMatrix.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/AtanMatrix.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/AtanMatrix.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/AtanMatrix.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/AtanMatrix.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/AtanMatrix.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/AtanMatrix.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/AtanMatrix.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/AtanMatrix.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/AtanMatrix.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/AtanMatrix.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/AtanMatrix.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/AtanMatrix.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/AtanMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/AtanMatrix.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/AtanMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/AtanMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/AtanMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/AtanMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/AtanMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/AtanMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/AtanMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/AtanMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/AtanMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/AtanMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/AtanMatrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/AtanMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/AtanMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/AtanMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/AtanMatrix.html", "kind" : "case class"}, {"name" : "smile.math.AtanVector", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.Operators.vectorExpression2Array.update", "link" : "smile\/math\/AtanVector.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/AtanVector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AtanVector) ⇒ Boolean, msg: ⇒ Any): AtanVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AtanVector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AtanVector) ⇒ Boolean): AtanVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AtanVector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): AtanVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AtanVector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): AtanVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AtanVector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (AtanVector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/AtanVector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (AtanVector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/AtanVector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.AtanVector.toArray", "link" : "smile\/math\/AtanVector.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.AtanVector.apply", "link" : "smile\/math\/AtanVector.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.AtanVector.length", "link" : "smile\/math\/AtanVector.html#length:Int", "kind" : "def"}, {"member" : "smile.math.AtanVector#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.AtanVector.x", "link" : "smile\/math\/AtanVector.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/AtanVector.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/AtanVector.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/AtanVector.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/AtanVector.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/AtanVector.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/AtanVector.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/AtanVector.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/AtanVector.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/AtanVector.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/AtanVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/AtanVector.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/AtanVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/AtanVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/AtanVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/AtanVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/AtanVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/AtanVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/AtanVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/AtanVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/AtanVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/AtanVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/AtanVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/AtanVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/AtanVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/AtanVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/AtanVector.html", "kind" : "case class"}, {"name" : "smile.math.Ax", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.Operators.vectorExpression2Array.update", "link" : "smile\/math\/Ax.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/Ax.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Ax) ⇒ Boolean, msg: ⇒ Any): Ax", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Ax.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Ax) ⇒ Boolean): Ax", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Ax.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Ax", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Ax.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Ax", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Ax.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Ax, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/Ax.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Ax, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/Ax.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.Ax.toArray", "link" : "smile\/math\/Ax.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.Ax.apply", "link" : "smile\/math\/Ax.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.Ax.length", "link" : "smile\/math\/Ax.html#length:Int", "kind" : "def"}, {"member" : "smile.math.Ax#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.Ax.x", "link" : "smile\/math\/Ax.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.Ax.A", "link" : "smile\/math\/Ax.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/Ax.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/Ax.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/Ax.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/Ax.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/Ax.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/Ax.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/Ax.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/Ax.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/Ax.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/Ax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/Ax.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/Ax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/Ax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/Ax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/Ax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/Ax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Ax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Ax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Ax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/Ax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/Ax.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/Ax.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/Ax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/Ax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/Ax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/Ax.html", "kind" : "case class"}, {"name" : "smile.math.CbrtMatrix", "shortDescription" : "", "members_case class" : [{"label" : "array", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.Operators.matrixExpression2Array.array", "link" : "smile\/math\/CbrtMatrix.html#array():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.sum", "link" : "smile\/math\/CbrtMatrix.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/CbrtMatrix.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/CbrtMatrix.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/CbrtMatrix.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/CbrtMatrix.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/CbrtMatrix.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/CbrtMatrix.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/CbrtMatrix.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/CbrtMatrix.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/CbrtMatrix.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/CbrtMatrix.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/CbrtMatrix.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/CbrtMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/CbrtMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/CbrtMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/CbrtMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/CbrtMatrix.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/CbrtMatrix.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colMeans", "link" : "smile\/math\/CbrtMatrix.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colSums", "link" : "smile\/math\/CbrtMatrix.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowMeans", "link" : "smile\/math\/CbrtMatrix.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowSums", "link" : "smile\/math\/CbrtMatrix.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.Operators.matrixExpression2Array.xax", "link" : "smile\/math\/CbrtMatrix.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normFro", "link" : "smile\/math\/CbrtMatrix.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normInf", "link" : "smile\/math\/CbrtMatrix.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm", "link" : "smile\/math\/CbrtMatrix.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm2", "link" : "smile\/math\/CbrtMatrix.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm1", "link" : "smile\/math\/CbrtMatrix.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/CbrtMatrix.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/CbrtMatrix.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/CbrtMatrix.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/CbrtMatrix.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/CbrtMatrix.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/CbrtMatrix.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/CbrtMatrix.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/CbrtMatrix.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.update", "link" : "smile\/math\/CbrtMatrix.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/CbrtMatrix.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/CbrtMatrix.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/CbrtMatrix.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/CbrtMatrix.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.trace", "link" : "smile\/math\/CbrtMatrix.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.diag", "link" : "smile\/math\/CbrtMatrix.html#diag():Array[Double]", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.Operators.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/CbrtMatrix.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.Operators.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/CbrtMatrix.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/CbrtMatrix.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/CbrtMatrix.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/CbrtMatrix.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/CbrtMatrix.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.aat", "link" : "smile\/math\/CbrtMatrix.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.ata", "link" : "smile\/math\/CbrtMatrix.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "copy", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.copy", "link" : "smile\/math\/CbrtMatrix.html#copy():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.transpose", "link" : "smile\/math\/CbrtMatrix.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/CbrtMatrix.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/CbrtMatrix.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/CbrtMatrix.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/CbrtMatrix.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/CbrtMatrix.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/CbrtMatrix.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.set", "link" : "smile\/math\/CbrtMatrix.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.Operators.matrixExpression2Array.ld", "link" : "smile\/math\/CbrtMatrix.html#ld():Int", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.data", "link" : "smile\/math\/CbrtMatrix.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.atbmm", "link" : "smile\/math\/CbrtMatrix.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abtmm", "link" : "smile\/math\/CbrtMatrix.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abmm", "link" : "smile\/math\/CbrtMatrix.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/CbrtMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/CbrtMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atx", "link" : "smile\/math\/CbrtMatrix.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/CbrtMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/CbrtMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.ax", "link" : "smile\/math\/CbrtMatrix.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.Operators.matrixExpression2Array.get", "link" : "smile\/math\/CbrtMatrix.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/CbrtMatrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (CbrtMatrix) ⇒ Boolean, msg: ⇒ Any): CbrtMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/CbrtMatrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (CbrtMatrix) ⇒ Boolean): CbrtMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/CbrtMatrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): CbrtMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/CbrtMatrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): CbrtMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/CbrtMatrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (CbrtMatrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/CbrtMatrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (CbrtMatrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/CbrtMatrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.CbrtMatrix.toMatrix", "link" : "smile\/math\/CbrtMatrix.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.CbrtMatrix.apply", "link" : "smile\/math\/CbrtMatrix.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.CbrtMatrix.ncols", "link" : "smile\/math\/CbrtMatrix.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.CbrtMatrix.nrows", "link" : "smile\/math\/CbrtMatrix.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.CbrtMatrix#<init>", "error" : "unsupported entity"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.CbrtMatrix.A", "link" : "smile\/math\/CbrtMatrix.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/CbrtMatrix.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/CbrtMatrix.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/CbrtMatrix.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/CbrtMatrix.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/CbrtMatrix.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/CbrtMatrix.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/CbrtMatrix.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/CbrtMatrix.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/CbrtMatrix.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/CbrtMatrix.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/CbrtMatrix.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/CbrtMatrix.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/CbrtMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/CbrtMatrix.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/CbrtMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/CbrtMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/CbrtMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/CbrtMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/CbrtMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/CbrtMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/CbrtMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/CbrtMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/CbrtMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/CbrtMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/CbrtMatrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/CbrtMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/CbrtMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/CbrtMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/CbrtMatrix.html", "kind" : "case class"}, {"name" : "smile.math.CbrtVector", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.Operators.vectorExpression2Array.update", "link" : "smile\/math\/CbrtVector.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/CbrtVector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (CbrtVector) ⇒ Boolean, msg: ⇒ Any): CbrtVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/CbrtVector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (CbrtVector) ⇒ Boolean): CbrtVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/CbrtVector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): CbrtVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/CbrtVector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): CbrtVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/CbrtVector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (CbrtVector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/CbrtVector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (CbrtVector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/CbrtVector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.CbrtVector.toArray", "link" : "smile\/math\/CbrtVector.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.CbrtVector.apply", "link" : "smile\/math\/CbrtVector.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.CbrtVector.length", "link" : "smile\/math\/CbrtVector.html#length:Int", "kind" : "def"}, {"member" : "smile.math.CbrtVector#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.CbrtVector.x", "link" : "smile\/math\/CbrtVector.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/CbrtVector.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/CbrtVector.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/CbrtVector.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/CbrtVector.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/CbrtVector.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/CbrtVector.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/CbrtVector.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/CbrtVector.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/CbrtVector.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/CbrtVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/CbrtVector.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/CbrtVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/CbrtVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/CbrtVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/CbrtVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/CbrtVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/CbrtVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/CbrtVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/CbrtVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/CbrtVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/CbrtVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/CbrtVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/CbrtVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/CbrtVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/CbrtVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/CbrtVector.html", "kind" : "case class"}, {"name" : "smile.math.CeilMatrix", "shortDescription" : "", "members_case class" : [{"label" : "array", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.Operators.matrixExpression2Array.array", "link" : "smile\/math\/CeilMatrix.html#array():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.sum", "link" : "smile\/math\/CeilMatrix.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/CeilMatrix.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/CeilMatrix.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/CeilMatrix.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/CeilMatrix.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/CeilMatrix.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/CeilMatrix.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/CeilMatrix.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/CeilMatrix.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/CeilMatrix.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/CeilMatrix.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/CeilMatrix.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/CeilMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/CeilMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/CeilMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/CeilMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/CeilMatrix.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/CeilMatrix.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colMeans", "link" : "smile\/math\/CeilMatrix.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colSums", "link" : "smile\/math\/CeilMatrix.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowMeans", "link" : "smile\/math\/CeilMatrix.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowSums", "link" : "smile\/math\/CeilMatrix.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.Operators.matrixExpression2Array.xax", "link" : "smile\/math\/CeilMatrix.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normFro", "link" : "smile\/math\/CeilMatrix.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normInf", "link" : "smile\/math\/CeilMatrix.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm", "link" : "smile\/math\/CeilMatrix.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm2", "link" : "smile\/math\/CeilMatrix.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm1", "link" : "smile\/math\/CeilMatrix.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/CeilMatrix.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/CeilMatrix.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/CeilMatrix.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/CeilMatrix.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/CeilMatrix.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/CeilMatrix.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/CeilMatrix.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/CeilMatrix.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.update", "link" : "smile\/math\/CeilMatrix.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/CeilMatrix.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/CeilMatrix.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/CeilMatrix.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/CeilMatrix.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.trace", "link" : "smile\/math\/CeilMatrix.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.diag", "link" : "smile\/math\/CeilMatrix.html#diag():Array[Double]", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.Operators.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/CeilMatrix.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.Operators.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/CeilMatrix.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/CeilMatrix.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/CeilMatrix.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/CeilMatrix.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/CeilMatrix.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.aat", "link" : "smile\/math\/CeilMatrix.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.ata", "link" : "smile\/math\/CeilMatrix.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "copy", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.copy", "link" : "smile\/math\/CeilMatrix.html#copy():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.transpose", "link" : "smile\/math\/CeilMatrix.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/CeilMatrix.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/CeilMatrix.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/CeilMatrix.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/CeilMatrix.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/CeilMatrix.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/CeilMatrix.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.set", "link" : "smile\/math\/CeilMatrix.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.Operators.matrixExpression2Array.ld", "link" : "smile\/math\/CeilMatrix.html#ld():Int", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.data", "link" : "smile\/math\/CeilMatrix.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.atbmm", "link" : "smile\/math\/CeilMatrix.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abtmm", "link" : "smile\/math\/CeilMatrix.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abmm", "link" : "smile\/math\/CeilMatrix.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/CeilMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/CeilMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atx", "link" : "smile\/math\/CeilMatrix.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/CeilMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/CeilMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.ax", "link" : "smile\/math\/CeilMatrix.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.Operators.matrixExpression2Array.get", "link" : "smile\/math\/CeilMatrix.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/CeilMatrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (CeilMatrix) ⇒ Boolean, msg: ⇒ Any): CeilMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/CeilMatrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (CeilMatrix) ⇒ Boolean): CeilMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/CeilMatrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): CeilMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/CeilMatrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): CeilMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/CeilMatrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (CeilMatrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/CeilMatrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (CeilMatrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/CeilMatrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.CeilMatrix.toMatrix", "link" : "smile\/math\/CeilMatrix.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.CeilMatrix.apply", "link" : "smile\/math\/CeilMatrix.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.CeilMatrix.ncols", "link" : "smile\/math\/CeilMatrix.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.CeilMatrix.nrows", "link" : "smile\/math\/CeilMatrix.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.CeilMatrix#<init>", "error" : "unsupported entity"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.CeilMatrix.A", "link" : "smile\/math\/CeilMatrix.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/CeilMatrix.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/CeilMatrix.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/CeilMatrix.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/CeilMatrix.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/CeilMatrix.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/CeilMatrix.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/CeilMatrix.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/CeilMatrix.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/CeilMatrix.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/CeilMatrix.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/CeilMatrix.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/CeilMatrix.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/CeilMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/CeilMatrix.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/CeilMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/CeilMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/CeilMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/CeilMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/CeilMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/CeilMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/CeilMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/CeilMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/CeilMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/CeilMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/CeilMatrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/CeilMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/CeilMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/CeilMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/CeilMatrix.html", "kind" : "case class"}, {"name" : "smile.math.CeilVector", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.Operators.vectorExpression2Array.update", "link" : "smile\/math\/CeilVector.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/CeilVector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (CeilVector) ⇒ Boolean, msg: ⇒ Any): CeilVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/CeilVector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (CeilVector) ⇒ Boolean): CeilVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/CeilVector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): CeilVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/CeilVector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): CeilVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/CeilVector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (CeilVector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/CeilVector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (CeilVector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/CeilVector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.CeilVector.toArray", "link" : "smile\/math\/CeilVector.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.CeilVector.apply", "link" : "smile\/math\/CeilVector.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.CeilVector.length", "link" : "smile\/math\/CeilVector.html#length:Int", "kind" : "def"}, {"member" : "smile.math.CeilVector#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.CeilVector.x", "link" : "smile\/math\/CeilVector.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/CeilVector.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/CeilVector.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/CeilVector.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/CeilVector.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/CeilVector.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/CeilVector.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/CeilVector.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/CeilVector.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/CeilVector.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/CeilVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/CeilVector.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/CeilVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/CeilVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/CeilVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/CeilVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/CeilVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/CeilVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/CeilVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/CeilVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/CeilVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/CeilVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/CeilVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/CeilVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/CeilVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/CeilVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/CeilVector.html", "kind" : "case class"}, {"name" : "smile.math.Expm1Matrix", "shortDescription" : "", "members_case class" : [{"label" : "array", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.Operators.matrixExpression2Array.array", "link" : "smile\/math\/Expm1Matrix.html#array():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.sum", "link" : "smile\/math\/Expm1Matrix.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/Expm1Matrix.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/Expm1Matrix.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/Expm1Matrix.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/Expm1Matrix.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/Expm1Matrix.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/Expm1Matrix.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/Expm1Matrix.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/Expm1Matrix.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/Expm1Matrix.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/Expm1Matrix.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/Expm1Matrix.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/Expm1Matrix.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/Expm1Matrix.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/Expm1Matrix.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/Expm1Matrix.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/Expm1Matrix.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/Expm1Matrix.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colMeans", "link" : "smile\/math\/Expm1Matrix.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colSums", "link" : "smile\/math\/Expm1Matrix.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowMeans", "link" : "smile\/math\/Expm1Matrix.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowSums", "link" : "smile\/math\/Expm1Matrix.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.Operators.matrixExpression2Array.xax", "link" : "smile\/math\/Expm1Matrix.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normFro", "link" : "smile\/math\/Expm1Matrix.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normInf", "link" : "smile\/math\/Expm1Matrix.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm", "link" : "smile\/math\/Expm1Matrix.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm2", "link" : "smile\/math\/Expm1Matrix.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm1", "link" : "smile\/math\/Expm1Matrix.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/Expm1Matrix.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/Expm1Matrix.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/Expm1Matrix.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/Expm1Matrix.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/Expm1Matrix.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/Expm1Matrix.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/Expm1Matrix.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/Expm1Matrix.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.update", "link" : "smile\/math\/Expm1Matrix.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/Expm1Matrix.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/Expm1Matrix.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/Expm1Matrix.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/Expm1Matrix.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.trace", "link" : "smile\/math\/Expm1Matrix.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.diag", "link" : "smile\/math\/Expm1Matrix.html#diag():Array[Double]", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.Operators.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/Expm1Matrix.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.Operators.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/Expm1Matrix.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/Expm1Matrix.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/Expm1Matrix.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/Expm1Matrix.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/Expm1Matrix.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.aat", "link" : "smile\/math\/Expm1Matrix.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.ata", "link" : "smile\/math\/Expm1Matrix.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "copy", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.copy", "link" : "smile\/math\/Expm1Matrix.html#copy():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.transpose", "link" : "smile\/math\/Expm1Matrix.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/Expm1Matrix.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/Expm1Matrix.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/Expm1Matrix.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/Expm1Matrix.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/Expm1Matrix.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/Expm1Matrix.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.set", "link" : "smile\/math\/Expm1Matrix.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.Operators.matrixExpression2Array.ld", "link" : "smile\/math\/Expm1Matrix.html#ld():Int", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.data", "link" : "smile\/math\/Expm1Matrix.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.atbmm", "link" : "smile\/math\/Expm1Matrix.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abtmm", "link" : "smile\/math\/Expm1Matrix.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abmm", "link" : "smile\/math\/Expm1Matrix.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/Expm1Matrix.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/Expm1Matrix.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atx", "link" : "smile\/math\/Expm1Matrix.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/Expm1Matrix.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/Expm1Matrix.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.ax", "link" : "smile\/math\/Expm1Matrix.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.Operators.matrixExpression2Array.get", "link" : "smile\/math\/Expm1Matrix.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/Expm1Matrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Expm1Matrix) ⇒ Boolean, msg: ⇒ Any): Expm1Matrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Expm1Matrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Expm1Matrix) ⇒ Boolean): Expm1Matrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Expm1Matrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Expm1Matrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Expm1Matrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Expm1Matrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Expm1Matrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Expm1Matrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/Expm1Matrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Expm1Matrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/Expm1Matrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.Expm1Matrix.toMatrix", "link" : "smile\/math\/Expm1Matrix.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.Expm1Matrix.apply", "link" : "smile\/math\/Expm1Matrix.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.Expm1Matrix.ncols", "link" : "smile\/math\/Expm1Matrix.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.Expm1Matrix.nrows", "link" : "smile\/math\/Expm1Matrix.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.Expm1Matrix#<init>", "error" : "unsupported entity"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.Expm1Matrix.A", "link" : "smile\/math\/Expm1Matrix.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/Expm1Matrix.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/Expm1Matrix.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/Expm1Matrix.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/Expm1Matrix.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/Expm1Matrix.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/Expm1Matrix.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/Expm1Matrix.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/Expm1Matrix.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/Expm1Matrix.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/Expm1Matrix.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/Expm1Matrix.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/Expm1Matrix.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/Expm1Matrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/Expm1Matrix.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/Expm1Matrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/Expm1Matrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/Expm1Matrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/Expm1Matrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/Expm1Matrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Expm1Matrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Expm1Matrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Expm1Matrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/Expm1Matrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/Expm1Matrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/Expm1Matrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/Expm1Matrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/Expm1Matrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/Expm1Matrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/Expm1Matrix.html", "kind" : "case class"}, {"name" : "smile.math.Expm1Vector", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.Operators.vectorExpression2Array.update", "link" : "smile\/math\/Expm1Vector.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/Expm1Vector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Expm1Vector) ⇒ Boolean, msg: ⇒ Any): Expm1Vector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Expm1Vector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Expm1Vector) ⇒ Boolean): Expm1Vector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Expm1Vector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Expm1Vector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Expm1Vector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Expm1Vector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Expm1Vector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Expm1Vector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/Expm1Vector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Expm1Vector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/Expm1Vector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.Expm1Vector.toArray", "link" : "smile\/math\/Expm1Vector.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.Expm1Vector.apply", "link" : "smile\/math\/Expm1Vector.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.Expm1Vector.length", "link" : "smile\/math\/Expm1Vector.html#length:Int", "kind" : "def"}, {"member" : "smile.math.Expm1Vector#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.Expm1Vector.x", "link" : "smile\/math\/Expm1Vector.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/Expm1Vector.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/Expm1Vector.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/Expm1Vector.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/Expm1Vector.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/Expm1Vector.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/Expm1Vector.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/Expm1Vector.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/Expm1Vector.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/Expm1Vector.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/Expm1Vector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/Expm1Vector.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/Expm1Vector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/Expm1Vector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/Expm1Vector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/Expm1Vector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/Expm1Vector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Expm1Vector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Expm1Vector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Expm1Vector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/Expm1Vector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/Expm1Vector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/Expm1Vector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/Expm1Vector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/Expm1Vector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/Expm1Vector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/Expm1Vector.html", "kind" : "case class"}, {"name" : "smile.math.ExpMatrix", "shortDescription" : "", "members_case class" : [{"label" : "array", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.Operators.matrixExpression2Array.array", "link" : "smile\/math\/ExpMatrix.html#array():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.sum", "link" : "smile\/math\/ExpMatrix.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/ExpMatrix.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/ExpMatrix.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/ExpMatrix.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/ExpMatrix.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/ExpMatrix.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/ExpMatrix.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/ExpMatrix.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/ExpMatrix.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/ExpMatrix.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/ExpMatrix.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/ExpMatrix.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/ExpMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/ExpMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/ExpMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/ExpMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/ExpMatrix.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/ExpMatrix.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colMeans", "link" : "smile\/math\/ExpMatrix.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colSums", "link" : "smile\/math\/ExpMatrix.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowMeans", "link" : "smile\/math\/ExpMatrix.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowSums", "link" : "smile\/math\/ExpMatrix.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.Operators.matrixExpression2Array.xax", "link" : "smile\/math\/ExpMatrix.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normFro", "link" : "smile\/math\/ExpMatrix.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normInf", "link" : "smile\/math\/ExpMatrix.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm", "link" : "smile\/math\/ExpMatrix.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm2", "link" : "smile\/math\/ExpMatrix.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm1", "link" : "smile\/math\/ExpMatrix.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/ExpMatrix.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/ExpMatrix.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/ExpMatrix.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/ExpMatrix.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/ExpMatrix.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/ExpMatrix.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/ExpMatrix.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/ExpMatrix.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.update", "link" : "smile\/math\/ExpMatrix.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/ExpMatrix.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/ExpMatrix.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/ExpMatrix.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/ExpMatrix.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.trace", "link" : "smile\/math\/ExpMatrix.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.diag", "link" : "smile\/math\/ExpMatrix.html#diag():Array[Double]", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.Operators.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/ExpMatrix.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.Operators.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/ExpMatrix.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/ExpMatrix.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/ExpMatrix.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/ExpMatrix.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/ExpMatrix.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.aat", "link" : "smile\/math\/ExpMatrix.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.ata", "link" : "smile\/math\/ExpMatrix.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "copy", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.copy", "link" : "smile\/math\/ExpMatrix.html#copy():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.transpose", "link" : "smile\/math\/ExpMatrix.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/ExpMatrix.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/ExpMatrix.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/ExpMatrix.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/ExpMatrix.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/ExpMatrix.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/ExpMatrix.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.set", "link" : "smile\/math\/ExpMatrix.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.Operators.matrixExpression2Array.ld", "link" : "smile\/math\/ExpMatrix.html#ld():Int", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.data", "link" : "smile\/math\/ExpMatrix.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.atbmm", "link" : "smile\/math\/ExpMatrix.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abtmm", "link" : "smile\/math\/ExpMatrix.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abmm", "link" : "smile\/math\/ExpMatrix.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/ExpMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/ExpMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atx", "link" : "smile\/math\/ExpMatrix.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/ExpMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/ExpMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.ax", "link" : "smile\/math\/ExpMatrix.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.Operators.matrixExpression2Array.get", "link" : "smile\/math\/ExpMatrix.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/ExpMatrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ExpMatrix) ⇒ Boolean, msg: ⇒ Any): ExpMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ExpMatrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ExpMatrix) ⇒ Boolean): ExpMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ExpMatrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ExpMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ExpMatrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ExpMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ExpMatrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ExpMatrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/ExpMatrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ExpMatrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/ExpMatrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.ExpMatrix.toMatrix", "link" : "smile\/math\/ExpMatrix.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.ExpMatrix.apply", "link" : "smile\/math\/ExpMatrix.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.ExpMatrix.ncols", "link" : "smile\/math\/ExpMatrix.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.ExpMatrix.nrows", "link" : "smile\/math\/ExpMatrix.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.ExpMatrix#<init>", "error" : "unsupported entity"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.ExpMatrix.A", "link" : "smile\/math\/ExpMatrix.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/ExpMatrix.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/ExpMatrix.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/ExpMatrix.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/ExpMatrix.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/ExpMatrix.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/ExpMatrix.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/ExpMatrix.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/ExpMatrix.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/ExpMatrix.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/ExpMatrix.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/ExpMatrix.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/ExpMatrix.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/ExpMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/ExpMatrix.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/ExpMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/ExpMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/ExpMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/ExpMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/ExpMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ExpMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ExpMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ExpMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/ExpMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/ExpMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/ExpMatrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/ExpMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/ExpMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/ExpMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/ExpMatrix.html", "kind" : "case class"}, {"name" : "smile.math.ExpVector", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.Operators.vectorExpression2Array.update", "link" : "smile\/math\/ExpVector.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/ExpVector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ExpVector) ⇒ Boolean, msg: ⇒ Any): ExpVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ExpVector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ExpVector) ⇒ Boolean): ExpVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ExpVector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ExpVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ExpVector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ExpVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ExpVector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ExpVector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/ExpVector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ExpVector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/ExpVector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.ExpVector.toArray", "link" : "smile\/math\/ExpVector.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.ExpVector.apply", "link" : "smile\/math\/ExpVector.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.ExpVector.length", "link" : "smile\/math\/ExpVector.html#length:Int", "kind" : "def"}, {"member" : "smile.math.ExpVector#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.ExpVector.x", "link" : "smile\/math\/ExpVector.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/ExpVector.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/ExpVector.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/ExpVector.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/ExpVector.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/ExpVector.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/ExpVector.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/ExpVector.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/ExpVector.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/ExpVector.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/ExpVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/ExpVector.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/ExpVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/ExpVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/ExpVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/ExpVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/ExpVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ExpVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ExpVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ExpVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/ExpVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/ExpVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/ExpVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/ExpVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/ExpVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/ExpVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/ExpVector.html", "kind" : "case class"}, {"name" : "smile.math.FloorMatrix", "shortDescription" : "", "members_case class" : [{"label" : "array", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.Operators.matrixExpression2Array.array", "link" : "smile\/math\/FloorMatrix.html#array():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.sum", "link" : "smile\/math\/FloorMatrix.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/FloorMatrix.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/FloorMatrix.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/FloorMatrix.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/FloorMatrix.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/FloorMatrix.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/FloorMatrix.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/FloorMatrix.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/FloorMatrix.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/FloorMatrix.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/FloorMatrix.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/FloorMatrix.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/FloorMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/FloorMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/FloorMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/FloorMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/FloorMatrix.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/FloorMatrix.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colMeans", "link" : "smile\/math\/FloorMatrix.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colSums", "link" : "smile\/math\/FloorMatrix.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowMeans", "link" : "smile\/math\/FloorMatrix.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowSums", "link" : "smile\/math\/FloorMatrix.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.Operators.matrixExpression2Array.xax", "link" : "smile\/math\/FloorMatrix.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normFro", "link" : "smile\/math\/FloorMatrix.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normInf", "link" : "smile\/math\/FloorMatrix.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm", "link" : "smile\/math\/FloorMatrix.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm2", "link" : "smile\/math\/FloorMatrix.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm1", "link" : "smile\/math\/FloorMatrix.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/FloorMatrix.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/FloorMatrix.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/FloorMatrix.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/FloorMatrix.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/FloorMatrix.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/FloorMatrix.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/FloorMatrix.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/FloorMatrix.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.update", "link" : "smile\/math\/FloorMatrix.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/FloorMatrix.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/FloorMatrix.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/FloorMatrix.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/FloorMatrix.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.trace", "link" : "smile\/math\/FloorMatrix.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.diag", "link" : "smile\/math\/FloorMatrix.html#diag():Array[Double]", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.Operators.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/FloorMatrix.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.Operators.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/FloorMatrix.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/FloorMatrix.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/FloorMatrix.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/FloorMatrix.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/FloorMatrix.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.aat", "link" : "smile\/math\/FloorMatrix.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.ata", "link" : "smile\/math\/FloorMatrix.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "copy", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.copy", "link" : "smile\/math\/FloorMatrix.html#copy():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.transpose", "link" : "smile\/math\/FloorMatrix.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/FloorMatrix.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/FloorMatrix.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/FloorMatrix.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/FloorMatrix.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/FloorMatrix.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/FloorMatrix.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.set", "link" : "smile\/math\/FloorMatrix.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.Operators.matrixExpression2Array.ld", "link" : "smile\/math\/FloorMatrix.html#ld():Int", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.data", "link" : "smile\/math\/FloorMatrix.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.atbmm", "link" : "smile\/math\/FloorMatrix.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abtmm", "link" : "smile\/math\/FloorMatrix.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abmm", "link" : "smile\/math\/FloorMatrix.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/FloorMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/FloorMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atx", "link" : "smile\/math\/FloorMatrix.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/FloorMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/FloorMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.ax", "link" : "smile\/math\/FloorMatrix.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.Operators.matrixExpression2Array.get", "link" : "smile\/math\/FloorMatrix.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/FloorMatrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (FloorMatrix) ⇒ Boolean, msg: ⇒ Any): FloorMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/FloorMatrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (FloorMatrix) ⇒ Boolean): FloorMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/FloorMatrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): FloorMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/FloorMatrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): FloorMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/FloorMatrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (FloorMatrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/FloorMatrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (FloorMatrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/FloorMatrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.FloorMatrix.toMatrix", "link" : "smile\/math\/FloorMatrix.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.FloorMatrix.apply", "link" : "smile\/math\/FloorMatrix.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.FloorMatrix.ncols", "link" : "smile\/math\/FloorMatrix.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.FloorMatrix.nrows", "link" : "smile\/math\/FloorMatrix.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.FloorMatrix#<init>", "error" : "unsupported entity"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.FloorMatrix.A", "link" : "smile\/math\/FloorMatrix.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/FloorMatrix.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/FloorMatrix.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/FloorMatrix.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/FloorMatrix.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/FloorMatrix.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/FloorMatrix.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/FloorMatrix.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/FloorMatrix.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/FloorMatrix.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/FloorMatrix.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/FloorMatrix.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/FloorMatrix.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/FloorMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/FloorMatrix.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/FloorMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/FloorMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/FloorMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/FloorMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/FloorMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/FloorMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/FloorMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/FloorMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/FloorMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/FloorMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/FloorMatrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/FloorMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/FloorMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/FloorMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/FloorMatrix.html", "kind" : "case class"}, {"name" : "smile.math.FloorVector", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.Operators.vectorExpression2Array.update", "link" : "smile\/math\/FloorVector.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/FloorVector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (FloorVector) ⇒ Boolean, msg: ⇒ Any): FloorVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/FloorVector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (FloorVector) ⇒ Boolean): FloorVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/FloorVector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): FloorVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/FloorVector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): FloorVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/FloorVector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (FloorVector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/FloorVector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (FloorVector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/FloorVector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.FloorVector.toArray", "link" : "smile\/math\/FloorVector.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.FloorVector.apply", "link" : "smile\/math\/FloorVector.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.FloorVector.length", "link" : "smile\/math\/FloorVector.html#length:Int", "kind" : "def"}, {"member" : "smile.math.FloorVector#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.FloorVector.x", "link" : "smile\/math\/FloorVector.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/FloorVector.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/FloorVector.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/FloorVector.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/FloorVector.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/FloorVector.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/FloorVector.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/FloorVector.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/FloorVector.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/FloorVector.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/FloorVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/FloorVector.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/FloorVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/FloorVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/FloorVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/FloorVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/FloorVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/FloorVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/FloorVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/FloorVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/FloorVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/FloorVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/FloorVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/FloorVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/FloorVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/FloorVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/FloorVector.html", "kind" : "case class"}, {"name" : "smile.math.Log10Matrix", "shortDescription" : "", "members_case class" : [{"label" : "array", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.Operators.matrixExpression2Array.array", "link" : "smile\/math\/Log10Matrix.html#array():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.sum", "link" : "smile\/math\/Log10Matrix.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/Log10Matrix.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/Log10Matrix.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/Log10Matrix.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/Log10Matrix.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/Log10Matrix.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/Log10Matrix.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/Log10Matrix.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/Log10Matrix.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/Log10Matrix.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/Log10Matrix.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/Log10Matrix.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/Log10Matrix.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/Log10Matrix.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/Log10Matrix.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/Log10Matrix.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/Log10Matrix.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/Log10Matrix.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colMeans", "link" : "smile\/math\/Log10Matrix.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colSums", "link" : "smile\/math\/Log10Matrix.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowMeans", "link" : "smile\/math\/Log10Matrix.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowSums", "link" : "smile\/math\/Log10Matrix.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.Operators.matrixExpression2Array.xax", "link" : "smile\/math\/Log10Matrix.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normFro", "link" : "smile\/math\/Log10Matrix.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normInf", "link" : "smile\/math\/Log10Matrix.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm", "link" : "smile\/math\/Log10Matrix.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm2", "link" : "smile\/math\/Log10Matrix.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm1", "link" : "smile\/math\/Log10Matrix.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/Log10Matrix.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/Log10Matrix.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/Log10Matrix.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/Log10Matrix.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/Log10Matrix.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/Log10Matrix.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/Log10Matrix.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/Log10Matrix.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.update", "link" : "smile\/math\/Log10Matrix.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/Log10Matrix.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/Log10Matrix.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/Log10Matrix.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/Log10Matrix.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.trace", "link" : "smile\/math\/Log10Matrix.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.diag", "link" : "smile\/math\/Log10Matrix.html#diag():Array[Double]", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.Operators.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/Log10Matrix.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.Operators.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/Log10Matrix.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/Log10Matrix.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/Log10Matrix.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/Log10Matrix.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/Log10Matrix.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.aat", "link" : "smile\/math\/Log10Matrix.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.ata", "link" : "smile\/math\/Log10Matrix.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "copy", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.copy", "link" : "smile\/math\/Log10Matrix.html#copy():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.transpose", "link" : "smile\/math\/Log10Matrix.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/Log10Matrix.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/Log10Matrix.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/Log10Matrix.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/Log10Matrix.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/Log10Matrix.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/Log10Matrix.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.set", "link" : "smile\/math\/Log10Matrix.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.Operators.matrixExpression2Array.ld", "link" : "smile\/math\/Log10Matrix.html#ld():Int", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.data", "link" : "smile\/math\/Log10Matrix.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.atbmm", "link" : "smile\/math\/Log10Matrix.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abtmm", "link" : "smile\/math\/Log10Matrix.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abmm", "link" : "smile\/math\/Log10Matrix.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/Log10Matrix.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/Log10Matrix.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atx", "link" : "smile\/math\/Log10Matrix.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/Log10Matrix.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/Log10Matrix.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.ax", "link" : "smile\/math\/Log10Matrix.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.Operators.matrixExpression2Array.get", "link" : "smile\/math\/Log10Matrix.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/Log10Matrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Log10Matrix) ⇒ Boolean, msg: ⇒ Any): Log10Matrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Log10Matrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Log10Matrix) ⇒ Boolean): Log10Matrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Log10Matrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Log10Matrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Log10Matrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Log10Matrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Log10Matrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Log10Matrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/Log10Matrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Log10Matrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/Log10Matrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.Log10Matrix.toMatrix", "link" : "smile\/math\/Log10Matrix.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.Log10Matrix.apply", "link" : "smile\/math\/Log10Matrix.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.Log10Matrix.ncols", "link" : "smile\/math\/Log10Matrix.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.Log10Matrix.nrows", "link" : "smile\/math\/Log10Matrix.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.Log10Matrix#<init>", "error" : "unsupported entity"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.Log10Matrix.A", "link" : "smile\/math\/Log10Matrix.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/Log10Matrix.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/Log10Matrix.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/Log10Matrix.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/Log10Matrix.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/Log10Matrix.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/Log10Matrix.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/Log10Matrix.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/Log10Matrix.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/Log10Matrix.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/Log10Matrix.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/Log10Matrix.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/Log10Matrix.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/Log10Matrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/Log10Matrix.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/Log10Matrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/Log10Matrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/Log10Matrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/Log10Matrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/Log10Matrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Log10Matrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Log10Matrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Log10Matrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/Log10Matrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/Log10Matrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/Log10Matrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/Log10Matrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/Log10Matrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/Log10Matrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/Log10Matrix.html", "kind" : "case class"}, {"name" : "smile.math.Log10Vector", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.Operators.vectorExpression2Array.update", "link" : "smile\/math\/Log10Vector.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/Log10Vector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Log10Vector) ⇒ Boolean, msg: ⇒ Any): Log10Vector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Log10Vector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Log10Vector) ⇒ Boolean): Log10Vector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Log10Vector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Log10Vector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Log10Vector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Log10Vector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Log10Vector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Log10Vector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/Log10Vector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Log10Vector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/Log10Vector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.Log10Vector.toArray", "link" : "smile\/math\/Log10Vector.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.Log10Vector.apply", "link" : "smile\/math\/Log10Vector.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.Log10Vector.length", "link" : "smile\/math\/Log10Vector.html#length:Int", "kind" : "def"}, {"member" : "smile.math.Log10Vector#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.Log10Vector.x", "link" : "smile\/math\/Log10Vector.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/Log10Vector.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/Log10Vector.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/Log10Vector.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/Log10Vector.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/Log10Vector.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/Log10Vector.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/Log10Vector.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/Log10Vector.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/Log10Vector.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/Log10Vector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/Log10Vector.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/Log10Vector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/Log10Vector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/Log10Vector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/Log10Vector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/Log10Vector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Log10Vector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Log10Vector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Log10Vector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/Log10Vector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/Log10Vector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/Log10Vector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/Log10Vector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/Log10Vector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/Log10Vector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/Log10Vector.html", "kind" : "case class"}, {"name" : "smile.math.Log1pMatrix", "shortDescription" : "", "members_case class" : [{"label" : "array", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.Operators.matrixExpression2Array.array", "link" : "smile\/math\/Log1pMatrix.html#array():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.sum", "link" : "smile\/math\/Log1pMatrix.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/Log1pMatrix.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/Log1pMatrix.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/Log1pMatrix.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/Log1pMatrix.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/Log1pMatrix.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/Log1pMatrix.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/Log1pMatrix.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/Log1pMatrix.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/Log1pMatrix.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/Log1pMatrix.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/Log1pMatrix.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/Log1pMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/Log1pMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/Log1pMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/Log1pMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/Log1pMatrix.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/Log1pMatrix.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colMeans", "link" : "smile\/math\/Log1pMatrix.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colSums", "link" : "smile\/math\/Log1pMatrix.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowMeans", "link" : "smile\/math\/Log1pMatrix.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowSums", "link" : "smile\/math\/Log1pMatrix.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.Operators.matrixExpression2Array.xax", "link" : "smile\/math\/Log1pMatrix.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normFro", "link" : "smile\/math\/Log1pMatrix.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normInf", "link" : "smile\/math\/Log1pMatrix.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm", "link" : "smile\/math\/Log1pMatrix.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm2", "link" : "smile\/math\/Log1pMatrix.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm1", "link" : "smile\/math\/Log1pMatrix.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/Log1pMatrix.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/Log1pMatrix.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/Log1pMatrix.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/Log1pMatrix.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/Log1pMatrix.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/Log1pMatrix.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/Log1pMatrix.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/Log1pMatrix.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.update", "link" : "smile\/math\/Log1pMatrix.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/Log1pMatrix.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/Log1pMatrix.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/Log1pMatrix.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/Log1pMatrix.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.trace", "link" : "smile\/math\/Log1pMatrix.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.diag", "link" : "smile\/math\/Log1pMatrix.html#diag():Array[Double]", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.Operators.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/Log1pMatrix.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.Operators.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/Log1pMatrix.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/Log1pMatrix.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/Log1pMatrix.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/Log1pMatrix.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/Log1pMatrix.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.aat", "link" : "smile\/math\/Log1pMatrix.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.ata", "link" : "smile\/math\/Log1pMatrix.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "copy", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.copy", "link" : "smile\/math\/Log1pMatrix.html#copy():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.transpose", "link" : "smile\/math\/Log1pMatrix.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/Log1pMatrix.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/Log1pMatrix.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/Log1pMatrix.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/Log1pMatrix.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/Log1pMatrix.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/Log1pMatrix.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.set", "link" : "smile\/math\/Log1pMatrix.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.Operators.matrixExpression2Array.ld", "link" : "smile\/math\/Log1pMatrix.html#ld():Int", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.data", "link" : "smile\/math\/Log1pMatrix.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.atbmm", "link" : "smile\/math\/Log1pMatrix.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abtmm", "link" : "smile\/math\/Log1pMatrix.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abmm", "link" : "smile\/math\/Log1pMatrix.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/Log1pMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/Log1pMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atx", "link" : "smile\/math\/Log1pMatrix.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/Log1pMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/Log1pMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.ax", "link" : "smile\/math\/Log1pMatrix.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.Operators.matrixExpression2Array.get", "link" : "smile\/math\/Log1pMatrix.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/Log1pMatrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Log1pMatrix) ⇒ Boolean, msg: ⇒ Any): Log1pMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Log1pMatrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Log1pMatrix) ⇒ Boolean): Log1pMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Log1pMatrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Log1pMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Log1pMatrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Log1pMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Log1pMatrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Log1pMatrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/Log1pMatrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Log1pMatrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/Log1pMatrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.Log1pMatrix.toMatrix", "link" : "smile\/math\/Log1pMatrix.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.Log1pMatrix.apply", "link" : "smile\/math\/Log1pMatrix.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.Log1pMatrix.ncols", "link" : "smile\/math\/Log1pMatrix.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.Log1pMatrix.nrows", "link" : "smile\/math\/Log1pMatrix.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.Log1pMatrix#<init>", "error" : "unsupported entity"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.Log1pMatrix.A", "link" : "smile\/math\/Log1pMatrix.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/Log1pMatrix.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/Log1pMatrix.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/Log1pMatrix.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/Log1pMatrix.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/Log1pMatrix.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/Log1pMatrix.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/Log1pMatrix.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/Log1pMatrix.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/Log1pMatrix.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/Log1pMatrix.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/Log1pMatrix.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/Log1pMatrix.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/Log1pMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/Log1pMatrix.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/Log1pMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/Log1pMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/Log1pMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/Log1pMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/Log1pMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Log1pMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Log1pMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Log1pMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/Log1pMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/Log1pMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/Log1pMatrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/Log1pMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/Log1pMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/Log1pMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/Log1pMatrix.html", "kind" : "case class"}, {"name" : "smile.math.Log1pVector", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.Operators.vectorExpression2Array.update", "link" : "smile\/math\/Log1pVector.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/Log1pVector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Log1pVector) ⇒ Boolean, msg: ⇒ Any): Log1pVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Log1pVector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Log1pVector) ⇒ Boolean): Log1pVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Log1pVector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Log1pVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Log1pVector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Log1pVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Log1pVector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Log1pVector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/Log1pVector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Log1pVector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/Log1pVector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.Log1pVector.toArray", "link" : "smile\/math\/Log1pVector.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.Log1pVector.apply", "link" : "smile\/math\/Log1pVector.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.Log1pVector.length", "link" : "smile\/math\/Log1pVector.html#length:Int", "kind" : "def"}, {"member" : "smile.math.Log1pVector#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.Log1pVector.x", "link" : "smile\/math\/Log1pVector.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/Log1pVector.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/Log1pVector.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/Log1pVector.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/Log1pVector.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/Log1pVector.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/Log1pVector.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/Log1pVector.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/Log1pVector.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/Log1pVector.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/Log1pVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/Log1pVector.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/Log1pVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/Log1pVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/Log1pVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/Log1pVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/Log1pVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Log1pVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Log1pVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Log1pVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/Log1pVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/Log1pVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/Log1pVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/Log1pVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/Log1pVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/Log1pVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/Log1pVector.html", "kind" : "case class"}, {"name" : "smile.math.Log2Matrix", "shortDescription" : "", "members_case class" : [{"label" : "array", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.Operators.matrixExpression2Array.array", "link" : "smile\/math\/Log2Matrix.html#array():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.sum", "link" : "smile\/math\/Log2Matrix.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/Log2Matrix.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/Log2Matrix.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/Log2Matrix.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/Log2Matrix.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/Log2Matrix.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/Log2Matrix.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/Log2Matrix.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/Log2Matrix.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/Log2Matrix.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/Log2Matrix.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/Log2Matrix.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/Log2Matrix.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/Log2Matrix.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/Log2Matrix.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/Log2Matrix.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/Log2Matrix.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/Log2Matrix.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colMeans", "link" : "smile\/math\/Log2Matrix.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colSums", "link" : "smile\/math\/Log2Matrix.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowMeans", "link" : "smile\/math\/Log2Matrix.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowSums", "link" : "smile\/math\/Log2Matrix.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.Operators.matrixExpression2Array.xax", "link" : "smile\/math\/Log2Matrix.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normFro", "link" : "smile\/math\/Log2Matrix.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normInf", "link" : "smile\/math\/Log2Matrix.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm", "link" : "smile\/math\/Log2Matrix.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm2", "link" : "smile\/math\/Log2Matrix.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm1", "link" : "smile\/math\/Log2Matrix.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/Log2Matrix.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/Log2Matrix.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/Log2Matrix.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/Log2Matrix.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/Log2Matrix.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/Log2Matrix.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/Log2Matrix.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/Log2Matrix.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.update", "link" : "smile\/math\/Log2Matrix.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/Log2Matrix.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/Log2Matrix.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/Log2Matrix.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/Log2Matrix.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.trace", "link" : "smile\/math\/Log2Matrix.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.diag", "link" : "smile\/math\/Log2Matrix.html#diag():Array[Double]", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.Operators.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/Log2Matrix.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.Operators.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/Log2Matrix.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/Log2Matrix.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/Log2Matrix.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/Log2Matrix.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/Log2Matrix.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.aat", "link" : "smile\/math\/Log2Matrix.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.ata", "link" : "smile\/math\/Log2Matrix.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "copy", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.copy", "link" : "smile\/math\/Log2Matrix.html#copy():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.transpose", "link" : "smile\/math\/Log2Matrix.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/Log2Matrix.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/Log2Matrix.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/Log2Matrix.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/Log2Matrix.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/Log2Matrix.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/Log2Matrix.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.set", "link" : "smile\/math\/Log2Matrix.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.Operators.matrixExpression2Array.ld", "link" : "smile\/math\/Log2Matrix.html#ld():Int", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.data", "link" : "smile\/math\/Log2Matrix.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.atbmm", "link" : "smile\/math\/Log2Matrix.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abtmm", "link" : "smile\/math\/Log2Matrix.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abmm", "link" : "smile\/math\/Log2Matrix.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/Log2Matrix.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/Log2Matrix.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atx", "link" : "smile\/math\/Log2Matrix.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/Log2Matrix.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/Log2Matrix.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.ax", "link" : "smile\/math\/Log2Matrix.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.Operators.matrixExpression2Array.get", "link" : "smile\/math\/Log2Matrix.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/Log2Matrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Log2Matrix) ⇒ Boolean, msg: ⇒ Any): Log2Matrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Log2Matrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Log2Matrix) ⇒ Boolean): Log2Matrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Log2Matrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Log2Matrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Log2Matrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Log2Matrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Log2Matrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Log2Matrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/Log2Matrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Log2Matrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/Log2Matrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.Log2Matrix.toMatrix", "link" : "smile\/math\/Log2Matrix.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.Log2Matrix.apply", "link" : "smile\/math\/Log2Matrix.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.Log2Matrix.ncols", "link" : "smile\/math\/Log2Matrix.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.Log2Matrix.nrows", "link" : "smile\/math\/Log2Matrix.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.Log2Matrix#<init>", "error" : "unsupported entity"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.Log2Matrix.A", "link" : "smile\/math\/Log2Matrix.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/Log2Matrix.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/Log2Matrix.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/Log2Matrix.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/Log2Matrix.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/Log2Matrix.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/Log2Matrix.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/Log2Matrix.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/Log2Matrix.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/Log2Matrix.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/Log2Matrix.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/Log2Matrix.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/Log2Matrix.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/Log2Matrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/Log2Matrix.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/Log2Matrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/Log2Matrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/Log2Matrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/Log2Matrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/Log2Matrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Log2Matrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Log2Matrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Log2Matrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/Log2Matrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/Log2Matrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/Log2Matrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/Log2Matrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/Log2Matrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/Log2Matrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/Log2Matrix.html", "kind" : "case class"}, {"name" : "smile.math.Log2Vector", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.Operators.vectorExpression2Array.update", "link" : "smile\/math\/Log2Vector.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/Log2Vector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Log2Vector) ⇒ Boolean, msg: ⇒ Any): Log2Vector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Log2Vector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Log2Vector) ⇒ Boolean): Log2Vector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Log2Vector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Log2Vector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Log2Vector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Log2Vector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Log2Vector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Log2Vector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/Log2Vector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Log2Vector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/Log2Vector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.Log2Vector.toArray", "link" : "smile\/math\/Log2Vector.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.Log2Vector.apply", "link" : "smile\/math\/Log2Vector.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.Log2Vector.length", "link" : "smile\/math\/Log2Vector.html#length:Int", "kind" : "def"}, {"member" : "smile.math.Log2Vector#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.Log2Vector.x", "link" : "smile\/math\/Log2Vector.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/Log2Vector.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/Log2Vector.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/Log2Vector.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/Log2Vector.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/Log2Vector.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/Log2Vector.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/Log2Vector.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/Log2Vector.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/Log2Vector.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/Log2Vector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/Log2Vector.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/Log2Vector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/Log2Vector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/Log2Vector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/Log2Vector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/Log2Vector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Log2Vector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Log2Vector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Log2Vector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/Log2Vector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/Log2Vector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/Log2Vector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/Log2Vector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/Log2Vector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/Log2Vector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/Log2Vector.html", "kind" : "case class"}, {"name" : "smile.math.LogMatrix", "shortDescription" : "", "members_case class" : [{"label" : "array", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.Operators.matrixExpression2Array.array", "link" : "smile\/math\/LogMatrix.html#array():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.sum", "link" : "smile\/math\/LogMatrix.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/LogMatrix.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/LogMatrix.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/LogMatrix.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/LogMatrix.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/LogMatrix.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/LogMatrix.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/LogMatrix.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/LogMatrix.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/LogMatrix.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/LogMatrix.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/LogMatrix.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/LogMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/LogMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/LogMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/LogMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/LogMatrix.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/LogMatrix.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colMeans", "link" : "smile\/math\/LogMatrix.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colSums", "link" : "smile\/math\/LogMatrix.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowMeans", "link" : "smile\/math\/LogMatrix.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowSums", "link" : "smile\/math\/LogMatrix.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.Operators.matrixExpression2Array.xax", "link" : "smile\/math\/LogMatrix.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normFro", "link" : "smile\/math\/LogMatrix.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normInf", "link" : "smile\/math\/LogMatrix.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm", "link" : "smile\/math\/LogMatrix.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm2", "link" : "smile\/math\/LogMatrix.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm1", "link" : "smile\/math\/LogMatrix.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/LogMatrix.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/LogMatrix.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/LogMatrix.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/LogMatrix.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/LogMatrix.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/LogMatrix.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/LogMatrix.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/LogMatrix.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.update", "link" : "smile\/math\/LogMatrix.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/LogMatrix.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/LogMatrix.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/LogMatrix.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/LogMatrix.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.trace", "link" : "smile\/math\/LogMatrix.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.diag", "link" : "smile\/math\/LogMatrix.html#diag():Array[Double]", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.Operators.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/LogMatrix.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.Operators.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/LogMatrix.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/LogMatrix.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/LogMatrix.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/LogMatrix.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/LogMatrix.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.aat", "link" : "smile\/math\/LogMatrix.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.ata", "link" : "smile\/math\/LogMatrix.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "copy", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.copy", "link" : "smile\/math\/LogMatrix.html#copy():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.transpose", "link" : "smile\/math\/LogMatrix.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/LogMatrix.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/LogMatrix.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/LogMatrix.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/LogMatrix.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/LogMatrix.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/LogMatrix.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.set", "link" : "smile\/math\/LogMatrix.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.Operators.matrixExpression2Array.ld", "link" : "smile\/math\/LogMatrix.html#ld():Int", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.data", "link" : "smile\/math\/LogMatrix.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.atbmm", "link" : "smile\/math\/LogMatrix.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abtmm", "link" : "smile\/math\/LogMatrix.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abmm", "link" : "smile\/math\/LogMatrix.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/LogMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/LogMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atx", "link" : "smile\/math\/LogMatrix.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/LogMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/LogMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.ax", "link" : "smile\/math\/LogMatrix.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.Operators.matrixExpression2Array.get", "link" : "smile\/math\/LogMatrix.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/LogMatrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (LogMatrix) ⇒ Boolean, msg: ⇒ Any): LogMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/LogMatrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (LogMatrix) ⇒ Boolean): LogMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/LogMatrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): LogMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/LogMatrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): LogMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/LogMatrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (LogMatrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/LogMatrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (LogMatrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/LogMatrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.LogMatrix.toMatrix", "link" : "smile\/math\/LogMatrix.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.LogMatrix.apply", "link" : "smile\/math\/LogMatrix.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.LogMatrix.ncols", "link" : "smile\/math\/LogMatrix.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.LogMatrix.nrows", "link" : "smile\/math\/LogMatrix.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.LogMatrix#<init>", "error" : "unsupported entity"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.LogMatrix.A", "link" : "smile\/math\/LogMatrix.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/LogMatrix.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/LogMatrix.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/LogMatrix.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/LogMatrix.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/LogMatrix.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/LogMatrix.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/LogMatrix.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/LogMatrix.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/LogMatrix.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/LogMatrix.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/LogMatrix.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/LogMatrix.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/LogMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/LogMatrix.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/LogMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/LogMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/LogMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/LogMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/LogMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/LogMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/LogMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/LogMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/LogMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/LogMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/LogMatrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/LogMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/LogMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/LogMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/LogMatrix.html", "kind" : "case class"}, {"name" : "smile.math.LogVector", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.Operators.vectorExpression2Array.update", "link" : "smile\/math\/LogVector.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/LogVector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (LogVector) ⇒ Boolean, msg: ⇒ Any): LogVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/LogVector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (LogVector) ⇒ Boolean): LogVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/LogVector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): LogVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/LogVector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): LogVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/LogVector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (LogVector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/LogVector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (LogVector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/LogVector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.LogVector.toArray", "link" : "smile\/math\/LogVector.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.LogVector.apply", "link" : "smile\/math\/LogVector.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.LogVector.length", "link" : "smile\/math\/LogVector.html#length:Int", "kind" : "def"}, {"member" : "smile.math.LogVector#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.LogVector.x", "link" : "smile\/math\/LogVector.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/LogVector.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/LogVector.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/LogVector.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/LogVector.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/LogVector.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/LogVector.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/LogVector.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/LogVector.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/LogVector.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/LogVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/LogVector.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/LogVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/LogVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/LogVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/LogVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/LogVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/LogVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/LogVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/LogVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/LogVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/LogVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/LogVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/LogVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/LogVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/LogVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/LogVector.html", "kind" : "case class"}, {"name" : "smile.math.MatrixAddMatrix", "shortDescription" : "", "members_case class" : [{"label" : "array", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.Operators.matrixExpression2Array.array", "link" : "smile\/math\/MatrixAddMatrix.html#array():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.sum", "link" : "smile\/math\/MatrixAddMatrix.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/MatrixAddMatrix.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixAddMatrix.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixAddMatrix.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixAddMatrix.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixAddMatrix.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixAddMatrix.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixAddMatrix.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixAddMatrix.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixAddMatrix.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixAddMatrix.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixAddMatrix.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixAddMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixAddMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixAddMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixAddMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixAddMatrix.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixAddMatrix.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colMeans", "link" : "smile\/math\/MatrixAddMatrix.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colSums", "link" : "smile\/math\/MatrixAddMatrix.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowMeans", "link" : "smile\/math\/MatrixAddMatrix.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowSums", "link" : "smile\/math\/MatrixAddMatrix.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.Operators.matrixExpression2Array.xax", "link" : "smile\/math\/MatrixAddMatrix.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normFro", "link" : "smile\/math\/MatrixAddMatrix.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normInf", "link" : "smile\/math\/MatrixAddMatrix.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm", "link" : "smile\/math\/MatrixAddMatrix.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm2", "link" : "smile\/math\/MatrixAddMatrix.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm1", "link" : "smile\/math\/MatrixAddMatrix.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/MatrixAddMatrix.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/MatrixAddMatrix.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/MatrixAddMatrix.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixAddMatrix.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixAddMatrix.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/MatrixAddMatrix.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/MatrixAddMatrix.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/MatrixAddMatrix.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.update", "link" : "smile\/math\/MatrixAddMatrix.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixAddMatrix.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixAddMatrix.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixAddMatrix.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixAddMatrix.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.trace", "link" : "smile\/math\/MatrixAddMatrix.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.diag", "link" : "smile\/math\/MatrixAddMatrix.html#diag():Array[Double]", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.Operators.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/MatrixAddMatrix.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.Operators.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/MatrixAddMatrix.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixAddMatrix.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixAddMatrix.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixAddMatrix.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixAddMatrix.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.aat", "link" : "smile\/math\/MatrixAddMatrix.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.ata", "link" : "smile\/math\/MatrixAddMatrix.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "copy", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.copy", "link" : "smile\/math\/MatrixAddMatrix.html#copy():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.transpose", "link" : "smile\/math\/MatrixAddMatrix.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/MatrixAddMatrix.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixAddMatrix.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixAddMatrix.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/MatrixAddMatrix.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/MatrixAddMatrix.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/MatrixAddMatrix.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.set", "link" : "smile\/math\/MatrixAddMatrix.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.Operators.matrixExpression2Array.ld", "link" : "smile\/math\/MatrixAddMatrix.html#ld():Int", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.data", "link" : "smile\/math\/MatrixAddMatrix.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.atbmm", "link" : "smile\/math\/MatrixAddMatrix.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abtmm", "link" : "smile\/math\/MatrixAddMatrix.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abmm", "link" : "smile\/math\/MatrixAddMatrix.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/MatrixAddMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/MatrixAddMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atx", "link" : "smile\/math\/MatrixAddMatrix.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/MatrixAddMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/MatrixAddMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.ax", "link" : "smile\/math\/MatrixAddMatrix.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.Operators.matrixExpression2Array.get", "link" : "smile\/math\/MatrixAddMatrix.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/MatrixAddMatrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixAddMatrix) ⇒ Boolean, msg: ⇒ Any): MatrixAddMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixAddMatrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixAddMatrix) ⇒ Boolean): MatrixAddMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixAddMatrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): MatrixAddMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixAddMatrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): MatrixAddMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixAddMatrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (MatrixAddMatrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/MatrixAddMatrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (MatrixAddMatrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/MatrixAddMatrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.MatrixAddMatrix.toMatrix", "link" : "smile\/math\/MatrixAddMatrix.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.MatrixAddMatrix.apply", "link" : "smile\/math\/MatrixAddMatrix.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.MatrixAddMatrix.ncols", "link" : "smile\/math\/MatrixAddMatrix.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.MatrixAddMatrix.nrows", "link" : "smile\/math\/MatrixAddMatrix.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.MatrixAddMatrix#<init>", "error" : "unsupported entity"}, {"label" : "B", "tail" : ": MatrixExpression", "member" : "smile.math.MatrixAddMatrix.B", "link" : "smile\/math\/MatrixAddMatrix.html#B:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.MatrixAddMatrix.A", "link" : "smile\/math\/MatrixAddMatrix.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/MatrixAddMatrix.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixAddMatrix.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/MatrixAddMatrix.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/MatrixAddMatrix.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/MatrixAddMatrix.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixAddMatrix.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/MatrixAddMatrix.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/MatrixAddMatrix.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixAddMatrix.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/MatrixAddMatrix.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/MatrixAddMatrix.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/MatrixAddMatrix.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/MatrixAddMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/MatrixAddMatrix.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/MatrixAddMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/MatrixAddMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/MatrixAddMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/MatrixAddMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/MatrixAddMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixAddMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixAddMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixAddMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/MatrixAddMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/MatrixAddMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/MatrixAddMatrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/MatrixAddMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/MatrixAddMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/MatrixAddMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/MatrixAddMatrix.html", "kind" : "case class"}, {"name" : "smile.math.MatrixAddValue", "shortDescription" : "", "members_case class" : [{"label" : "array", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.Operators.matrixExpression2Array.array", "link" : "smile\/math\/MatrixAddValue.html#array():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.sum", "link" : "smile\/math\/MatrixAddValue.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/MatrixAddValue.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixAddValue.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixAddValue.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixAddValue.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixAddValue.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixAddValue.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixAddValue.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixAddValue.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixAddValue.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixAddValue.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixAddValue.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixAddValue.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixAddValue.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixAddValue.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixAddValue.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixAddValue.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixAddValue.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colMeans", "link" : "smile\/math\/MatrixAddValue.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colSums", "link" : "smile\/math\/MatrixAddValue.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowMeans", "link" : "smile\/math\/MatrixAddValue.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowSums", "link" : "smile\/math\/MatrixAddValue.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.Operators.matrixExpression2Array.xax", "link" : "smile\/math\/MatrixAddValue.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normFro", "link" : "smile\/math\/MatrixAddValue.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normInf", "link" : "smile\/math\/MatrixAddValue.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm", "link" : "smile\/math\/MatrixAddValue.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm2", "link" : "smile\/math\/MatrixAddValue.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm1", "link" : "smile\/math\/MatrixAddValue.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/MatrixAddValue.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/MatrixAddValue.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/MatrixAddValue.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixAddValue.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixAddValue.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/MatrixAddValue.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/MatrixAddValue.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/MatrixAddValue.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.update", "link" : "smile\/math\/MatrixAddValue.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixAddValue.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixAddValue.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixAddValue.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixAddValue.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.trace", "link" : "smile\/math\/MatrixAddValue.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.diag", "link" : "smile\/math\/MatrixAddValue.html#diag():Array[Double]", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.Operators.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/MatrixAddValue.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.Operators.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/MatrixAddValue.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixAddValue.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixAddValue.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixAddValue.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixAddValue.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.aat", "link" : "smile\/math\/MatrixAddValue.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.ata", "link" : "smile\/math\/MatrixAddValue.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "copy", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.copy", "link" : "smile\/math\/MatrixAddValue.html#copy():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.transpose", "link" : "smile\/math\/MatrixAddValue.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/MatrixAddValue.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixAddValue.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixAddValue.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/MatrixAddValue.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/MatrixAddValue.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/MatrixAddValue.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.set", "link" : "smile\/math\/MatrixAddValue.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.Operators.matrixExpression2Array.ld", "link" : "smile\/math\/MatrixAddValue.html#ld():Int", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.data", "link" : "smile\/math\/MatrixAddValue.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.atbmm", "link" : "smile\/math\/MatrixAddValue.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abtmm", "link" : "smile\/math\/MatrixAddValue.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abmm", "link" : "smile\/math\/MatrixAddValue.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/MatrixAddValue.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/MatrixAddValue.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atx", "link" : "smile\/math\/MatrixAddValue.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/MatrixAddValue.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/MatrixAddValue.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.ax", "link" : "smile\/math\/MatrixAddValue.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.Operators.matrixExpression2Array.get", "link" : "smile\/math\/MatrixAddValue.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/MatrixAddValue.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixAddValue) ⇒ Boolean, msg: ⇒ Any): MatrixAddValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixAddValue.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixAddValue) ⇒ Boolean): MatrixAddValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixAddValue.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): MatrixAddValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixAddValue.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): MatrixAddValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixAddValue.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (MatrixAddValue, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/MatrixAddValue.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (MatrixAddValue, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/MatrixAddValue.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.MatrixAddValue.toMatrix", "link" : "smile\/math\/MatrixAddValue.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.MatrixAddValue.apply", "link" : "smile\/math\/MatrixAddValue.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.MatrixAddValue.ncols", "link" : "smile\/math\/MatrixAddValue.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.MatrixAddValue.nrows", "link" : "smile\/math\/MatrixAddValue.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.MatrixAddValue#<init>", "error" : "unsupported entity"}, {"label" : "y", "tail" : ": Double", "member" : "smile.math.MatrixAddValue.y", "link" : "smile\/math\/MatrixAddValue.html#y:Double", "kind" : "val"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.MatrixAddValue.A", "link" : "smile\/math\/MatrixAddValue.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/MatrixAddValue.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixAddValue.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/MatrixAddValue.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/MatrixAddValue.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/MatrixAddValue.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixAddValue.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/MatrixAddValue.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/MatrixAddValue.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixAddValue.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/MatrixAddValue.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/MatrixAddValue.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/MatrixAddValue.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/MatrixAddValue.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/MatrixAddValue.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/MatrixAddValue.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/MatrixAddValue.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/MatrixAddValue.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/MatrixAddValue.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/MatrixAddValue.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixAddValue.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixAddValue.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixAddValue.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/MatrixAddValue.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/MatrixAddValue.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/MatrixAddValue.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/MatrixAddValue.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/MatrixAddValue.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/MatrixAddValue.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/MatrixAddValue.html", "kind" : "case class"}, {"name" : "smile.math.MatrixDivMatrix", "shortDescription" : "", "members_case class" : [{"label" : "array", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.Operators.matrixExpression2Array.array", "link" : "smile\/math\/MatrixDivMatrix.html#array():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.sum", "link" : "smile\/math\/MatrixDivMatrix.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/MatrixDivMatrix.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixDivMatrix.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixDivMatrix.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixDivMatrix.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixDivMatrix.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixDivMatrix.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixDivMatrix.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixDivMatrix.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixDivMatrix.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixDivMatrix.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixDivMatrix.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixDivMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixDivMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixDivMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixDivMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixDivMatrix.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixDivMatrix.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colMeans", "link" : "smile\/math\/MatrixDivMatrix.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colSums", "link" : "smile\/math\/MatrixDivMatrix.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowMeans", "link" : "smile\/math\/MatrixDivMatrix.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowSums", "link" : "smile\/math\/MatrixDivMatrix.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.Operators.matrixExpression2Array.xax", "link" : "smile\/math\/MatrixDivMatrix.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normFro", "link" : "smile\/math\/MatrixDivMatrix.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normInf", "link" : "smile\/math\/MatrixDivMatrix.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm", "link" : "smile\/math\/MatrixDivMatrix.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm2", "link" : "smile\/math\/MatrixDivMatrix.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm1", "link" : "smile\/math\/MatrixDivMatrix.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/MatrixDivMatrix.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/MatrixDivMatrix.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/MatrixDivMatrix.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixDivMatrix.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixDivMatrix.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/MatrixDivMatrix.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/MatrixDivMatrix.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/MatrixDivMatrix.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.update", "link" : "smile\/math\/MatrixDivMatrix.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixDivMatrix.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixDivMatrix.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixDivMatrix.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixDivMatrix.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.trace", "link" : "smile\/math\/MatrixDivMatrix.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.diag", "link" : "smile\/math\/MatrixDivMatrix.html#diag():Array[Double]", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.Operators.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/MatrixDivMatrix.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.Operators.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/MatrixDivMatrix.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixDivMatrix.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixDivMatrix.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixDivMatrix.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixDivMatrix.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.aat", "link" : "smile\/math\/MatrixDivMatrix.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.ata", "link" : "smile\/math\/MatrixDivMatrix.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "copy", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.copy", "link" : "smile\/math\/MatrixDivMatrix.html#copy():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.transpose", "link" : "smile\/math\/MatrixDivMatrix.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/MatrixDivMatrix.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixDivMatrix.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixDivMatrix.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/MatrixDivMatrix.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/MatrixDivMatrix.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/MatrixDivMatrix.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.set", "link" : "smile\/math\/MatrixDivMatrix.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.Operators.matrixExpression2Array.ld", "link" : "smile\/math\/MatrixDivMatrix.html#ld():Int", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.data", "link" : "smile\/math\/MatrixDivMatrix.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.atbmm", "link" : "smile\/math\/MatrixDivMatrix.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abtmm", "link" : "smile\/math\/MatrixDivMatrix.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abmm", "link" : "smile\/math\/MatrixDivMatrix.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/MatrixDivMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/MatrixDivMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atx", "link" : "smile\/math\/MatrixDivMatrix.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/MatrixDivMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/MatrixDivMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.ax", "link" : "smile\/math\/MatrixDivMatrix.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.Operators.matrixExpression2Array.get", "link" : "smile\/math\/MatrixDivMatrix.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/MatrixDivMatrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixDivMatrix) ⇒ Boolean, msg: ⇒ Any): MatrixDivMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixDivMatrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixDivMatrix) ⇒ Boolean): MatrixDivMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixDivMatrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): MatrixDivMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixDivMatrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): MatrixDivMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixDivMatrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (MatrixDivMatrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/MatrixDivMatrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (MatrixDivMatrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/MatrixDivMatrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.MatrixDivMatrix.toMatrix", "link" : "smile\/math\/MatrixDivMatrix.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.MatrixDivMatrix.apply", "link" : "smile\/math\/MatrixDivMatrix.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.MatrixDivMatrix.ncols", "link" : "smile\/math\/MatrixDivMatrix.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.MatrixDivMatrix.nrows", "link" : "smile\/math\/MatrixDivMatrix.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.MatrixDivMatrix#<init>", "error" : "unsupported entity"}, {"label" : "B", "tail" : ": MatrixExpression", "member" : "smile.math.MatrixDivMatrix.B", "link" : "smile\/math\/MatrixDivMatrix.html#B:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.MatrixDivMatrix.A", "link" : "smile\/math\/MatrixDivMatrix.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/MatrixDivMatrix.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixDivMatrix.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/MatrixDivMatrix.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/MatrixDivMatrix.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/MatrixDivMatrix.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixDivMatrix.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/MatrixDivMatrix.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/MatrixDivMatrix.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixDivMatrix.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/MatrixDivMatrix.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/MatrixDivMatrix.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/MatrixDivMatrix.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/MatrixDivMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/MatrixDivMatrix.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/MatrixDivMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/MatrixDivMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/MatrixDivMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/MatrixDivMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/MatrixDivMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixDivMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixDivMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixDivMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/MatrixDivMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/MatrixDivMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/MatrixDivMatrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/MatrixDivMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/MatrixDivMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/MatrixDivMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/MatrixDivMatrix.html", "kind" : "case class"}, {"name" : "smile.math.MatrixDivValue", "shortDescription" : "", "members_case class" : [{"label" : "array", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.Operators.matrixExpression2Array.array", "link" : "smile\/math\/MatrixDivValue.html#array():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.sum", "link" : "smile\/math\/MatrixDivValue.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/MatrixDivValue.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixDivValue.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixDivValue.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixDivValue.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixDivValue.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixDivValue.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixDivValue.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixDivValue.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixDivValue.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixDivValue.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixDivValue.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixDivValue.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixDivValue.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixDivValue.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixDivValue.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixDivValue.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixDivValue.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colMeans", "link" : "smile\/math\/MatrixDivValue.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colSums", "link" : "smile\/math\/MatrixDivValue.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowMeans", "link" : "smile\/math\/MatrixDivValue.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowSums", "link" : "smile\/math\/MatrixDivValue.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.Operators.matrixExpression2Array.xax", "link" : "smile\/math\/MatrixDivValue.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normFro", "link" : "smile\/math\/MatrixDivValue.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normInf", "link" : "smile\/math\/MatrixDivValue.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm", "link" : "smile\/math\/MatrixDivValue.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm2", "link" : "smile\/math\/MatrixDivValue.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm1", "link" : "smile\/math\/MatrixDivValue.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/MatrixDivValue.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/MatrixDivValue.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/MatrixDivValue.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixDivValue.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixDivValue.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/MatrixDivValue.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/MatrixDivValue.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/MatrixDivValue.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.update", "link" : "smile\/math\/MatrixDivValue.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixDivValue.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixDivValue.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixDivValue.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixDivValue.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.trace", "link" : "smile\/math\/MatrixDivValue.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.diag", "link" : "smile\/math\/MatrixDivValue.html#diag():Array[Double]", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.Operators.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/MatrixDivValue.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.Operators.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/MatrixDivValue.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixDivValue.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixDivValue.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixDivValue.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixDivValue.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.aat", "link" : "smile\/math\/MatrixDivValue.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.ata", "link" : "smile\/math\/MatrixDivValue.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "copy", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.copy", "link" : "smile\/math\/MatrixDivValue.html#copy():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.transpose", "link" : "smile\/math\/MatrixDivValue.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/MatrixDivValue.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixDivValue.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixDivValue.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/MatrixDivValue.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/MatrixDivValue.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/MatrixDivValue.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.set", "link" : "smile\/math\/MatrixDivValue.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.Operators.matrixExpression2Array.ld", "link" : "smile\/math\/MatrixDivValue.html#ld():Int", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.data", "link" : "smile\/math\/MatrixDivValue.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.atbmm", "link" : "smile\/math\/MatrixDivValue.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abtmm", "link" : "smile\/math\/MatrixDivValue.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abmm", "link" : "smile\/math\/MatrixDivValue.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/MatrixDivValue.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/MatrixDivValue.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atx", "link" : "smile\/math\/MatrixDivValue.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/MatrixDivValue.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/MatrixDivValue.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.ax", "link" : "smile\/math\/MatrixDivValue.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.Operators.matrixExpression2Array.get", "link" : "smile\/math\/MatrixDivValue.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/MatrixDivValue.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixDivValue) ⇒ Boolean, msg: ⇒ Any): MatrixDivValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixDivValue.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixDivValue) ⇒ Boolean): MatrixDivValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixDivValue.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): MatrixDivValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixDivValue.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): MatrixDivValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixDivValue.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (MatrixDivValue, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/MatrixDivValue.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (MatrixDivValue, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/MatrixDivValue.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.MatrixDivValue.toMatrix", "link" : "smile\/math\/MatrixDivValue.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.MatrixDivValue.apply", "link" : "smile\/math\/MatrixDivValue.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.MatrixDivValue.ncols", "link" : "smile\/math\/MatrixDivValue.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.MatrixDivValue.nrows", "link" : "smile\/math\/MatrixDivValue.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.MatrixDivValue#<init>", "error" : "unsupported entity"}, {"label" : "y", "tail" : ": Double", "member" : "smile.math.MatrixDivValue.y", "link" : "smile\/math\/MatrixDivValue.html#y:Double", "kind" : "val"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.MatrixDivValue.A", "link" : "smile\/math\/MatrixDivValue.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/MatrixDivValue.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixDivValue.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/MatrixDivValue.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/MatrixDivValue.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/MatrixDivValue.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixDivValue.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/MatrixDivValue.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/MatrixDivValue.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixDivValue.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/MatrixDivValue.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/MatrixDivValue.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/MatrixDivValue.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/MatrixDivValue.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/MatrixDivValue.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/MatrixDivValue.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/MatrixDivValue.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/MatrixDivValue.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/MatrixDivValue.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/MatrixDivValue.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixDivValue.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixDivValue.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixDivValue.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/MatrixDivValue.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/MatrixDivValue.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/MatrixDivValue.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/MatrixDivValue.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/MatrixDivValue.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/MatrixDivValue.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/MatrixDivValue.html", "kind" : "case class"}, {"name" : "smile.math.MatrixExpression", "members_trait" : [{"label" : "array", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.Operators.matrixExpression2Array.array", "link" : "smile\/math\/MatrixExpression.html#array():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.sum", "link" : "smile\/math\/MatrixExpression.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/MatrixExpression.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixExpression.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixExpression.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixExpression.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixExpression.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixExpression.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixExpression.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixExpression.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixExpression.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixExpression.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixExpression.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixExpression.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixExpression.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixExpression.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixExpression.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixExpression.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixExpression.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colMeans", "link" : "smile\/math\/MatrixExpression.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colSums", "link" : "smile\/math\/MatrixExpression.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowMeans", "link" : "smile\/math\/MatrixExpression.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowSums", "link" : "smile\/math\/MatrixExpression.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.Operators.matrixExpression2Array.xax", "link" : "smile\/math\/MatrixExpression.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normFro", "link" : "smile\/math\/MatrixExpression.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normInf", "link" : "smile\/math\/MatrixExpression.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm", "link" : "smile\/math\/MatrixExpression.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm2", "link" : "smile\/math\/MatrixExpression.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm1", "link" : "smile\/math\/MatrixExpression.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/MatrixExpression.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/MatrixExpression.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/MatrixExpression.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixExpression.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixExpression.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/MatrixExpression.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/MatrixExpression.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/MatrixExpression.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.update", "link" : "smile\/math\/MatrixExpression.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixExpression.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixExpression.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixExpression.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixExpression.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.trace", "link" : "smile\/math\/MatrixExpression.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.diag", "link" : "smile\/math\/MatrixExpression.html#diag():Array[Double]", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.Operators.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/MatrixExpression.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.Operators.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/MatrixExpression.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixExpression.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixExpression.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixExpression.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixExpression.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.aat", "link" : "smile\/math\/MatrixExpression.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.ata", "link" : "smile\/math\/MatrixExpression.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "copy", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.copy", "link" : "smile\/math\/MatrixExpression.html#copy():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.transpose", "link" : "smile\/math\/MatrixExpression.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/MatrixExpression.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixExpression.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixExpression.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/MatrixExpression.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/MatrixExpression.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/MatrixExpression.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.set", "link" : "smile\/math\/MatrixExpression.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.Operators.matrixExpression2Array.ld", "link" : "smile\/math\/MatrixExpression.html#ld():Int", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.data", "link" : "smile\/math\/MatrixExpression.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.atbmm", "link" : "smile\/math\/MatrixExpression.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abtmm", "link" : "smile\/math\/MatrixExpression.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abmm", "link" : "smile\/math\/MatrixExpression.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/MatrixExpression.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/MatrixExpression.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atx", "link" : "smile\/math\/MatrixExpression.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/MatrixExpression.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/MatrixExpression.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.ax", "link" : "smile\/math\/MatrixExpression.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.Operators.matrixExpression2Array.get", "link" : "smile\/math\/MatrixExpression.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/MatrixExpression.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixExpression) ⇒ Boolean, msg: ⇒ Any): MatrixExpression", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixExpression.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixExpression) ⇒ Boolean): MatrixExpression", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixExpression.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): MatrixExpression", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixExpression.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): MatrixExpression", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixExpression.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (MatrixExpression, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/MatrixExpression.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (MatrixExpression, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/MatrixExpression.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/MatrixExpression.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixExpression.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/MatrixExpression.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/MatrixExpression.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/MatrixExpression.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixExpression.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/MatrixExpression.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/MatrixExpression.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixExpression.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/MatrixExpression.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/MatrixExpression.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/MatrixExpression.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/MatrixExpression.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/MatrixExpression.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/MatrixExpression.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/MatrixExpression.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/MatrixExpression.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/MatrixExpression.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/MatrixExpression.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixExpression.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixExpression.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixExpression.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/MatrixExpression.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/MatrixExpression.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/MatrixExpression.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/math\/MatrixExpression.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/math\/MatrixExpression.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/MatrixExpression.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/MatrixExpression.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/MatrixExpression.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toMatrix", "tail" : "(): DenseMatrix", "member" : "smile.math.MatrixExpression.toMatrix", "link" : "smile\/math\/MatrixExpression.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.MatrixExpression.apply", "link" : "smile\/math\/MatrixExpression.html#apply(i:Int,j:Int):Double", "kind" : "abstract def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.MatrixExpression.ncols", "link" : "smile\/math\/MatrixExpression.html#ncols:Int", "kind" : "abstract def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.MatrixExpression.nrows", "link" : "smile\/math\/MatrixExpression.html#nrows:Int", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "smile\/math\/MatrixExpression.html", "kind" : "trait"}, {"name" : "smile.math.MatrixLift", "shortDescription" : "", "members_case class" : [{"label" : "array", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.Operators.matrixExpression2Array.array", "link" : "smile\/math\/MatrixLift.html#array():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.sum", "link" : "smile\/math\/MatrixLift.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/MatrixLift.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixLift.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixLift.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixLift.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixLift.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixLift.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixLift.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixLift.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixLift.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixLift.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixLift.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixLift.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixLift.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixLift.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixLift.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixLift.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixLift.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colMeans", "link" : "smile\/math\/MatrixLift.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colSums", "link" : "smile\/math\/MatrixLift.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowMeans", "link" : "smile\/math\/MatrixLift.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowSums", "link" : "smile\/math\/MatrixLift.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.Operators.matrixExpression2Array.xax", "link" : "smile\/math\/MatrixLift.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normFro", "link" : "smile\/math\/MatrixLift.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normInf", "link" : "smile\/math\/MatrixLift.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm", "link" : "smile\/math\/MatrixLift.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm2", "link" : "smile\/math\/MatrixLift.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm1", "link" : "smile\/math\/MatrixLift.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/MatrixLift.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/MatrixLift.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/MatrixLift.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixLift.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixLift.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/MatrixLift.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/MatrixLift.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/MatrixLift.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.update", "link" : "smile\/math\/MatrixLift.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixLift.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixLift.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixLift.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixLift.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.trace", "link" : "smile\/math\/MatrixLift.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.diag", "link" : "smile\/math\/MatrixLift.html#diag():Array[Double]", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.Operators.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/MatrixLift.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.Operators.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/MatrixLift.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixLift.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixLift.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixLift.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixLift.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.aat", "link" : "smile\/math\/MatrixLift.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.ata", "link" : "smile\/math\/MatrixLift.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "copy", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.copy", "link" : "smile\/math\/MatrixLift.html#copy():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.transpose", "link" : "smile\/math\/MatrixLift.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/MatrixLift.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixLift.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixLift.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/MatrixLift.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/MatrixLift.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/MatrixLift.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.set", "link" : "smile\/math\/MatrixLift.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.Operators.matrixExpression2Array.ld", "link" : "smile\/math\/MatrixLift.html#ld():Int", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.data", "link" : "smile\/math\/MatrixLift.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.atbmm", "link" : "smile\/math\/MatrixLift.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abtmm", "link" : "smile\/math\/MatrixLift.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abmm", "link" : "smile\/math\/MatrixLift.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/MatrixLift.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/MatrixLift.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atx", "link" : "smile\/math\/MatrixLift.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/MatrixLift.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/MatrixLift.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.ax", "link" : "smile\/math\/MatrixLift.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.Operators.matrixExpression2Array.get", "link" : "smile\/math\/MatrixLift.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/MatrixLift.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixLift) ⇒ Boolean, msg: ⇒ Any): MatrixLift", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixLift.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixLift) ⇒ Boolean): MatrixLift", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixLift.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): MatrixLift", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixLift.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): MatrixLift", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixLift.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (MatrixLift, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/MatrixLift.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (MatrixLift, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/MatrixLift.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : "(): DenseMatrix", "member" : "smile.math.MatrixLift.toMatrix", "link" : "smile\/math\/MatrixLift.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.MatrixLift.apply", "link" : "smile\/math\/MatrixLift.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.MatrixLift.ncols", "link" : "smile\/math\/MatrixLift.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.MatrixLift.nrows", "link" : "smile\/math\/MatrixLift.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.MatrixLift#<init>", "error" : "unsupported entity"}, {"label" : "A", "tail" : ": DenseMatrix", "member" : "smile.math.MatrixLift.A", "link" : "smile\/math\/MatrixLift.html#A:smile.math.matrix.DenseMatrix", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/MatrixLift.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixLift.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/MatrixLift.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/MatrixLift.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/MatrixLift.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixLift.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/MatrixLift.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/MatrixLift.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixLift.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/MatrixLift.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/MatrixLift.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/MatrixLift.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/MatrixLift.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/MatrixLift.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/MatrixLift.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/MatrixLift.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/MatrixLift.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/MatrixLift.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/MatrixLift.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixLift.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixLift.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixLift.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/MatrixLift.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/MatrixLift.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/MatrixLift.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/MatrixLift.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/MatrixLift.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/MatrixLift.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/MatrixLift.html", "kind" : "case class"}, {"name" : "smile.math.MatrixMulMatrix", "shortDescription" : "", "members_case class" : [{"label" : "array", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.Operators.matrixExpression2Array.array", "link" : "smile\/math\/MatrixMulMatrix.html#array():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.sum", "link" : "smile\/math\/MatrixMulMatrix.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/MatrixMulMatrix.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixMulMatrix.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixMulMatrix.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixMulMatrix.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixMulMatrix.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixMulMatrix.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixMulMatrix.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixMulMatrix.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixMulMatrix.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixMulMatrix.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixMulMatrix.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixMulMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixMulMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixMulMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixMulMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixMulMatrix.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixMulMatrix.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colMeans", "link" : "smile\/math\/MatrixMulMatrix.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colSums", "link" : "smile\/math\/MatrixMulMatrix.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowMeans", "link" : "smile\/math\/MatrixMulMatrix.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowSums", "link" : "smile\/math\/MatrixMulMatrix.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.Operators.matrixExpression2Array.xax", "link" : "smile\/math\/MatrixMulMatrix.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normFro", "link" : "smile\/math\/MatrixMulMatrix.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normInf", "link" : "smile\/math\/MatrixMulMatrix.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm", "link" : "smile\/math\/MatrixMulMatrix.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm2", "link" : "smile\/math\/MatrixMulMatrix.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm1", "link" : "smile\/math\/MatrixMulMatrix.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/MatrixMulMatrix.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/MatrixMulMatrix.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/MatrixMulMatrix.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixMulMatrix.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixMulMatrix.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/MatrixMulMatrix.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/MatrixMulMatrix.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/MatrixMulMatrix.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.update", "link" : "smile\/math\/MatrixMulMatrix.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixMulMatrix.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixMulMatrix.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixMulMatrix.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixMulMatrix.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.trace", "link" : "smile\/math\/MatrixMulMatrix.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.diag", "link" : "smile\/math\/MatrixMulMatrix.html#diag():Array[Double]", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.Operators.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/MatrixMulMatrix.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.Operators.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/MatrixMulMatrix.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixMulMatrix.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixMulMatrix.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixMulMatrix.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixMulMatrix.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.aat", "link" : "smile\/math\/MatrixMulMatrix.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.ata", "link" : "smile\/math\/MatrixMulMatrix.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "copy", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.copy", "link" : "smile\/math\/MatrixMulMatrix.html#copy():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.transpose", "link" : "smile\/math\/MatrixMulMatrix.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/MatrixMulMatrix.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixMulMatrix.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixMulMatrix.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/MatrixMulMatrix.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/MatrixMulMatrix.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/MatrixMulMatrix.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.set", "link" : "smile\/math\/MatrixMulMatrix.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.Operators.matrixExpression2Array.ld", "link" : "smile\/math\/MatrixMulMatrix.html#ld():Int", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.data", "link" : "smile\/math\/MatrixMulMatrix.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.atbmm", "link" : "smile\/math\/MatrixMulMatrix.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abtmm", "link" : "smile\/math\/MatrixMulMatrix.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abmm", "link" : "smile\/math\/MatrixMulMatrix.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/MatrixMulMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/MatrixMulMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atx", "link" : "smile\/math\/MatrixMulMatrix.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/MatrixMulMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/MatrixMulMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.ax", "link" : "smile\/math\/MatrixMulMatrix.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.Operators.matrixExpression2Array.get", "link" : "smile\/math\/MatrixMulMatrix.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/MatrixMulMatrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixMulMatrix) ⇒ Boolean, msg: ⇒ Any): MatrixMulMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixMulMatrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixMulMatrix) ⇒ Boolean): MatrixMulMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixMulMatrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): MatrixMulMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixMulMatrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): MatrixMulMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixMulMatrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (MatrixMulMatrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/MatrixMulMatrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (MatrixMulMatrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/MatrixMulMatrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.MatrixMulMatrix.toMatrix", "link" : "smile\/math\/MatrixMulMatrix.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.MatrixMulMatrix.apply", "link" : "smile\/math\/MatrixMulMatrix.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.MatrixMulMatrix.ncols", "link" : "smile\/math\/MatrixMulMatrix.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.MatrixMulMatrix.nrows", "link" : "smile\/math\/MatrixMulMatrix.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.MatrixMulMatrix#<init>", "error" : "unsupported entity"}, {"label" : "B", "tail" : ": MatrixExpression", "member" : "smile.math.MatrixMulMatrix.B", "link" : "smile\/math\/MatrixMulMatrix.html#B:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.MatrixMulMatrix.A", "link" : "smile\/math\/MatrixMulMatrix.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/MatrixMulMatrix.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixMulMatrix.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/MatrixMulMatrix.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/MatrixMulMatrix.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/MatrixMulMatrix.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixMulMatrix.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/MatrixMulMatrix.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/MatrixMulMatrix.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixMulMatrix.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/MatrixMulMatrix.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/MatrixMulMatrix.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/MatrixMulMatrix.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/MatrixMulMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/MatrixMulMatrix.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/MatrixMulMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/MatrixMulMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/MatrixMulMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/MatrixMulMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/MatrixMulMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixMulMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixMulMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixMulMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/MatrixMulMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/MatrixMulMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/MatrixMulMatrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/MatrixMulMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/MatrixMulMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/MatrixMulMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/MatrixMulMatrix.html", "kind" : "case class"}, {"name" : "smile.math.MatrixMultiplicationChain", "shortDescription" : "", "members_case class" : [{"label" : "array", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.Operators.matrixExpression2Array.array", "link" : "smile\/math\/MatrixMultiplicationChain.html#array():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.sum", "link" : "smile\/math\/MatrixMultiplicationChain.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/MatrixMultiplicationChain.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixMultiplicationChain.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixMultiplicationChain.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixMultiplicationChain.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixMultiplicationChain.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixMultiplicationChain.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixMultiplicationChain.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixMultiplicationChain.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixMultiplicationChain.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixMultiplicationChain.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixMultiplicationChain.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixMultiplicationChain.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixMultiplicationChain.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixMultiplicationChain.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixMultiplicationChain.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixMultiplicationChain.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixMultiplicationChain.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colMeans", "link" : "smile\/math\/MatrixMultiplicationChain.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colSums", "link" : "smile\/math\/MatrixMultiplicationChain.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowMeans", "link" : "smile\/math\/MatrixMultiplicationChain.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowSums", "link" : "smile\/math\/MatrixMultiplicationChain.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.Operators.matrixExpression2Array.xax", "link" : "smile\/math\/MatrixMultiplicationChain.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normFro", "link" : "smile\/math\/MatrixMultiplicationChain.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normInf", "link" : "smile\/math\/MatrixMultiplicationChain.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm", "link" : "smile\/math\/MatrixMultiplicationChain.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm2", "link" : "smile\/math\/MatrixMultiplicationChain.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm1", "link" : "smile\/math\/MatrixMultiplicationChain.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/MatrixMultiplicationChain.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/MatrixMultiplicationChain.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/MatrixMultiplicationChain.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixMultiplicationChain.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixMultiplicationChain.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/MatrixMultiplicationChain.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/MatrixMultiplicationChain.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/MatrixMultiplicationChain.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.update", "link" : "smile\/math\/MatrixMultiplicationChain.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixMultiplicationChain.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixMultiplicationChain.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixMultiplicationChain.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixMultiplicationChain.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.trace", "link" : "smile\/math\/MatrixMultiplicationChain.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.diag", "link" : "smile\/math\/MatrixMultiplicationChain.html#diag():Array[Double]", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.Operators.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/MatrixMultiplicationChain.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.Operators.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/MatrixMultiplicationChain.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixMultiplicationChain.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixMultiplicationChain.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixMultiplicationChain.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixMultiplicationChain.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.aat", "link" : "smile\/math\/MatrixMultiplicationChain.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.ata", "link" : "smile\/math\/MatrixMultiplicationChain.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "copy", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.copy", "link" : "smile\/math\/MatrixMultiplicationChain.html#copy():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.transpose", "link" : "smile\/math\/MatrixMultiplicationChain.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/MatrixMultiplicationChain.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixMultiplicationChain.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixMultiplicationChain.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/MatrixMultiplicationChain.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/MatrixMultiplicationChain.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/MatrixMultiplicationChain.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.set", "link" : "smile\/math\/MatrixMultiplicationChain.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.Operators.matrixExpression2Array.ld", "link" : "smile\/math\/MatrixMultiplicationChain.html#ld():Int", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.data", "link" : "smile\/math\/MatrixMultiplicationChain.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.atbmm", "link" : "smile\/math\/MatrixMultiplicationChain.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abtmm", "link" : "smile\/math\/MatrixMultiplicationChain.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abmm", "link" : "smile\/math\/MatrixMultiplicationChain.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/MatrixMultiplicationChain.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/MatrixMultiplicationChain.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atx", "link" : "smile\/math\/MatrixMultiplicationChain.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/MatrixMultiplicationChain.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/MatrixMultiplicationChain.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.ax", "link" : "smile\/math\/MatrixMultiplicationChain.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.Operators.matrixExpression2Array.get", "link" : "smile\/math\/MatrixMultiplicationChain.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/MatrixMultiplicationChain.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixMultiplicationChain) ⇒ Boolean, msg: ⇒ Any): MatrixMultiplicationChain", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixMultiplicationChain.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixMultiplicationChain) ⇒ Boolean): MatrixMultiplicationChain", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixMultiplicationChain.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): MatrixMultiplicationChain", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixMultiplicationChain.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): MatrixMultiplicationChain", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixMultiplicationChain.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (MatrixMultiplicationChain, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/MatrixMultiplicationChain.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (MatrixMultiplicationChain, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/MatrixMultiplicationChain.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.MatrixMultiplicationChain.toMatrix", "link" : "smile\/math\/MatrixMultiplicationChain.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "%*%", "tail" : "(B: MatrixExpression): MatrixMultiplicationChain", "member" : "smile.math.MatrixMultiplicationChain.%*%", "link" : "smile\/math\/MatrixMultiplicationChain.html#%*%(B:smile.math.MatrixExpression):smile.math.MatrixMultiplicationChain", "kind" : "def"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.MatrixMultiplicationChain.apply", "link" : "smile\/math\/MatrixMultiplicationChain.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.MatrixMultiplicationChain.ncols", "link" : "smile\/math\/MatrixMultiplicationChain.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.MatrixMultiplicationChain.nrows", "link" : "smile\/math\/MatrixMultiplicationChain.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.MatrixMultiplicationChain#<init>", "error" : "unsupported entity"}, {"label" : "A", "tail" : ": Seq[MatrixExpression]", "member" : "smile.math.MatrixMultiplicationChain.A", "link" : "smile\/math\/MatrixMultiplicationChain.html#A:Seq[smile.math.MatrixExpression]", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/MatrixMultiplicationChain.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixMultiplicationChain.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/MatrixMultiplicationChain.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/MatrixMultiplicationChain.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixMultiplicationChain.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/MatrixMultiplicationChain.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/MatrixMultiplicationChain.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixMultiplicationChain.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/MatrixMultiplicationChain.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/MatrixMultiplicationChain.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/MatrixMultiplicationChain.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/MatrixMultiplicationChain.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/MatrixMultiplicationChain.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/MatrixMultiplicationChain.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/MatrixMultiplicationChain.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/MatrixMultiplicationChain.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/MatrixMultiplicationChain.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/MatrixMultiplicationChain.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixMultiplicationChain.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixMultiplicationChain.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixMultiplicationChain.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/MatrixMultiplicationChain.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/MatrixMultiplicationChain.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/MatrixMultiplicationChain.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/MatrixMultiplicationChain.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/MatrixMultiplicationChain.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/MatrixMultiplicationChain.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/MatrixMultiplicationChain.html", "kind" : "case class"}, {"name" : "smile.math.MatrixMultiplicationExpression", "shortDescription" : "", "members_case class" : [{"label" : "array", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.Operators.matrixExpression2Array.array", "link" : "smile\/math\/MatrixMultiplicationExpression.html#array():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.sum", "link" : "smile\/math\/MatrixMultiplicationExpression.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/MatrixMultiplicationExpression.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixMultiplicationExpression.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixMultiplicationExpression.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixMultiplicationExpression.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixMultiplicationExpression.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixMultiplicationExpression.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixMultiplicationExpression.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixMultiplicationExpression.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixMultiplicationExpression.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixMultiplicationExpression.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixMultiplicationExpression.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixMultiplicationExpression.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixMultiplicationExpression.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixMultiplicationExpression.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixMultiplicationExpression.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixMultiplicationExpression.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixMultiplicationExpression.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colMeans", "link" : "smile\/math\/MatrixMultiplicationExpression.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colSums", "link" : "smile\/math\/MatrixMultiplicationExpression.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowMeans", "link" : "smile\/math\/MatrixMultiplicationExpression.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowSums", "link" : "smile\/math\/MatrixMultiplicationExpression.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.Operators.matrixExpression2Array.xax", "link" : "smile\/math\/MatrixMultiplicationExpression.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normFro", "link" : "smile\/math\/MatrixMultiplicationExpression.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normInf", "link" : "smile\/math\/MatrixMultiplicationExpression.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm", "link" : "smile\/math\/MatrixMultiplicationExpression.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm2", "link" : "smile\/math\/MatrixMultiplicationExpression.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm1", "link" : "smile\/math\/MatrixMultiplicationExpression.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/MatrixMultiplicationExpression.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/MatrixMultiplicationExpression.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/MatrixMultiplicationExpression.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixMultiplicationExpression.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixMultiplicationExpression.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/MatrixMultiplicationExpression.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/MatrixMultiplicationExpression.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/MatrixMultiplicationExpression.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.update", "link" : "smile\/math\/MatrixMultiplicationExpression.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixMultiplicationExpression.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixMultiplicationExpression.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixMultiplicationExpression.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixMultiplicationExpression.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.trace", "link" : "smile\/math\/MatrixMultiplicationExpression.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.diag", "link" : "smile\/math\/MatrixMultiplicationExpression.html#diag():Array[Double]", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.Operators.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/MatrixMultiplicationExpression.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.Operators.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/MatrixMultiplicationExpression.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixMultiplicationExpression.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixMultiplicationExpression.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixMultiplicationExpression.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixMultiplicationExpression.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.aat", "link" : "smile\/math\/MatrixMultiplicationExpression.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.ata", "link" : "smile\/math\/MatrixMultiplicationExpression.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "copy", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.copy", "link" : "smile\/math\/MatrixMultiplicationExpression.html#copy():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.transpose", "link" : "smile\/math\/MatrixMultiplicationExpression.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/MatrixMultiplicationExpression.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixMultiplicationExpression.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixMultiplicationExpression.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/MatrixMultiplicationExpression.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/MatrixMultiplicationExpression.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/MatrixMultiplicationExpression.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.set", "link" : "smile\/math\/MatrixMultiplicationExpression.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.Operators.matrixExpression2Array.ld", "link" : "smile\/math\/MatrixMultiplicationExpression.html#ld():Int", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.data", "link" : "smile\/math\/MatrixMultiplicationExpression.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.atbmm", "link" : "smile\/math\/MatrixMultiplicationExpression.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abtmm", "link" : "smile\/math\/MatrixMultiplicationExpression.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abmm", "link" : "smile\/math\/MatrixMultiplicationExpression.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/MatrixMultiplicationExpression.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/MatrixMultiplicationExpression.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atx", "link" : "smile\/math\/MatrixMultiplicationExpression.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/MatrixMultiplicationExpression.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/MatrixMultiplicationExpression.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.ax", "link" : "smile\/math\/MatrixMultiplicationExpression.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.Operators.matrixExpression2Array.get", "link" : "smile\/math\/MatrixMultiplicationExpression.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/MatrixMultiplicationExpression.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixMultiplicationExpression) ⇒ Boolean, msg: ⇒ Any): MatrixMultiplicationExpression", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixMultiplicationExpression.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixMultiplicationExpression) ⇒ Boolean): MatrixMultiplicationExpression", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixMultiplicationExpression.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): MatrixMultiplicationExpression", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixMultiplicationExpression.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): MatrixMultiplicationExpression", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixMultiplicationExpression.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (MatrixMultiplicationExpression, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/MatrixMultiplicationExpression.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (MatrixMultiplicationExpression, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/MatrixMultiplicationExpression.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "%*%", "tail" : "(C: MatrixExpression): MatrixMultiplicationChain", "member" : "smile.math.MatrixMultiplicationExpression.%*%", "link" : "smile\/math\/MatrixMultiplicationExpression.html#%*%(C:smile.math.MatrixExpression):smile.math.MatrixMultiplicationChain", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.MatrixMultiplicationExpression.toMatrix", "link" : "smile\/math\/MatrixMultiplicationExpression.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.MatrixMultiplicationExpression.apply", "link" : "smile\/math\/MatrixMultiplicationExpression.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.MatrixMultiplicationExpression.ncols", "link" : "smile\/math\/MatrixMultiplicationExpression.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.MatrixMultiplicationExpression.nrows", "link" : "smile\/math\/MatrixMultiplicationExpression.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.MatrixMultiplicationExpression#<init>", "error" : "unsupported entity"}, {"label" : "B", "tail" : ": MatrixExpression", "member" : "smile.math.MatrixMultiplicationExpression.B", "link" : "smile\/math\/MatrixMultiplicationExpression.html#B:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.MatrixMultiplicationExpression.A", "link" : "smile\/math\/MatrixMultiplicationExpression.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/MatrixMultiplicationExpression.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixMultiplicationExpression.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/MatrixMultiplicationExpression.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/MatrixMultiplicationExpression.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixMultiplicationExpression.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/MatrixMultiplicationExpression.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/MatrixMultiplicationExpression.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixMultiplicationExpression.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/MatrixMultiplicationExpression.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/MatrixMultiplicationExpression.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/MatrixMultiplicationExpression.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/MatrixMultiplicationExpression.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/MatrixMultiplicationExpression.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/MatrixMultiplicationExpression.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/MatrixMultiplicationExpression.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/MatrixMultiplicationExpression.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/MatrixMultiplicationExpression.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/MatrixMultiplicationExpression.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixMultiplicationExpression.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixMultiplicationExpression.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixMultiplicationExpression.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/MatrixMultiplicationExpression.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/MatrixMultiplicationExpression.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/MatrixMultiplicationExpression.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/MatrixMultiplicationExpression.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/MatrixMultiplicationExpression.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/MatrixMultiplicationExpression.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/MatrixMultiplicationExpression.html", "kind" : "case class"}, {"name" : "smile.math.MatrixMulValue", "shortDescription" : "", "members_case class" : [{"label" : "array", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.Operators.matrixExpression2Array.array", "link" : "smile\/math\/MatrixMulValue.html#array():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.sum", "link" : "smile\/math\/MatrixMulValue.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/MatrixMulValue.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixMulValue.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixMulValue.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixMulValue.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixMulValue.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixMulValue.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixMulValue.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixMulValue.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixMulValue.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixMulValue.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixMulValue.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixMulValue.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixMulValue.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixMulValue.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixMulValue.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixMulValue.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixMulValue.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colMeans", "link" : "smile\/math\/MatrixMulValue.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colSums", "link" : "smile\/math\/MatrixMulValue.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowMeans", "link" : "smile\/math\/MatrixMulValue.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowSums", "link" : "smile\/math\/MatrixMulValue.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.Operators.matrixExpression2Array.xax", "link" : "smile\/math\/MatrixMulValue.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normFro", "link" : "smile\/math\/MatrixMulValue.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normInf", "link" : "smile\/math\/MatrixMulValue.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm", "link" : "smile\/math\/MatrixMulValue.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm2", "link" : "smile\/math\/MatrixMulValue.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm1", "link" : "smile\/math\/MatrixMulValue.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/MatrixMulValue.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/MatrixMulValue.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/MatrixMulValue.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixMulValue.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixMulValue.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/MatrixMulValue.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/MatrixMulValue.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/MatrixMulValue.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.update", "link" : "smile\/math\/MatrixMulValue.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixMulValue.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixMulValue.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixMulValue.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixMulValue.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.trace", "link" : "smile\/math\/MatrixMulValue.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.diag", "link" : "smile\/math\/MatrixMulValue.html#diag():Array[Double]", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.Operators.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/MatrixMulValue.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.Operators.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/MatrixMulValue.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixMulValue.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixMulValue.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixMulValue.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixMulValue.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.aat", "link" : "smile\/math\/MatrixMulValue.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.ata", "link" : "smile\/math\/MatrixMulValue.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "copy", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.copy", "link" : "smile\/math\/MatrixMulValue.html#copy():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.transpose", "link" : "smile\/math\/MatrixMulValue.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/MatrixMulValue.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixMulValue.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixMulValue.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/MatrixMulValue.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/MatrixMulValue.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/MatrixMulValue.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.set", "link" : "smile\/math\/MatrixMulValue.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.Operators.matrixExpression2Array.ld", "link" : "smile\/math\/MatrixMulValue.html#ld():Int", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.data", "link" : "smile\/math\/MatrixMulValue.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.atbmm", "link" : "smile\/math\/MatrixMulValue.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abtmm", "link" : "smile\/math\/MatrixMulValue.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abmm", "link" : "smile\/math\/MatrixMulValue.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/MatrixMulValue.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/MatrixMulValue.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atx", "link" : "smile\/math\/MatrixMulValue.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/MatrixMulValue.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/MatrixMulValue.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.ax", "link" : "smile\/math\/MatrixMulValue.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.Operators.matrixExpression2Array.get", "link" : "smile\/math\/MatrixMulValue.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/MatrixMulValue.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixMulValue) ⇒ Boolean, msg: ⇒ Any): MatrixMulValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixMulValue.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixMulValue) ⇒ Boolean): MatrixMulValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixMulValue.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): MatrixMulValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixMulValue.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): MatrixMulValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixMulValue.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (MatrixMulValue, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/MatrixMulValue.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (MatrixMulValue, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/MatrixMulValue.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.MatrixMulValue.toMatrix", "link" : "smile\/math\/MatrixMulValue.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.MatrixMulValue.apply", "link" : "smile\/math\/MatrixMulValue.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.MatrixMulValue.ncols", "link" : "smile\/math\/MatrixMulValue.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.MatrixMulValue.nrows", "link" : "smile\/math\/MatrixMulValue.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.MatrixMulValue#<init>", "error" : "unsupported entity"}, {"label" : "y", "tail" : ": Double", "member" : "smile.math.MatrixMulValue.y", "link" : "smile\/math\/MatrixMulValue.html#y:Double", "kind" : "val"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.MatrixMulValue.A", "link" : "smile\/math\/MatrixMulValue.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/MatrixMulValue.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixMulValue.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/MatrixMulValue.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/MatrixMulValue.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/MatrixMulValue.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixMulValue.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/MatrixMulValue.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/MatrixMulValue.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixMulValue.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/MatrixMulValue.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/MatrixMulValue.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/MatrixMulValue.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/MatrixMulValue.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/MatrixMulValue.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/MatrixMulValue.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/MatrixMulValue.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/MatrixMulValue.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/MatrixMulValue.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/MatrixMulValue.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixMulValue.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixMulValue.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixMulValue.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/MatrixMulValue.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/MatrixMulValue.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/MatrixMulValue.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/MatrixMulValue.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/MatrixMulValue.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/MatrixMulValue.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/MatrixMulValue.html", "kind" : "case class"}, {"name" : "smile.math.MatrixOrderOptimization", "shortDescription" : "Optimizes the order of matrix multiplication chain.", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "smile\/math\/MatrixOrderOptimization.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/MatrixOrderOptimization.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixOrderOptimization) ⇒ Boolean, msg: ⇒ Any): MatrixOrderOptimization", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixOrderOptimization.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixOrderOptimization) ⇒ Boolean): MatrixOrderOptimization", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixOrderOptimization.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): MatrixOrderOptimization", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixOrderOptimization.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): MatrixOrderOptimization", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixOrderOptimization.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (MatrixOrderOptimization, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/MatrixOrderOptimization.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (MatrixOrderOptimization, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/MatrixOrderOptimization.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixOrderOptimization.toString", "link" : "smile\/math\/MatrixOrderOptimization.html#toString():String", "kind" : "def"}, {"label" : "s", "tail" : ": Array[Array[Int]]", "member" : "smile.math.MatrixOrderOptimization.s", "link" : "smile\/math\/MatrixOrderOptimization.html#s:Array[Array[Int]]", "kind" : "val"}, {"label" : "m", "tail" : ": Array[Array[Int]]", "member" : "smile.math.MatrixOrderOptimization.m", "link" : "smile\/math\/MatrixOrderOptimization.html#m:Array[Array[Int]]", "kind" : "val"}, {"label" : "n", "tail" : ": Int", "member" : "smile.math.MatrixOrderOptimization.n", "link" : "smile\/math\/MatrixOrderOptimization.html#n:Int", "kind" : "val"}, {"member" : "smile.math.MatrixOrderOptimization#<init>", "error" : "unsupported entity"}, {"label" : "logger", "tail" : ": Logger", "member" : "com.typesafe.scalalogging.LazyLogging.logger", "link" : "smile\/math\/MatrixOrderOptimization.html#logger:com.typesafe.scalalogging.Logger", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/MatrixOrderOptimization.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/MatrixOrderOptimization.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/MatrixOrderOptimization.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/MatrixOrderOptimization.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/MatrixOrderOptimization.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/MatrixOrderOptimization.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/MatrixOrderOptimization.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixOrderOptimization.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixOrderOptimization.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixOrderOptimization.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/MatrixOrderOptimization.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/MatrixOrderOptimization.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/MatrixOrderOptimization.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/math\/MatrixOrderOptimization.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/math\/MatrixOrderOptimization.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/MatrixOrderOptimization.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/MatrixOrderOptimization.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/MatrixOrderOptimization.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "smile\/math\/MatrixOrderOptimization.html", "kind" : "class"}, {"name" : "smile.math.MatrixSubMatrix", "shortDescription" : "", "members_case class" : [{"label" : "array", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.Operators.matrixExpression2Array.array", "link" : "smile\/math\/MatrixSubMatrix.html#array():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.sum", "link" : "smile\/math\/MatrixSubMatrix.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/MatrixSubMatrix.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixSubMatrix.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixSubMatrix.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixSubMatrix.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixSubMatrix.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixSubMatrix.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixSubMatrix.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixSubMatrix.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixSubMatrix.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixSubMatrix.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixSubMatrix.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixSubMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixSubMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixSubMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixSubMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixSubMatrix.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixSubMatrix.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colMeans", "link" : "smile\/math\/MatrixSubMatrix.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colSums", "link" : "smile\/math\/MatrixSubMatrix.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowMeans", "link" : "smile\/math\/MatrixSubMatrix.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowSums", "link" : "smile\/math\/MatrixSubMatrix.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.Operators.matrixExpression2Array.xax", "link" : "smile\/math\/MatrixSubMatrix.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normFro", "link" : "smile\/math\/MatrixSubMatrix.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normInf", "link" : "smile\/math\/MatrixSubMatrix.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm", "link" : "smile\/math\/MatrixSubMatrix.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm2", "link" : "smile\/math\/MatrixSubMatrix.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm1", "link" : "smile\/math\/MatrixSubMatrix.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/MatrixSubMatrix.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/MatrixSubMatrix.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/MatrixSubMatrix.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixSubMatrix.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixSubMatrix.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/MatrixSubMatrix.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/MatrixSubMatrix.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/MatrixSubMatrix.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.update", "link" : "smile\/math\/MatrixSubMatrix.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixSubMatrix.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixSubMatrix.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixSubMatrix.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixSubMatrix.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.trace", "link" : "smile\/math\/MatrixSubMatrix.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.diag", "link" : "smile\/math\/MatrixSubMatrix.html#diag():Array[Double]", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.Operators.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/MatrixSubMatrix.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.Operators.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/MatrixSubMatrix.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixSubMatrix.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixSubMatrix.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixSubMatrix.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixSubMatrix.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.aat", "link" : "smile\/math\/MatrixSubMatrix.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.ata", "link" : "smile\/math\/MatrixSubMatrix.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "copy", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.copy", "link" : "smile\/math\/MatrixSubMatrix.html#copy():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.transpose", "link" : "smile\/math\/MatrixSubMatrix.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/MatrixSubMatrix.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixSubMatrix.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixSubMatrix.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/MatrixSubMatrix.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/MatrixSubMatrix.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/MatrixSubMatrix.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.set", "link" : "smile\/math\/MatrixSubMatrix.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.Operators.matrixExpression2Array.ld", "link" : "smile\/math\/MatrixSubMatrix.html#ld():Int", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.data", "link" : "smile\/math\/MatrixSubMatrix.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.atbmm", "link" : "smile\/math\/MatrixSubMatrix.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abtmm", "link" : "smile\/math\/MatrixSubMatrix.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abmm", "link" : "smile\/math\/MatrixSubMatrix.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/MatrixSubMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/MatrixSubMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atx", "link" : "smile\/math\/MatrixSubMatrix.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/MatrixSubMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/MatrixSubMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.ax", "link" : "smile\/math\/MatrixSubMatrix.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.Operators.matrixExpression2Array.get", "link" : "smile\/math\/MatrixSubMatrix.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/MatrixSubMatrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixSubMatrix) ⇒ Boolean, msg: ⇒ Any): MatrixSubMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixSubMatrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixSubMatrix) ⇒ Boolean): MatrixSubMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixSubMatrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): MatrixSubMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixSubMatrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): MatrixSubMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixSubMatrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (MatrixSubMatrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/MatrixSubMatrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (MatrixSubMatrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/MatrixSubMatrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.MatrixSubMatrix.toMatrix", "link" : "smile\/math\/MatrixSubMatrix.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.MatrixSubMatrix.apply", "link" : "smile\/math\/MatrixSubMatrix.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.MatrixSubMatrix.ncols", "link" : "smile\/math\/MatrixSubMatrix.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.MatrixSubMatrix.nrows", "link" : "smile\/math\/MatrixSubMatrix.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.MatrixSubMatrix#<init>", "error" : "unsupported entity"}, {"label" : "B", "tail" : ": MatrixExpression", "member" : "smile.math.MatrixSubMatrix.B", "link" : "smile\/math\/MatrixSubMatrix.html#B:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.MatrixSubMatrix.A", "link" : "smile\/math\/MatrixSubMatrix.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/MatrixSubMatrix.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixSubMatrix.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/MatrixSubMatrix.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/MatrixSubMatrix.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/MatrixSubMatrix.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixSubMatrix.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/MatrixSubMatrix.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/MatrixSubMatrix.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixSubMatrix.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/MatrixSubMatrix.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/MatrixSubMatrix.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/MatrixSubMatrix.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/MatrixSubMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/MatrixSubMatrix.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/MatrixSubMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/MatrixSubMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/MatrixSubMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/MatrixSubMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/MatrixSubMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixSubMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixSubMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixSubMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/MatrixSubMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/MatrixSubMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/MatrixSubMatrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/MatrixSubMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/MatrixSubMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/MatrixSubMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/MatrixSubMatrix.html", "kind" : "case class"}, {"name" : "smile.math.MatrixSubValue", "shortDescription" : "", "members_case class" : [{"label" : "array", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.Operators.matrixExpression2Array.array", "link" : "smile\/math\/MatrixSubValue.html#array():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.sum", "link" : "smile\/math\/MatrixSubValue.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/MatrixSubValue.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixSubValue.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixSubValue.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixSubValue.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixSubValue.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixSubValue.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixSubValue.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixSubValue.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixSubValue.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixSubValue.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixSubValue.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixSubValue.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixSubValue.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixSubValue.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixSubValue.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixSubValue.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixSubValue.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colMeans", "link" : "smile\/math\/MatrixSubValue.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colSums", "link" : "smile\/math\/MatrixSubValue.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowMeans", "link" : "smile\/math\/MatrixSubValue.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowSums", "link" : "smile\/math\/MatrixSubValue.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.Operators.matrixExpression2Array.xax", "link" : "smile\/math\/MatrixSubValue.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normFro", "link" : "smile\/math\/MatrixSubValue.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normInf", "link" : "smile\/math\/MatrixSubValue.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm", "link" : "smile\/math\/MatrixSubValue.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm2", "link" : "smile\/math\/MatrixSubValue.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm1", "link" : "smile\/math\/MatrixSubValue.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/MatrixSubValue.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/MatrixSubValue.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/MatrixSubValue.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixSubValue.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixSubValue.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/MatrixSubValue.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/MatrixSubValue.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/MatrixSubValue.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.update", "link" : "smile\/math\/MatrixSubValue.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixSubValue.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixSubValue.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixSubValue.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixSubValue.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.trace", "link" : "smile\/math\/MatrixSubValue.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.diag", "link" : "smile\/math\/MatrixSubValue.html#diag():Array[Double]", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.Operators.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/MatrixSubValue.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.Operators.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/MatrixSubValue.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixSubValue.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixSubValue.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixSubValue.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixSubValue.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.aat", "link" : "smile\/math\/MatrixSubValue.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.ata", "link" : "smile\/math\/MatrixSubValue.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "copy", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.copy", "link" : "smile\/math\/MatrixSubValue.html#copy():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.transpose", "link" : "smile\/math\/MatrixSubValue.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/MatrixSubValue.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixSubValue.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixSubValue.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/MatrixSubValue.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/MatrixSubValue.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/MatrixSubValue.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.set", "link" : "smile\/math\/MatrixSubValue.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.Operators.matrixExpression2Array.ld", "link" : "smile\/math\/MatrixSubValue.html#ld():Int", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.data", "link" : "smile\/math\/MatrixSubValue.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.atbmm", "link" : "smile\/math\/MatrixSubValue.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abtmm", "link" : "smile\/math\/MatrixSubValue.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abmm", "link" : "smile\/math\/MatrixSubValue.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/MatrixSubValue.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/MatrixSubValue.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atx", "link" : "smile\/math\/MatrixSubValue.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/MatrixSubValue.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/MatrixSubValue.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.ax", "link" : "smile\/math\/MatrixSubValue.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.Operators.matrixExpression2Array.get", "link" : "smile\/math\/MatrixSubValue.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/MatrixSubValue.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixSubValue) ⇒ Boolean, msg: ⇒ Any): MatrixSubValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixSubValue.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixSubValue) ⇒ Boolean): MatrixSubValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixSubValue.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): MatrixSubValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixSubValue.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): MatrixSubValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixSubValue.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (MatrixSubValue, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/MatrixSubValue.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (MatrixSubValue, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/MatrixSubValue.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.MatrixSubValue.toMatrix", "link" : "smile\/math\/MatrixSubValue.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.MatrixSubValue.apply", "link" : "smile\/math\/MatrixSubValue.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.MatrixSubValue.ncols", "link" : "smile\/math\/MatrixSubValue.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.MatrixSubValue.nrows", "link" : "smile\/math\/MatrixSubValue.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.MatrixSubValue#<init>", "error" : "unsupported entity"}, {"label" : "y", "tail" : ": Double", "member" : "smile.math.MatrixSubValue.y", "link" : "smile\/math\/MatrixSubValue.html#y:Double", "kind" : "val"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.MatrixSubValue.A", "link" : "smile\/math\/MatrixSubValue.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/MatrixSubValue.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixSubValue.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/MatrixSubValue.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/MatrixSubValue.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/MatrixSubValue.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixSubValue.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/MatrixSubValue.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/MatrixSubValue.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixSubValue.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/MatrixSubValue.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/MatrixSubValue.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/MatrixSubValue.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/MatrixSubValue.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/MatrixSubValue.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/MatrixSubValue.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/MatrixSubValue.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/MatrixSubValue.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/MatrixSubValue.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/MatrixSubValue.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixSubValue.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixSubValue.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixSubValue.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/MatrixSubValue.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/MatrixSubValue.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/MatrixSubValue.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/MatrixSubValue.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/MatrixSubValue.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/MatrixSubValue.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/MatrixSubValue.html", "kind" : "case class"}, {"name" : "smile.math.MatrixTranspose", "shortDescription" : "", "members_case class" : [{"label" : "array", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.Operators.matrixExpression2Array.array", "link" : "smile\/math\/MatrixTranspose.html#array():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.sum", "link" : "smile\/math\/MatrixTranspose.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/MatrixTranspose.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixTranspose.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixTranspose.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixTranspose.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixTranspose.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixTranspose.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixTranspose.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixTranspose.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixTranspose.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixTranspose.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixTranspose.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixTranspose.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixTranspose.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixTranspose.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixTranspose.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixTranspose.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixTranspose.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colMeans", "link" : "smile\/math\/MatrixTranspose.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colSums", "link" : "smile\/math\/MatrixTranspose.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowMeans", "link" : "smile\/math\/MatrixTranspose.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowSums", "link" : "smile\/math\/MatrixTranspose.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.Operators.matrixExpression2Array.xax", "link" : "smile\/math\/MatrixTranspose.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normFro", "link" : "smile\/math\/MatrixTranspose.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normInf", "link" : "smile\/math\/MatrixTranspose.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm", "link" : "smile\/math\/MatrixTranspose.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm2", "link" : "smile\/math\/MatrixTranspose.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm1", "link" : "smile\/math\/MatrixTranspose.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/MatrixTranspose.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/MatrixTranspose.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/MatrixTranspose.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixTranspose.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixTranspose.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/MatrixTranspose.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/MatrixTranspose.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/MatrixTranspose.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.update", "link" : "smile\/math\/MatrixTranspose.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixTranspose.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixTranspose.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixTranspose.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixTranspose.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.trace", "link" : "smile\/math\/MatrixTranspose.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.diag", "link" : "smile\/math\/MatrixTranspose.html#diag():Array[Double]", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.Operators.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/MatrixTranspose.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.Operators.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/MatrixTranspose.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/MatrixTranspose.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixTranspose.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixTranspose.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/MatrixTranspose.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.aat", "link" : "smile\/math\/MatrixTranspose.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.ata", "link" : "smile\/math\/MatrixTranspose.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "copy", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.copy", "link" : "smile\/math\/MatrixTranspose.html#copy():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.transpose", "link" : "smile\/math\/MatrixTranspose.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/MatrixTranspose.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixTranspose.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixTranspose.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/MatrixTranspose.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/MatrixTranspose.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/MatrixTranspose.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.set", "link" : "smile\/math\/MatrixTranspose.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.Operators.matrixExpression2Array.ld", "link" : "smile\/math\/MatrixTranspose.html#ld():Int", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.data", "link" : "smile\/math\/MatrixTranspose.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.atbmm", "link" : "smile\/math\/MatrixTranspose.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abtmm", "link" : "smile\/math\/MatrixTranspose.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abmm", "link" : "smile\/math\/MatrixTranspose.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/MatrixTranspose.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/MatrixTranspose.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atx", "link" : "smile\/math\/MatrixTranspose.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/MatrixTranspose.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/MatrixTranspose.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.ax", "link" : "smile\/math\/MatrixTranspose.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.Operators.matrixExpression2Array.get", "link" : "smile\/math\/MatrixTranspose.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/MatrixTranspose.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixTranspose) ⇒ Boolean, msg: ⇒ Any): MatrixTranspose", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixTranspose.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixTranspose) ⇒ Boolean): MatrixTranspose", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixTranspose.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): MatrixTranspose", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixTranspose.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): MatrixTranspose", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixTranspose.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (MatrixTranspose, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/MatrixTranspose.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (MatrixTranspose, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/MatrixTranspose.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : "(): DenseMatrix", "member" : "smile.math.MatrixTranspose.toMatrix", "link" : "smile\/math\/MatrixTranspose.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.MatrixTranspose.apply", "link" : "smile\/math\/MatrixTranspose.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.MatrixTranspose.ncols", "link" : "smile\/math\/MatrixTranspose.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.MatrixTranspose.nrows", "link" : "smile\/math\/MatrixTranspose.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.MatrixTranspose#<init>", "error" : "unsupported entity"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.MatrixTranspose.A", "link" : "smile\/math\/MatrixTranspose.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/MatrixTranspose.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixTranspose.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/MatrixTranspose.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/MatrixTranspose.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/MatrixTranspose.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixTranspose.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/MatrixTranspose.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/MatrixTranspose.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixTranspose.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/MatrixTranspose.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/MatrixTranspose.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/MatrixTranspose.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/MatrixTranspose.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/MatrixTranspose.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/MatrixTranspose.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/MatrixTranspose.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/MatrixTranspose.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/MatrixTranspose.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/MatrixTranspose.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixTranspose.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixTranspose.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixTranspose.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/MatrixTranspose.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/MatrixTranspose.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/MatrixTranspose.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/MatrixTranspose.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/MatrixTranspose.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/MatrixTranspose.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/MatrixTranspose.html", "kind" : "case class"}, {"name" : "smile.math.Operators", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "smile\/math\/Operators.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/Operators.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Operators) ⇒ Boolean, msg: ⇒ Any): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Operators.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Operators) ⇒ Boolean): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Operators.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Operators.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Operators.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Operators, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/Operators.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Operators, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/Operators.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "inv", "tail" : "(A: MatrixExpression): DenseMatrix", "member" : "smile.math.Operators.inv", "link" : "smile\/math\/Operators.html#inv(A:smile.math.MatrixExpression):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inv", "tail" : "(A: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.inv", "link" : "smile\/math\/Operators.html#inv(A:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "rank", "tail" : "(A: MatrixExpression): Int", "member" : "smile.math.Operators.rank", "link" : "smile\/math\/Operators.html#rank(A:smile.math.MatrixExpression):Int", "kind" : "def"}, {"label" : "rank", "tail" : "(A: DenseMatrix): Int", "member" : "smile.math.Operators.rank", "link" : "smile\/math\/Operators.html#rank(A:smile.math.matrix.DenseMatrix):Int", "kind" : "def"}, {"label" : "det", "tail" : "(A: MatrixExpression): Double", "member" : "smile.math.Operators.det", "link" : "smile\/math\/Operators.html#det(A:smile.math.MatrixExpression):Double", "kind" : "def"}, {"label" : "det", "tail" : "(A: DenseMatrix): Double", "member" : "smile.math.Operators.det", "link" : "smile\/math\/Operators.html#det(A:smile.math.matrix.DenseMatrix):Double", "kind" : "def"}, {"label" : "svd", "tail" : "(A: DenseMatrix, k: Int, kappa: Double, maxIter: Int): SVD", "member" : "smile.math.Operators.svd", "link" : "smile\/math\/Operators.html#svd(A:smile.math.matrix.DenseMatrix,k:Int,kappa:Double,maxIter:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(A: MatrixExpression): SVD", "member" : "smile.math.Operators.svd", "link" : "smile\/math\/Operators.html#svd(A:smile.math.MatrixExpression):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(A: DenseMatrix): SVD", "member" : "smile.math.Operators.svd", "link" : "smile\/math\/Operators.html#svd(A:smile.math.matrix.DenseMatrix):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(A: Array[Array[Double]]): SVD", "member" : "smile.math.Operators.svd", "link" : "smile\/math\/Operators.html#svd(A:Array[Array[Double]]):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(A: DenseMatrix, k: Int, kappa: Double, maxIter: Int): EVD", "member" : "smile.math.Operators.eigen", "link" : "smile\/math\/Operators.html#eigen(A:smile.math.matrix.DenseMatrix,k:Int,kappa:Double,maxIter:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(A: MatrixExpression): EVD", "member" : "smile.math.Operators.eigen", "link" : "smile\/math\/Operators.html#eigen(A:smile.math.MatrixExpression):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(A: DenseMatrix): EVD", "member" : "smile.math.Operators.eigen", "link" : "smile\/math\/Operators.html#eigen(A:smile.math.matrix.DenseMatrix):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(A: Array[Array[Double]]): EVD", "member" : "smile.math.Operators.eigen", "link" : "smile\/math\/Operators.html#eigen(A:Array[Array[Double]]):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eig", "tail" : "(A: MatrixExpression): Array[Double]", "member" : "smile.math.Operators.eig", "link" : "smile\/math\/Operators.html#eig(A:smile.math.MatrixExpression):Array[Double]", "kind" : "def"}, {"label" : "eig", "tail" : "(A: DenseMatrix): Array[Double]", "member" : "smile.math.Operators.eig", "link" : "smile\/math\/Operators.html#eig(A:smile.math.matrix.DenseMatrix):Array[Double]", "kind" : "def"}, {"label" : "eig", "tail" : "(A: Array[Array[Double]]): Array[Double]", "member" : "smile.math.Operators.eig", "link" : "smile\/math\/Operators.html#eig(A:Array[Array[Double]]):Array[Double]", "kind" : "def"}, {"label" : "cholesky", "tail" : "(A: MatrixExpression): Cholesky", "member" : "smile.math.Operators.cholesky", "link" : "smile\/math\/Operators.html#cholesky(A:smile.math.MatrixExpression):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "cholesky", "tail" : "(A: DenseMatrix): Cholesky", "member" : "smile.math.Operators.cholesky", "link" : "smile\/math\/Operators.html#cholesky(A:smile.math.matrix.DenseMatrix):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "cholesky", "tail" : "(A: Array[Array[Double]]): Cholesky", "member" : "smile.math.Operators.cholesky", "link" : "smile\/math\/Operators.html#cholesky(A:Array[Array[Double]]):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "qr", "tail" : "(A: MatrixExpression): QR", "member" : "smile.math.Operators.qr", "link" : "smile\/math\/Operators.html#qr(A:smile.math.MatrixExpression):smile.math.matrix.QR", "kind" : "def"}, {"label" : "qr", "tail" : "(A: DenseMatrix): QR", "member" : "smile.math.Operators.qr", "link" : "smile\/math\/Operators.html#qr(A:smile.math.matrix.DenseMatrix):smile.math.matrix.QR", "kind" : "def"}, {"label" : "qr", "tail" : "(A: Array[Array[Double]]): QR", "member" : "smile.math.Operators.qr", "link" : "smile\/math\/Operators.html#qr(A:Array[Array[Double]]):smile.math.matrix.QR", "kind" : "def"}, {"label" : "lu", "tail" : "(A: MatrixExpression): LU", "member" : "smile.math.Operators.lu", "link" : "smile\/math\/Operators.html#lu(A:smile.math.MatrixExpression):smile.math.matrix.LU", "kind" : "def"}, {"label" : "lu", "tail" : "(A: DenseMatrix): LU", "member" : "smile.math.Operators.lu", "link" : "smile\/math\/Operators.html#lu(A:smile.math.matrix.DenseMatrix):smile.math.matrix.LU", "kind" : "def"}, {"label" : "lu", "tail" : "(A: Array[Array[Double]]): LU", "member" : "smile.math.Operators.lu", "link" : "smile\/math\/Operators.html#lu(A:Array[Array[Double]]):smile.math.matrix.LU", "kind" : "def"}, {"label" : "diag", "tail" : "(A: Matrix): Array[Double]", "member" : "smile.math.Operators.diag", "link" : "smile\/math\/Operators.html#diag(A:smile.math.matrix.Matrix):Array[Double]", "kind" : "def"}, {"label" : "trace", "tail" : "(A: Matrix): Double", "member" : "smile.math.Operators.trace", "link" : "smile\/math\/Operators.html#trace(A:smile.math.matrix.Matrix):Double", "kind" : "def"}, {"label" : "randn", "tail" : "(m: Int, n: Int, mu: Double, sigma: Double): DenseMatrix", "member" : "smile.math.Operators.randn", "link" : "smile\/math\/Operators.html#randn(m:Int,n:Int,mu:Double,sigma:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eye", "tail" : "(m: Int, n: Int): DenseMatrix", "member" : "smile.math.Operators.eye", "link" : "smile\/math\/Operators.html#eye(m:Int,n:Int):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eye", "tail" : "(n: Int): DenseMatrix", "member" : "smile.math.Operators.eye", "link" : "smile\/math\/Operators.html#eye(n:Int):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ones", "tail" : "(m: Int, n: Int): DenseMatrix", "member" : "smile.math.Operators.ones", "link" : "smile\/math\/Operators.html#ones(m:Int,n:Int):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ones", "tail" : "(n: Int): DenseMatrix", "member" : "smile.math.Operators.ones", "link" : "smile\/math\/Operators.html#ones(n:Int):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "zeros", "tail" : "(m: Int, n: Int): DenseMatrix", "member" : "smile.math.Operators.zeros", "link" : "smile\/math\/Operators.html#zeros(m:Int,n:Int):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "zeros", "tail" : "(n: Int): DenseMatrix", "member" : "smile.math.Operators.zeros", "link" : "smile\/math\/Operators.html#zeros(n:Int):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "chisqtest", "tail" : "(table: Array[Array[Int]]): CorTest", "member" : "smile.math.Operators.chisqtest", "link" : "smile\/math\/Operators.html#chisqtest(table:Array[Array[Int]]):smile.stat.hypothesis.CorTest", "kind" : "def"}, {"label" : "kendalltest", "tail" : "(x: Array[Double], y: Array[Double]): CorTest", "member" : "smile.math.Operators.kendalltest", "link" : "smile\/math\/Operators.html#kendalltest(x:Array[Double],y:Array[Double]):smile.stat.hypothesis.CorTest", "kind" : "def"}, {"label" : "spearmantest", "tail" : "(x: Array[Double], y: Array[Double]): CorTest", "member" : "smile.math.Operators.spearmantest", "link" : "smile\/math\/Operators.html#spearmantest(x:Array[Double],y:Array[Double]):smile.stat.hypothesis.CorTest", "kind" : "def"}, {"label" : "pearsontest", "tail" : "(x: Array[Double], y: Array[Double]): CorTest", "member" : "smile.math.Operators.pearsontest", "link" : "smile\/math\/Operators.html#pearsontest(x:Array[Double],y:Array[Double]):smile.stat.hypothesis.CorTest", "kind" : "def"}, {"label" : "kstest", "tail" : "(x: Array[Double], y: Array[Double]): KSTest", "member" : "smile.math.Operators.kstest", "link" : "smile\/math\/Operators.html#kstest(x:Array[Double],y:Array[Double]):smile.stat.hypothesis.KSTest", "kind" : "def"}, {"label" : "kstest", "tail" : "(x: Array[Double], y: Distribution): KSTest", "member" : "smile.math.Operators.kstest", "link" : "smile\/math\/Operators.html#kstest(x:Array[Double],y:smile.stat.distribution.Distribution):smile.stat.hypothesis.KSTest", "kind" : "def"}, {"label" : "ttest2", "tail" : "(x: Array[Double], y: Array[Double], equalVariance: Boolean): TTest", "member" : "smile.math.Operators.ttest2", "link" : "smile\/math\/Operators.html#ttest2(x:Array[Double],y:Array[Double],equalVariance:Boolean):smile.stat.hypothesis.TTest", "kind" : "def"}, {"label" : "ttest", "tail" : "(x: Array[Double], y: Array[Double]): TTest", "member" : "smile.math.Operators.ttest", "link" : "smile\/math\/Operators.html#ttest(x:Array[Double],y:Array[Double]):smile.stat.hypothesis.TTest", "kind" : "def"}, {"label" : "ttest", "tail" : "(x: Array[Double], mean: Double): TTest", "member" : "smile.math.Operators.ttest", "link" : "smile\/math\/Operators.html#ttest(x:Array[Double],mean:Double):smile.stat.hypothesis.TTest", "kind" : "def"}, {"label" : "ftest", "tail" : "(x: Array[Double], y: Array[Double]): FTest", "member" : "smile.math.Operators.ftest", "link" : "smile\/math\/Operators.html#ftest(x:Array[Double],y:Array[Double]):smile.stat.hypothesis.FTest", "kind" : "def"}, {"label" : "chisqtest2", "tail" : "(x: Array[Int], y: Array[Int], constraints: Int): ChiSqTest", "member" : "smile.math.Operators.chisqtest2", "link" : "smile\/math\/Operators.html#chisqtest2(x:Array[Int],y:Array[Int],constraints:Int):smile.stat.hypothesis.ChiSqTest", "kind" : "def"}, {"label" : "chisqtest", "tail" : "(x: Array[Int], prob: Array[Double], constraints: Int): ChiSqTest", "member" : "smile.math.Operators.chisqtest", "link" : "smile\/math\/Operators.html#chisqtest(x:Array[Int],prob:Array[Double],constraints:Int):smile.stat.hypothesis.ChiSqTest", "kind" : "def"}, {"label" : "digamma", "tail" : "(x: Double): Double", "member" : "smile.math.Operators.digamma", "link" : "smile\/math\/Operators.html#digamma(x:Double):Double", "kind" : "def"}, {"label" : "lgamma", "tail" : "(x: Double): Double", "member" : "smile.math.Operators.lgamma", "link" : "smile\/math\/Operators.html#lgamma(x:Double):Double", "kind" : "def"}, {"label" : "gamma", "tail" : "(x: Double): Double", "member" : "smile.math.Operators.gamma", "link" : "smile\/math\/Operators.html#gamma(x:Double):Double", "kind" : "def"}, {"label" : "inverfc", "tail" : "(p: Double): Double", "member" : "smile.math.Operators.inverfc", "link" : "smile\/math\/Operators.html#inverfc(p:Double):Double", "kind" : "def"}, {"label" : "inverf", "tail" : "(p: Double): Double", "member" : "smile.math.Operators.inverf", "link" : "smile\/math\/Operators.html#inverf(p:Double):Double", "kind" : "def"}, {"label" : "erfcc", "tail" : "(x: Double): Double", "member" : "smile.math.Operators.erfcc", "link" : "smile\/math\/Operators.html#erfcc(x:Double):Double", "kind" : "def"}, {"label" : "erfc", "tail" : "(x: Double): Double", "member" : "smile.math.Operators.erfc", "link" : "smile\/math\/Operators.html#erfc(x:Double):Double", "kind" : "def"}, {"label" : "erf", "tail" : "(x: Double): Double", "member" : "smile.math.Operators.erf", "link" : "smile\/math\/Operators.html#erf(x:Double):Double", "kind" : "def"}, {"label" : "beta", "tail" : "(x: Double, y: Double): Double", "member" : "smile.math.Operators.beta", "link" : "smile\/math\/Operators.html#beta(x:Double,y:Double):Double", "kind" : "def"}, {"label" : "tanh", "tail" : "(x: MatrixExpression): TanhMatrix", "member" : "smile.math.Operators.tanh", "link" : "smile\/math\/Operators.html#tanh(x:smile.math.MatrixExpression):smile.math.TanhMatrix", "kind" : "def"}, {"label" : "tan", "tail" : "(x: MatrixExpression): TanMatrix", "member" : "smile.math.Operators.tan", "link" : "smile\/math\/Operators.html#tan(x:smile.math.MatrixExpression):smile.math.TanMatrix", "kind" : "def"}, {"label" : "sqrt", "tail" : "(x: MatrixExpression): SqrtMatrix", "member" : "smile.math.Operators.sqrt", "link" : "smile\/math\/Operators.html#sqrt(x:smile.math.MatrixExpression):smile.math.SqrtMatrix", "kind" : "def"}, {"label" : "sin", "tail" : "(x: MatrixExpression): SinMatrix", "member" : "smile.math.Operators.sin", "link" : "smile\/math\/Operators.html#sin(x:smile.math.MatrixExpression):smile.math.SinMatrix", "kind" : "def"}, {"label" : "round", "tail" : "(x: MatrixExpression): RoundMatrix", "member" : "smile.math.Operators.round", "link" : "smile\/math\/Operators.html#round(x:smile.math.MatrixExpression):smile.math.RoundMatrix", "kind" : "def"}, {"label" : "log1p", "tail" : "(x: MatrixExpression): Log1pMatrix", "member" : "smile.math.Operators.log1p", "link" : "smile\/math\/Operators.html#log1p(x:smile.math.MatrixExpression):smile.math.Log1pMatrix", "kind" : "def"}, {"label" : "log10", "tail" : "(x: MatrixExpression): Log10Matrix", "member" : "smile.math.Operators.log10", "link" : "smile\/math\/Operators.html#log10(x:smile.math.MatrixExpression):smile.math.Log10Matrix", "kind" : "def"}, {"label" : "log2", "tail" : "(x: MatrixExpression): Log2Matrix", "member" : "smile.math.Operators.log2", "link" : "smile\/math\/Operators.html#log2(x:smile.math.MatrixExpression):smile.math.Log2Matrix", "kind" : "def"}, {"label" : "log", "tail" : "(x: MatrixExpression): LogMatrix", "member" : "smile.math.Operators.log", "link" : "smile\/math\/Operators.html#log(x:smile.math.MatrixExpression):smile.math.LogMatrix", "kind" : "def"}, {"label" : "floop", "tail" : "(x: MatrixExpression): FloorMatrix", "member" : "smile.math.Operators.floop", "link" : "smile\/math\/Operators.html#floop(x:smile.math.MatrixExpression):smile.math.FloorMatrix", "kind" : "def"}, {"label" : "expm1", "tail" : "(x: MatrixExpression): Expm1Matrix", "member" : "smile.math.Operators.expm1", "link" : "smile\/math\/Operators.html#expm1(x:smile.math.MatrixExpression):smile.math.Expm1Matrix", "kind" : "def"}, {"label" : "exp", "tail" : "(x: MatrixExpression): ExpMatrix", "member" : "smile.math.Operators.exp", "link" : "smile\/math\/Operators.html#exp(x:smile.math.MatrixExpression):smile.math.ExpMatrix", "kind" : "def"}, {"label" : "ceil", "tail" : "(x: MatrixExpression): CeilMatrix", "member" : "smile.math.Operators.ceil", "link" : "smile\/math\/Operators.html#ceil(x:smile.math.MatrixExpression):smile.math.CeilMatrix", "kind" : "def"}, {"label" : "cbrt", "tail" : "(x: MatrixExpression): CbrtMatrix", "member" : "smile.math.Operators.cbrt", "link" : "smile\/math\/Operators.html#cbrt(x:smile.math.MatrixExpression):smile.math.CbrtMatrix", "kind" : "def"}, {"label" : "atan", "tail" : "(x: MatrixExpression): AtanMatrix", "member" : "smile.math.Operators.atan", "link" : "smile\/math\/Operators.html#atan(x:smile.math.MatrixExpression):smile.math.AtanMatrix", "kind" : "def"}, {"label" : "asin", "tail" : "(x: MatrixExpression): AsinMatrix", "member" : "smile.math.Operators.asin", "link" : "smile\/math\/Operators.html#asin(x:smile.math.MatrixExpression):smile.math.AsinMatrix", "kind" : "def"}, {"label" : "acos", "tail" : "(x: MatrixExpression): AcosMatrix", "member" : "smile.math.Operators.acos", "link" : "smile\/math\/Operators.html#acos(x:smile.math.MatrixExpression):smile.math.AcosMatrix", "kind" : "def"}, {"label" : "abs", "tail" : "(x: MatrixExpression): AbsMatrix", "member" : "smile.math.Operators.abs", "link" : "smile\/math\/Operators.html#abs(x:smile.math.MatrixExpression):smile.math.AbsMatrix", "kind" : "def"}, {"label" : "tanh", "tail" : "(x: VectorExpression): TanhVector", "member" : "smile.math.Operators.tanh", "link" : "smile\/math\/Operators.html#tanh(x:smile.math.VectorExpression):smile.math.TanhVector", "kind" : "def"}, {"label" : "tan", "tail" : "(x: VectorExpression): TanVector", "member" : "smile.math.Operators.tan", "link" : "smile\/math\/Operators.html#tan(x:smile.math.VectorExpression):smile.math.TanVector", "kind" : "def"}, {"label" : "sqrt", "tail" : "(x: VectorExpression): SqrtVector", "member" : "smile.math.Operators.sqrt", "link" : "smile\/math\/Operators.html#sqrt(x:smile.math.VectorExpression):smile.math.SqrtVector", "kind" : "def"}, {"label" : "sin", "tail" : "(x: VectorExpression): SinVector", "member" : "smile.math.Operators.sin", "link" : "smile\/math\/Operators.html#sin(x:smile.math.VectorExpression):smile.math.SinVector", "kind" : "def"}, {"label" : "round", "tail" : "(x: VectorExpression): RoundVector", "member" : "smile.math.Operators.round", "link" : "smile\/math\/Operators.html#round(x:smile.math.VectorExpression):smile.math.RoundVector", "kind" : "def"}, {"label" : "log1p", "tail" : "(x: VectorExpression): Log1pVector", "member" : "smile.math.Operators.log1p", "link" : "smile\/math\/Operators.html#log1p(x:smile.math.VectorExpression):smile.math.Log1pVector", "kind" : "def"}, {"label" : "log10", "tail" : "(x: VectorExpression): Log10Vector", "member" : "smile.math.Operators.log10", "link" : "smile\/math\/Operators.html#log10(x:smile.math.VectorExpression):smile.math.Log10Vector", "kind" : "def"}, {"label" : "log2", "tail" : "(x: VectorExpression): Log2Vector", "member" : "smile.math.Operators.log2", "link" : "smile\/math\/Operators.html#log2(x:smile.math.VectorExpression):smile.math.Log2Vector", "kind" : "def"}, {"label" : "log", "tail" : "(x: VectorExpression): LogVector", "member" : "smile.math.Operators.log", "link" : "smile\/math\/Operators.html#log(x:smile.math.VectorExpression):smile.math.LogVector", "kind" : "def"}, {"label" : "floop", "tail" : "(x: VectorExpression): FloorVector", "member" : "smile.math.Operators.floop", "link" : "smile\/math\/Operators.html#floop(x:smile.math.VectorExpression):smile.math.FloorVector", "kind" : "def"}, {"label" : "expm1", "tail" : "(x: VectorExpression): Expm1Vector", "member" : "smile.math.Operators.expm1", "link" : "smile\/math\/Operators.html#expm1(x:smile.math.VectorExpression):smile.math.Expm1Vector", "kind" : "def"}, {"label" : "exp", "tail" : "(x: VectorExpression): ExpVector", "member" : "smile.math.Operators.exp", "link" : "smile\/math\/Operators.html#exp(x:smile.math.VectorExpression):smile.math.ExpVector", "kind" : "def"}, {"label" : "ceil", "tail" : "(x: VectorExpression): CeilVector", "member" : "smile.math.Operators.ceil", "link" : "smile\/math\/Operators.html#ceil(x:smile.math.VectorExpression):smile.math.CeilVector", "kind" : "def"}, {"label" : "cbrt", "tail" : "(x: VectorExpression): CbrtVector", "member" : "smile.math.Operators.cbrt", "link" : "smile\/math\/Operators.html#cbrt(x:smile.math.VectorExpression):smile.math.CbrtVector", "kind" : "def"}, {"label" : "atan", "tail" : "(x: VectorExpression): AtanVector", "member" : "smile.math.Operators.atan", "link" : "smile\/math\/Operators.html#atan(x:smile.math.VectorExpression):smile.math.AtanVector", "kind" : "def"}, {"label" : "asin", "tail" : "(x: VectorExpression): AsinVector", "member" : "smile.math.Operators.asin", "link" : "smile\/math\/Operators.html#asin(x:smile.math.VectorExpression):smile.math.AsinVector", "kind" : "def"}, {"label" : "acos", "tail" : "(x: VectorExpression): AcosVector", "member" : "smile.math.Operators.acos", "link" : "smile\/math\/Operators.html#acos(x:smile.math.VectorExpression):smile.math.AcosVector", "kind" : "def"}, {"label" : "abs", "tail" : "(x: VectorExpression): AbsVector", "member" : "smile.math.Operators.abs", "link" : "smile\/math\/Operators.html#abs(x:smile.math.VectorExpression):smile.math.AbsVector", "kind" : "def"}, {"label" : "matrixExpression2Array", "tail" : "(exp: MatrixExpression): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array", "link" : "smile\/math\/Operators.html#matrixExpression2Array(exp:smile.math.MatrixExpression):smile.math.matrix.DenseMatrix", "kind" : "implicit def"}, {"label" : "matrix2MatrixExpression", "tail" : "(x: DenseMatrix): MatrixLift", "member" : "smile.math.Operators.matrix2MatrixExpression", "link" : "smile\/math\/Operators.html#matrix2MatrixExpression(x:smile.math.matrix.DenseMatrix):smile.math.MatrixLift", "kind" : "implicit def"}, {"label" : "vectorExpression2Array", "tail" : "(exp: VectorExpression): Array[Double]", "member" : "smile.math.Operators.vectorExpression2Array", "link" : "smile\/math\/Operators.html#vectorExpression2Array(exp:smile.math.VectorExpression):Array[Double]", "kind" : "implicit def"}, {"label" : "array2VectorExpression", "tail" : "(x: Array[Double]): VectorLift", "member" : "smile.math.Operators.array2VectorExpression", "link" : "smile\/math\/Operators.html#array2VectorExpression(x:Array[Double]):smile.math.VectorLift", "kind" : "implicit def"}, {"label" : "pimpMatrix", "tail" : "(matrix: DenseMatrix): PimpedMatrix", "member" : "smile.math.Operators.pimpMatrix", "link" : "smile\/math\/Operators.html#pimpMatrix(matrix:smile.math.matrix.DenseMatrix):smile.math.PimpedMatrix", "kind" : "implicit def"}, {"label" : "pimpArray2D", "tail" : "(data: Array[Array[Double]]): PimpedArray2D", "member" : "smile.math.Operators.pimpArray2D", "link" : "smile\/math\/Operators.html#pimpArray2D(data:Array[Array[Double]]):smile.math.PimpedArray2D", "kind" : "implicit def"}, {"label" : "pimpDoubleArray", "tail" : "(data: Array[Double]): PimpedDoubleArray", "member" : "smile.math.Operators.pimpDoubleArray", "link" : "smile\/math\/Operators.html#pimpDoubleArray(data:Array[Double]):smile.math.PimpedDoubleArray", "kind" : "implicit def"}, {"label" : "pimpIntArray", "tail" : "(data: Array[Int]): PimpedArray[Int]", "member" : "smile.math.Operators.pimpIntArray", "link" : "smile\/math\/Operators.html#pimpIntArray(data:Array[Int]):smile.math.PimpedArray[Int]", "kind" : "implicit def"}, {"label" : "pimpDouble", "tail" : "(x: Double): PimpedDouble", "member" : "smile.math.Operators.pimpDouble", "link" : "smile\/math\/Operators.html#pimpDouble(x:Double):smile.math.PimpedDouble", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/Operators.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/Operators.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/Operators.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/Operators.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/Operators.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/Operators.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/Operators.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Operators.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Operators.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Operators.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/Operators.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/Operators.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/math\/Operators.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/Operators.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/math\/Operators.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/math\/Operators.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/Operators.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/Operators.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/Operators.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "High level feature selection operators.", "trait" : "smile\/math\/Operators.html", "kind" : "trait"}, {"name" : "smile.math.RoundMatrix", "shortDescription" : "", "members_case class" : [{"label" : "array", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.Operators.matrixExpression2Array.array", "link" : "smile\/math\/RoundMatrix.html#array():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.sum", "link" : "smile\/math\/RoundMatrix.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/RoundMatrix.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/RoundMatrix.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/RoundMatrix.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/RoundMatrix.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/RoundMatrix.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/RoundMatrix.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/RoundMatrix.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/RoundMatrix.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/RoundMatrix.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/RoundMatrix.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/RoundMatrix.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/RoundMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/RoundMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/RoundMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/RoundMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/RoundMatrix.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/RoundMatrix.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colMeans", "link" : "smile\/math\/RoundMatrix.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colSums", "link" : "smile\/math\/RoundMatrix.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowMeans", "link" : "smile\/math\/RoundMatrix.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowSums", "link" : "smile\/math\/RoundMatrix.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.Operators.matrixExpression2Array.xax", "link" : "smile\/math\/RoundMatrix.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normFro", "link" : "smile\/math\/RoundMatrix.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normInf", "link" : "smile\/math\/RoundMatrix.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm", "link" : "smile\/math\/RoundMatrix.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm2", "link" : "smile\/math\/RoundMatrix.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm1", "link" : "smile\/math\/RoundMatrix.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/RoundMatrix.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/RoundMatrix.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/RoundMatrix.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/RoundMatrix.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/RoundMatrix.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/RoundMatrix.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/RoundMatrix.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/RoundMatrix.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.update", "link" : "smile\/math\/RoundMatrix.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/RoundMatrix.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/RoundMatrix.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/RoundMatrix.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/RoundMatrix.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.trace", "link" : "smile\/math\/RoundMatrix.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.diag", "link" : "smile\/math\/RoundMatrix.html#diag():Array[Double]", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.Operators.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/RoundMatrix.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.Operators.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/RoundMatrix.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/RoundMatrix.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/RoundMatrix.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/RoundMatrix.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/RoundMatrix.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.aat", "link" : "smile\/math\/RoundMatrix.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.ata", "link" : "smile\/math\/RoundMatrix.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "copy", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.copy", "link" : "smile\/math\/RoundMatrix.html#copy():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.transpose", "link" : "smile\/math\/RoundMatrix.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/RoundMatrix.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/RoundMatrix.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/RoundMatrix.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/RoundMatrix.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/RoundMatrix.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/RoundMatrix.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.set", "link" : "smile\/math\/RoundMatrix.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.Operators.matrixExpression2Array.ld", "link" : "smile\/math\/RoundMatrix.html#ld():Int", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.data", "link" : "smile\/math\/RoundMatrix.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.atbmm", "link" : "smile\/math\/RoundMatrix.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abtmm", "link" : "smile\/math\/RoundMatrix.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abmm", "link" : "smile\/math\/RoundMatrix.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/RoundMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/RoundMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atx", "link" : "smile\/math\/RoundMatrix.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/RoundMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/RoundMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.ax", "link" : "smile\/math\/RoundMatrix.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.Operators.matrixExpression2Array.get", "link" : "smile\/math\/RoundMatrix.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/RoundMatrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (RoundMatrix) ⇒ Boolean, msg: ⇒ Any): RoundMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/RoundMatrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (RoundMatrix) ⇒ Boolean): RoundMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/RoundMatrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): RoundMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/RoundMatrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): RoundMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/RoundMatrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (RoundMatrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/RoundMatrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (RoundMatrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/RoundMatrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.RoundMatrix.toMatrix", "link" : "smile\/math\/RoundMatrix.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.RoundMatrix.apply", "link" : "smile\/math\/RoundMatrix.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.RoundMatrix.ncols", "link" : "smile\/math\/RoundMatrix.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.RoundMatrix.nrows", "link" : "smile\/math\/RoundMatrix.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.RoundMatrix#<init>", "error" : "unsupported entity"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.RoundMatrix.A", "link" : "smile\/math\/RoundMatrix.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/RoundMatrix.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/RoundMatrix.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/RoundMatrix.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/RoundMatrix.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/RoundMatrix.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/RoundMatrix.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/RoundMatrix.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/RoundMatrix.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/RoundMatrix.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/RoundMatrix.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/RoundMatrix.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/RoundMatrix.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/RoundMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/RoundMatrix.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/RoundMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/RoundMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/RoundMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/RoundMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/RoundMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/RoundMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/RoundMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/RoundMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/RoundMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/RoundMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/RoundMatrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/RoundMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/RoundMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/RoundMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/RoundMatrix.html", "kind" : "case class"}, {"name" : "smile.math.RoundVector", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.Operators.vectorExpression2Array.update", "link" : "smile\/math\/RoundVector.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/RoundVector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (RoundVector) ⇒ Boolean, msg: ⇒ Any): RoundVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/RoundVector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (RoundVector) ⇒ Boolean): RoundVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/RoundVector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): RoundVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/RoundVector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): RoundVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/RoundVector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (RoundVector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/RoundVector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (RoundVector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/RoundVector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.RoundVector.toArray", "link" : "smile\/math\/RoundVector.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.RoundVector.apply", "link" : "smile\/math\/RoundVector.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.RoundVector.length", "link" : "smile\/math\/RoundVector.html#length:Int", "kind" : "def"}, {"member" : "smile.math.RoundVector#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.RoundVector.x", "link" : "smile\/math\/RoundVector.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/RoundVector.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/RoundVector.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/RoundVector.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/RoundVector.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/RoundVector.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/RoundVector.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/RoundVector.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/RoundVector.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/RoundVector.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/RoundVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/RoundVector.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/RoundVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/RoundVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/RoundVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/RoundVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/RoundVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/RoundVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/RoundVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/RoundVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/RoundVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/RoundVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/RoundVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/RoundVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/RoundVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/RoundVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/RoundVector.html", "kind" : "case class"}, {"name" : "smile.math.SinMatrix", "shortDescription" : "", "members_case class" : [{"label" : "array", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.Operators.matrixExpression2Array.array", "link" : "smile\/math\/SinMatrix.html#array():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.sum", "link" : "smile\/math\/SinMatrix.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/SinMatrix.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/SinMatrix.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/SinMatrix.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/SinMatrix.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/SinMatrix.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/SinMatrix.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/SinMatrix.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/SinMatrix.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/SinMatrix.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/SinMatrix.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/SinMatrix.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/SinMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/SinMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/SinMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/SinMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/SinMatrix.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/SinMatrix.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colMeans", "link" : "smile\/math\/SinMatrix.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colSums", "link" : "smile\/math\/SinMatrix.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowMeans", "link" : "smile\/math\/SinMatrix.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowSums", "link" : "smile\/math\/SinMatrix.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.Operators.matrixExpression2Array.xax", "link" : "smile\/math\/SinMatrix.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normFro", "link" : "smile\/math\/SinMatrix.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normInf", "link" : "smile\/math\/SinMatrix.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm", "link" : "smile\/math\/SinMatrix.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm2", "link" : "smile\/math\/SinMatrix.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm1", "link" : "smile\/math\/SinMatrix.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/SinMatrix.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/SinMatrix.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/SinMatrix.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/SinMatrix.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/SinMatrix.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/SinMatrix.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/SinMatrix.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/SinMatrix.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.update", "link" : "smile\/math\/SinMatrix.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/SinMatrix.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/SinMatrix.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/SinMatrix.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/SinMatrix.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.trace", "link" : "smile\/math\/SinMatrix.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.diag", "link" : "smile\/math\/SinMatrix.html#diag():Array[Double]", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.Operators.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/SinMatrix.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.Operators.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/SinMatrix.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/SinMatrix.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/SinMatrix.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/SinMatrix.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/SinMatrix.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.aat", "link" : "smile\/math\/SinMatrix.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.ata", "link" : "smile\/math\/SinMatrix.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "copy", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.copy", "link" : "smile\/math\/SinMatrix.html#copy():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.transpose", "link" : "smile\/math\/SinMatrix.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/SinMatrix.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/SinMatrix.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/SinMatrix.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/SinMatrix.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/SinMatrix.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/SinMatrix.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.set", "link" : "smile\/math\/SinMatrix.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.Operators.matrixExpression2Array.ld", "link" : "smile\/math\/SinMatrix.html#ld():Int", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.data", "link" : "smile\/math\/SinMatrix.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.atbmm", "link" : "smile\/math\/SinMatrix.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abtmm", "link" : "smile\/math\/SinMatrix.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abmm", "link" : "smile\/math\/SinMatrix.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/SinMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/SinMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atx", "link" : "smile\/math\/SinMatrix.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/SinMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/SinMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.ax", "link" : "smile\/math\/SinMatrix.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.Operators.matrixExpression2Array.get", "link" : "smile\/math\/SinMatrix.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/SinMatrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SinMatrix) ⇒ Boolean, msg: ⇒ Any): SinMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/SinMatrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SinMatrix) ⇒ Boolean): SinMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/SinMatrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): SinMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/SinMatrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): SinMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/SinMatrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (SinMatrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/SinMatrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (SinMatrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/SinMatrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.SinMatrix.toMatrix", "link" : "smile\/math\/SinMatrix.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.SinMatrix.apply", "link" : "smile\/math\/SinMatrix.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.SinMatrix.ncols", "link" : "smile\/math\/SinMatrix.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.SinMatrix.nrows", "link" : "smile\/math\/SinMatrix.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.SinMatrix#<init>", "error" : "unsupported entity"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.SinMatrix.A", "link" : "smile\/math\/SinMatrix.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/SinMatrix.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/SinMatrix.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/SinMatrix.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/SinMatrix.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/SinMatrix.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/SinMatrix.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/SinMatrix.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/SinMatrix.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/SinMatrix.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/SinMatrix.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/SinMatrix.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/SinMatrix.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/SinMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/SinMatrix.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/SinMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/SinMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/SinMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/SinMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/SinMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/SinMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/SinMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/SinMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/SinMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/SinMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/SinMatrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/SinMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/SinMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/SinMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/SinMatrix.html", "kind" : "case class"}, {"name" : "smile.math.SinVector", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.Operators.vectorExpression2Array.update", "link" : "smile\/math\/SinVector.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/SinVector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SinVector) ⇒ Boolean, msg: ⇒ Any): SinVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/SinVector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SinVector) ⇒ Boolean): SinVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/SinVector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): SinVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/SinVector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): SinVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/SinVector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (SinVector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/SinVector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (SinVector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/SinVector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.SinVector.toArray", "link" : "smile\/math\/SinVector.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.SinVector.apply", "link" : "smile\/math\/SinVector.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.SinVector.length", "link" : "smile\/math\/SinVector.html#length:Int", "kind" : "def"}, {"member" : "smile.math.SinVector#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.SinVector.x", "link" : "smile\/math\/SinVector.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/SinVector.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/SinVector.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/SinVector.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/SinVector.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/SinVector.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/SinVector.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/SinVector.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/SinVector.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/SinVector.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/SinVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/SinVector.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/SinVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/SinVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/SinVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/SinVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/SinVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/SinVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/SinVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/SinVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/SinVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/SinVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/SinVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/SinVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/SinVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/SinVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/SinVector.html", "kind" : "case class"}, {"name" : "smile.math.SqrtMatrix", "shortDescription" : "", "members_case class" : [{"label" : "array", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.Operators.matrixExpression2Array.array", "link" : "smile\/math\/SqrtMatrix.html#array():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.sum", "link" : "smile\/math\/SqrtMatrix.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/SqrtMatrix.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/SqrtMatrix.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/SqrtMatrix.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/SqrtMatrix.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/SqrtMatrix.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/SqrtMatrix.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/SqrtMatrix.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/SqrtMatrix.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/SqrtMatrix.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/SqrtMatrix.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/SqrtMatrix.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/SqrtMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/SqrtMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/SqrtMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/SqrtMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/SqrtMatrix.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/SqrtMatrix.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colMeans", "link" : "smile\/math\/SqrtMatrix.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colSums", "link" : "smile\/math\/SqrtMatrix.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowMeans", "link" : "smile\/math\/SqrtMatrix.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowSums", "link" : "smile\/math\/SqrtMatrix.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.Operators.matrixExpression2Array.xax", "link" : "smile\/math\/SqrtMatrix.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normFro", "link" : "smile\/math\/SqrtMatrix.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normInf", "link" : "smile\/math\/SqrtMatrix.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm", "link" : "smile\/math\/SqrtMatrix.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm2", "link" : "smile\/math\/SqrtMatrix.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm1", "link" : "smile\/math\/SqrtMatrix.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/SqrtMatrix.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/SqrtMatrix.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/SqrtMatrix.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/SqrtMatrix.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/SqrtMatrix.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/SqrtMatrix.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/SqrtMatrix.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/SqrtMatrix.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.update", "link" : "smile\/math\/SqrtMatrix.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/SqrtMatrix.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/SqrtMatrix.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/SqrtMatrix.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/SqrtMatrix.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.trace", "link" : "smile\/math\/SqrtMatrix.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.diag", "link" : "smile\/math\/SqrtMatrix.html#diag():Array[Double]", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.Operators.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/SqrtMatrix.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.Operators.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/SqrtMatrix.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/SqrtMatrix.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/SqrtMatrix.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/SqrtMatrix.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/SqrtMatrix.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.aat", "link" : "smile\/math\/SqrtMatrix.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.ata", "link" : "smile\/math\/SqrtMatrix.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "copy", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.copy", "link" : "smile\/math\/SqrtMatrix.html#copy():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.transpose", "link" : "smile\/math\/SqrtMatrix.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/SqrtMatrix.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/SqrtMatrix.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/SqrtMatrix.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/SqrtMatrix.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/SqrtMatrix.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/SqrtMatrix.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.set", "link" : "smile\/math\/SqrtMatrix.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.Operators.matrixExpression2Array.ld", "link" : "smile\/math\/SqrtMatrix.html#ld():Int", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.data", "link" : "smile\/math\/SqrtMatrix.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.atbmm", "link" : "smile\/math\/SqrtMatrix.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abtmm", "link" : "smile\/math\/SqrtMatrix.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abmm", "link" : "smile\/math\/SqrtMatrix.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/SqrtMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/SqrtMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atx", "link" : "smile\/math\/SqrtMatrix.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/SqrtMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/SqrtMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.ax", "link" : "smile\/math\/SqrtMatrix.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.Operators.matrixExpression2Array.get", "link" : "smile\/math\/SqrtMatrix.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/SqrtMatrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SqrtMatrix) ⇒ Boolean, msg: ⇒ Any): SqrtMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/SqrtMatrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SqrtMatrix) ⇒ Boolean): SqrtMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/SqrtMatrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): SqrtMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/SqrtMatrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): SqrtMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/SqrtMatrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (SqrtMatrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/SqrtMatrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (SqrtMatrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/SqrtMatrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.SqrtMatrix.toMatrix", "link" : "smile\/math\/SqrtMatrix.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.SqrtMatrix.apply", "link" : "smile\/math\/SqrtMatrix.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.SqrtMatrix.ncols", "link" : "smile\/math\/SqrtMatrix.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.SqrtMatrix.nrows", "link" : "smile\/math\/SqrtMatrix.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.SqrtMatrix#<init>", "error" : "unsupported entity"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.SqrtMatrix.A", "link" : "smile\/math\/SqrtMatrix.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/SqrtMatrix.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/SqrtMatrix.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/SqrtMatrix.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/SqrtMatrix.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/SqrtMatrix.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/SqrtMatrix.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/SqrtMatrix.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/SqrtMatrix.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/SqrtMatrix.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/SqrtMatrix.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/SqrtMatrix.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/SqrtMatrix.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/SqrtMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/SqrtMatrix.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/SqrtMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/SqrtMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/SqrtMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/SqrtMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/SqrtMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/SqrtMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/SqrtMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/SqrtMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/SqrtMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/SqrtMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/SqrtMatrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/SqrtMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/SqrtMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/SqrtMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/SqrtMatrix.html", "kind" : "case class"}, {"name" : "smile.math.SqrtVector", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.Operators.vectorExpression2Array.update", "link" : "smile\/math\/SqrtVector.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/SqrtVector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SqrtVector) ⇒ Boolean, msg: ⇒ Any): SqrtVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/SqrtVector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SqrtVector) ⇒ Boolean): SqrtVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/SqrtVector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): SqrtVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/SqrtVector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): SqrtVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/SqrtVector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (SqrtVector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/SqrtVector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (SqrtVector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/SqrtVector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.SqrtVector.toArray", "link" : "smile\/math\/SqrtVector.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.SqrtVector.apply", "link" : "smile\/math\/SqrtVector.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.SqrtVector.length", "link" : "smile\/math\/SqrtVector.html#length:Int", "kind" : "def"}, {"member" : "smile.math.SqrtVector#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.SqrtVector.x", "link" : "smile\/math\/SqrtVector.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/SqrtVector.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/SqrtVector.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/SqrtVector.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/SqrtVector.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/SqrtVector.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/SqrtVector.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/SqrtVector.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/SqrtVector.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/SqrtVector.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/SqrtVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/SqrtVector.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/SqrtVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/SqrtVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/SqrtVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/SqrtVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/SqrtVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/SqrtVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/SqrtVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/SqrtVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/SqrtVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/SqrtVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/SqrtVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/SqrtVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/SqrtVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/SqrtVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/SqrtVector.html", "kind" : "case class"}, {"name" : "smile.math.TanhMatrix", "shortDescription" : "", "members_case class" : [{"label" : "array", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.Operators.matrixExpression2Array.array", "link" : "smile\/math\/TanhMatrix.html#array():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.sum", "link" : "smile\/math\/TanhMatrix.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/TanhMatrix.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/TanhMatrix.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/TanhMatrix.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/TanhMatrix.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/TanhMatrix.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/TanhMatrix.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/TanhMatrix.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/TanhMatrix.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/TanhMatrix.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/TanhMatrix.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/TanhMatrix.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/TanhMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/TanhMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/TanhMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/TanhMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/TanhMatrix.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/TanhMatrix.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colMeans", "link" : "smile\/math\/TanhMatrix.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colSums", "link" : "smile\/math\/TanhMatrix.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowMeans", "link" : "smile\/math\/TanhMatrix.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowSums", "link" : "smile\/math\/TanhMatrix.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.Operators.matrixExpression2Array.xax", "link" : "smile\/math\/TanhMatrix.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normFro", "link" : "smile\/math\/TanhMatrix.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normInf", "link" : "smile\/math\/TanhMatrix.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm", "link" : "smile\/math\/TanhMatrix.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm2", "link" : "smile\/math\/TanhMatrix.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm1", "link" : "smile\/math\/TanhMatrix.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/TanhMatrix.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/TanhMatrix.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/TanhMatrix.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/TanhMatrix.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/TanhMatrix.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/TanhMatrix.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/TanhMatrix.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/TanhMatrix.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.update", "link" : "smile\/math\/TanhMatrix.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/TanhMatrix.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/TanhMatrix.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/TanhMatrix.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/TanhMatrix.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.trace", "link" : "smile\/math\/TanhMatrix.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.diag", "link" : "smile\/math\/TanhMatrix.html#diag():Array[Double]", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.Operators.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/TanhMatrix.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.Operators.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/TanhMatrix.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/TanhMatrix.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/TanhMatrix.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/TanhMatrix.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/TanhMatrix.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.aat", "link" : "smile\/math\/TanhMatrix.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.ata", "link" : "smile\/math\/TanhMatrix.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "copy", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.copy", "link" : "smile\/math\/TanhMatrix.html#copy():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.transpose", "link" : "smile\/math\/TanhMatrix.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/TanhMatrix.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/TanhMatrix.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/TanhMatrix.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/TanhMatrix.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/TanhMatrix.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/TanhMatrix.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.set", "link" : "smile\/math\/TanhMatrix.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.Operators.matrixExpression2Array.ld", "link" : "smile\/math\/TanhMatrix.html#ld():Int", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.data", "link" : "smile\/math\/TanhMatrix.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.atbmm", "link" : "smile\/math\/TanhMatrix.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abtmm", "link" : "smile\/math\/TanhMatrix.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abmm", "link" : "smile\/math\/TanhMatrix.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/TanhMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/TanhMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atx", "link" : "smile\/math\/TanhMatrix.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/TanhMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/TanhMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.ax", "link" : "smile\/math\/TanhMatrix.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.Operators.matrixExpression2Array.get", "link" : "smile\/math\/TanhMatrix.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/TanhMatrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TanhMatrix) ⇒ Boolean, msg: ⇒ Any): TanhMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/TanhMatrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TanhMatrix) ⇒ Boolean): TanhMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/TanhMatrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): TanhMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/TanhMatrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): TanhMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/TanhMatrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (TanhMatrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/TanhMatrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (TanhMatrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/TanhMatrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.TanhMatrix.toMatrix", "link" : "smile\/math\/TanhMatrix.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.TanhMatrix.apply", "link" : "smile\/math\/TanhMatrix.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.TanhMatrix.ncols", "link" : "smile\/math\/TanhMatrix.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.TanhMatrix.nrows", "link" : "smile\/math\/TanhMatrix.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.TanhMatrix#<init>", "error" : "unsupported entity"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.TanhMatrix.A", "link" : "smile\/math\/TanhMatrix.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/TanhMatrix.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/TanhMatrix.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/TanhMatrix.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/TanhMatrix.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/TanhMatrix.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/TanhMatrix.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/TanhMatrix.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/TanhMatrix.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/TanhMatrix.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/TanhMatrix.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/TanhMatrix.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/TanhMatrix.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/TanhMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/TanhMatrix.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/TanhMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/TanhMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/TanhMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/TanhMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/TanhMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/TanhMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/TanhMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/TanhMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/TanhMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/TanhMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/TanhMatrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/TanhMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/TanhMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/TanhMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/TanhMatrix.html", "kind" : "case class"}, {"name" : "smile.math.TanhVector", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.Operators.vectorExpression2Array.update", "link" : "smile\/math\/TanhVector.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/TanhVector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TanhVector) ⇒ Boolean, msg: ⇒ Any): TanhVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/TanhVector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TanhVector) ⇒ Boolean): TanhVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/TanhVector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): TanhVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/TanhVector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): TanhVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/TanhVector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (TanhVector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/TanhVector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (TanhVector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/TanhVector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.TanhVector.toArray", "link" : "smile\/math\/TanhVector.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.TanhVector.apply", "link" : "smile\/math\/TanhVector.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.TanhVector.length", "link" : "smile\/math\/TanhVector.html#length:Int", "kind" : "def"}, {"member" : "smile.math.TanhVector#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.TanhVector.x", "link" : "smile\/math\/TanhVector.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/TanhVector.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/TanhVector.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/TanhVector.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/TanhVector.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/TanhVector.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/TanhVector.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/TanhVector.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/TanhVector.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/TanhVector.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/TanhVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/TanhVector.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/TanhVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/TanhVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/TanhVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/TanhVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/TanhVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/TanhVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/TanhVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/TanhVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/TanhVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/TanhVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/TanhVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/TanhVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/TanhVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/TanhVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/TanhVector.html", "kind" : "case class"}, {"name" : "smile.math.TanMatrix", "shortDescription" : "", "members_case class" : [{"label" : "array", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.Operators.matrixExpression2Array.array", "link" : "smile\/math\/TanMatrix.html#array():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.sum", "link" : "smile\/math\/TanMatrix.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/TanMatrix.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/TanMatrix.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/TanMatrix.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/TanMatrix.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/TanMatrix.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/TanMatrix.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/TanMatrix.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/TanMatrix.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/TanMatrix.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/TanMatrix.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/TanMatrix.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/TanMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/TanMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/TanMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/TanMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/TanMatrix.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/TanMatrix.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colMeans", "link" : "smile\/math\/TanMatrix.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colSums", "link" : "smile\/math\/TanMatrix.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowMeans", "link" : "smile\/math\/TanMatrix.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowSums", "link" : "smile\/math\/TanMatrix.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.Operators.matrixExpression2Array.xax", "link" : "smile\/math\/TanMatrix.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normFro", "link" : "smile\/math\/TanMatrix.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normInf", "link" : "smile\/math\/TanMatrix.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm", "link" : "smile\/math\/TanMatrix.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm2", "link" : "smile\/math\/TanMatrix.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm1", "link" : "smile\/math\/TanMatrix.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/TanMatrix.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/TanMatrix.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/TanMatrix.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/TanMatrix.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/TanMatrix.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/TanMatrix.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/TanMatrix.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/TanMatrix.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.update", "link" : "smile\/math\/TanMatrix.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/TanMatrix.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/TanMatrix.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/TanMatrix.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/TanMatrix.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.trace", "link" : "smile\/math\/TanMatrix.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.diag", "link" : "smile\/math\/TanMatrix.html#diag():Array[Double]", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.Operators.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/TanMatrix.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.Operators.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/TanMatrix.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/TanMatrix.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/TanMatrix.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/TanMatrix.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/TanMatrix.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.aat", "link" : "smile\/math\/TanMatrix.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.ata", "link" : "smile\/math\/TanMatrix.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "copy", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.copy", "link" : "smile\/math\/TanMatrix.html#copy():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.transpose", "link" : "smile\/math\/TanMatrix.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/TanMatrix.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/TanMatrix.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/TanMatrix.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/TanMatrix.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/TanMatrix.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/TanMatrix.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.set", "link" : "smile\/math\/TanMatrix.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.Operators.matrixExpression2Array.ld", "link" : "smile\/math\/TanMatrix.html#ld():Int", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.data", "link" : "smile\/math\/TanMatrix.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.atbmm", "link" : "smile\/math\/TanMatrix.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abtmm", "link" : "smile\/math\/TanMatrix.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abmm", "link" : "smile\/math\/TanMatrix.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/TanMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/TanMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atx", "link" : "smile\/math\/TanMatrix.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/TanMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/TanMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.ax", "link" : "smile\/math\/TanMatrix.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.Operators.matrixExpression2Array.get", "link" : "smile\/math\/TanMatrix.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/TanMatrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TanMatrix) ⇒ Boolean, msg: ⇒ Any): TanMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/TanMatrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TanMatrix) ⇒ Boolean): TanMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/TanMatrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): TanMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/TanMatrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): TanMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/TanMatrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (TanMatrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/TanMatrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (TanMatrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/TanMatrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.TanMatrix.toMatrix", "link" : "smile\/math\/TanMatrix.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.TanMatrix.apply", "link" : "smile\/math\/TanMatrix.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.TanMatrix.ncols", "link" : "smile\/math\/TanMatrix.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.TanMatrix.nrows", "link" : "smile\/math\/TanMatrix.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.TanMatrix#<init>", "error" : "unsupported entity"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.TanMatrix.A", "link" : "smile\/math\/TanMatrix.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/TanMatrix.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/TanMatrix.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/TanMatrix.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/TanMatrix.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/TanMatrix.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/TanMatrix.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/TanMatrix.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/TanMatrix.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/TanMatrix.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/TanMatrix.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/TanMatrix.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/TanMatrix.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/TanMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/TanMatrix.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/TanMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/TanMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/TanMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/TanMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/TanMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/TanMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/TanMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/TanMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/TanMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/TanMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/TanMatrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/TanMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/TanMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/TanMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/TanMatrix.html", "kind" : "case class"}, {"name" : "smile.math.TanVector", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.Operators.vectorExpression2Array.update", "link" : "smile\/math\/TanVector.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/TanVector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TanVector) ⇒ Boolean, msg: ⇒ Any): TanVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/TanVector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TanVector) ⇒ Boolean): TanVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/TanVector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): TanVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/TanVector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): TanVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/TanVector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (TanVector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/TanVector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (TanVector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/TanVector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.TanVector.toArray", "link" : "smile\/math\/TanVector.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.TanVector.apply", "link" : "smile\/math\/TanVector.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.TanVector.length", "link" : "smile\/math\/TanVector.html#length:Int", "kind" : "def"}, {"member" : "smile.math.TanVector#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.TanVector.x", "link" : "smile\/math\/TanVector.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/TanVector.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/TanVector.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/TanVector.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/TanVector.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/TanVector.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/TanVector.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/TanVector.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/TanVector.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/TanVector.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/TanVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/TanVector.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/TanVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/TanVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/TanVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/TanVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/TanVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/TanVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/TanVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/TanVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/TanVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/TanVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/TanVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/TanVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/TanVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/TanVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/TanVector.html", "kind" : "case class"}, {"name" : "smile.math.ValueAddMatrix", "shortDescription" : "", "members_case class" : [{"label" : "array", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.Operators.matrixExpression2Array.array", "link" : "smile\/math\/ValueAddMatrix.html#array():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.sum", "link" : "smile\/math\/ValueAddMatrix.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/ValueAddMatrix.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/ValueAddMatrix.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/ValueAddMatrix.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/ValueAddMatrix.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/ValueAddMatrix.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/ValueAddMatrix.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/ValueAddMatrix.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/ValueAddMatrix.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/ValueAddMatrix.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/ValueAddMatrix.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/ValueAddMatrix.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/ValueAddMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/ValueAddMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/ValueAddMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/ValueAddMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/ValueAddMatrix.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/ValueAddMatrix.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colMeans", "link" : "smile\/math\/ValueAddMatrix.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colSums", "link" : "smile\/math\/ValueAddMatrix.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowMeans", "link" : "smile\/math\/ValueAddMatrix.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowSums", "link" : "smile\/math\/ValueAddMatrix.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.Operators.matrixExpression2Array.xax", "link" : "smile\/math\/ValueAddMatrix.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normFro", "link" : "smile\/math\/ValueAddMatrix.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normInf", "link" : "smile\/math\/ValueAddMatrix.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm", "link" : "smile\/math\/ValueAddMatrix.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm2", "link" : "smile\/math\/ValueAddMatrix.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm1", "link" : "smile\/math\/ValueAddMatrix.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/ValueAddMatrix.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/ValueAddMatrix.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/ValueAddMatrix.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/ValueAddMatrix.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/ValueAddMatrix.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/ValueAddMatrix.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/ValueAddMatrix.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/ValueAddMatrix.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.update", "link" : "smile\/math\/ValueAddMatrix.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/ValueAddMatrix.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/ValueAddMatrix.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/ValueAddMatrix.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/ValueAddMatrix.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.trace", "link" : "smile\/math\/ValueAddMatrix.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.diag", "link" : "smile\/math\/ValueAddMatrix.html#diag():Array[Double]", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.Operators.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/ValueAddMatrix.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.Operators.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/ValueAddMatrix.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/ValueAddMatrix.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/ValueAddMatrix.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/ValueAddMatrix.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/ValueAddMatrix.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.aat", "link" : "smile\/math\/ValueAddMatrix.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.ata", "link" : "smile\/math\/ValueAddMatrix.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "copy", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.copy", "link" : "smile\/math\/ValueAddMatrix.html#copy():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.transpose", "link" : "smile\/math\/ValueAddMatrix.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/ValueAddMatrix.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/ValueAddMatrix.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/ValueAddMatrix.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/ValueAddMatrix.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/ValueAddMatrix.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/ValueAddMatrix.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.set", "link" : "smile\/math\/ValueAddMatrix.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.Operators.matrixExpression2Array.ld", "link" : "smile\/math\/ValueAddMatrix.html#ld():Int", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.data", "link" : "smile\/math\/ValueAddMatrix.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.atbmm", "link" : "smile\/math\/ValueAddMatrix.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abtmm", "link" : "smile\/math\/ValueAddMatrix.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abmm", "link" : "smile\/math\/ValueAddMatrix.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/ValueAddMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/ValueAddMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atx", "link" : "smile\/math\/ValueAddMatrix.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/ValueAddMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/ValueAddMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.ax", "link" : "smile\/math\/ValueAddMatrix.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.Operators.matrixExpression2Array.get", "link" : "smile\/math\/ValueAddMatrix.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/ValueAddMatrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ValueAddMatrix) ⇒ Boolean, msg: ⇒ Any): ValueAddMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueAddMatrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ValueAddMatrix) ⇒ Boolean): ValueAddMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueAddMatrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ValueAddMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueAddMatrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ValueAddMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueAddMatrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ValueAddMatrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/ValueAddMatrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ValueAddMatrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/ValueAddMatrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.ValueAddMatrix.toMatrix", "link" : "smile\/math\/ValueAddMatrix.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.ValueAddMatrix.apply", "link" : "smile\/math\/ValueAddMatrix.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.ValueAddMatrix.ncols", "link" : "smile\/math\/ValueAddMatrix.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.ValueAddMatrix.nrows", "link" : "smile\/math\/ValueAddMatrix.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.ValueAddMatrix#<init>", "error" : "unsupported entity"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.ValueAddMatrix.A", "link" : "smile\/math\/ValueAddMatrix.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "y", "tail" : ": Double", "member" : "smile.math.ValueAddMatrix.y", "link" : "smile\/math\/ValueAddMatrix.html#y:Double", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/ValueAddMatrix.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/ValueAddMatrix.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/ValueAddMatrix.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/ValueAddMatrix.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/ValueAddMatrix.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/ValueAddMatrix.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/ValueAddMatrix.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/ValueAddMatrix.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/ValueAddMatrix.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/ValueAddMatrix.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/ValueAddMatrix.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/ValueAddMatrix.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/ValueAddMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/ValueAddMatrix.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/ValueAddMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/ValueAddMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/ValueAddMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/ValueAddMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/ValueAddMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ValueAddMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ValueAddMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ValueAddMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/ValueAddMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/ValueAddMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/ValueAddMatrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/ValueAddMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/ValueAddMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/ValueAddMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/ValueAddMatrix.html", "kind" : "case class"}, {"name" : "smile.math.ValueAddVector", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.Operators.vectorExpression2Array.update", "link" : "smile\/math\/ValueAddVector.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/ValueAddVector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ValueAddVector) ⇒ Boolean, msg: ⇒ Any): ValueAddVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueAddVector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ValueAddVector) ⇒ Boolean): ValueAddVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueAddVector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ValueAddVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueAddVector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ValueAddVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueAddVector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ValueAddVector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/ValueAddVector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ValueAddVector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/ValueAddVector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.ValueAddVector.toArray", "link" : "smile\/math\/ValueAddVector.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.ValueAddVector.apply", "link" : "smile\/math\/ValueAddVector.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.ValueAddVector.length", "link" : "smile\/math\/ValueAddVector.html#length:Int", "kind" : "def"}, {"member" : "smile.math.ValueAddVector#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.ValueAddVector.x", "link" : "smile\/math\/ValueAddVector.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "y", "tail" : ": Double", "member" : "smile.math.ValueAddVector.y", "link" : "smile\/math\/ValueAddVector.html#y:Double", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/ValueAddVector.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/ValueAddVector.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/ValueAddVector.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/ValueAddVector.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/ValueAddVector.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/ValueAddVector.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/ValueAddVector.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/ValueAddVector.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/ValueAddVector.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/ValueAddVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/ValueAddVector.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/ValueAddVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/ValueAddVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/ValueAddVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/ValueAddVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/ValueAddVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ValueAddVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ValueAddVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ValueAddVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/ValueAddVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/ValueAddVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/ValueAddVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/ValueAddVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/ValueAddVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/ValueAddVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/ValueAddVector.html", "kind" : "case class"}, {"name" : "smile.math.ValueDivMatrix", "shortDescription" : "", "members_case class" : [{"label" : "array", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.Operators.matrixExpression2Array.array", "link" : "smile\/math\/ValueDivMatrix.html#array():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.sum", "link" : "smile\/math\/ValueDivMatrix.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/ValueDivMatrix.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/ValueDivMatrix.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/ValueDivMatrix.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/ValueDivMatrix.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/ValueDivMatrix.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/ValueDivMatrix.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/ValueDivMatrix.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/ValueDivMatrix.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/ValueDivMatrix.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/ValueDivMatrix.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/ValueDivMatrix.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/ValueDivMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/ValueDivMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/ValueDivMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/ValueDivMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/ValueDivMatrix.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/ValueDivMatrix.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colMeans", "link" : "smile\/math\/ValueDivMatrix.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colSums", "link" : "smile\/math\/ValueDivMatrix.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowMeans", "link" : "smile\/math\/ValueDivMatrix.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowSums", "link" : "smile\/math\/ValueDivMatrix.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.Operators.matrixExpression2Array.xax", "link" : "smile\/math\/ValueDivMatrix.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normFro", "link" : "smile\/math\/ValueDivMatrix.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normInf", "link" : "smile\/math\/ValueDivMatrix.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm", "link" : "smile\/math\/ValueDivMatrix.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm2", "link" : "smile\/math\/ValueDivMatrix.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm1", "link" : "smile\/math\/ValueDivMatrix.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/ValueDivMatrix.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/ValueDivMatrix.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/ValueDivMatrix.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/ValueDivMatrix.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/ValueDivMatrix.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/ValueDivMatrix.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/ValueDivMatrix.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/ValueDivMatrix.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.update", "link" : "smile\/math\/ValueDivMatrix.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/ValueDivMatrix.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/ValueDivMatrix.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/ValueDivMatrix.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/ValueDivMatrix.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.trace", "link" : "smile\/math\/ValueDivMatrix.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.diag", "link" : "smile\/math\/ValueDivMatrix.html#diag():Array[Double]", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.Operators.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/ValueDivMatrix.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.Operators.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/ValueDivMatrix.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/ValueDivMatrix.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/ValueDivMatrix.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/ValueDivMatrix.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/ValueDivMatrix.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.aat", "link" : "smile\/math\/ValueDivMatrix.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.ata", "link" : "smile\/math\/ValueDivMatrix.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "copy", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.copy", "link" : "smile\/math\/ValueDivMatrix.html#copy():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.transpose", "link" : "smile\/math\/ValueDivMatrix.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/ValueDivMatrix.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/ValueDivMatrix.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/ValueDivMatrix.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/ValueDivMatrix.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/ValueDivMatrix.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/ValueDivMatrix.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.set", "link" : "smile\/math\/ValueDivMatrix.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.Operators.matrixExpression2Array.ld", "link" : "smile\/math\/ValueDivMatrix.html#ld():Int", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.data", "link" : "smile\/math\/ValueDivMatrix.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.atbmm", "link" : "smile\/math\/ValueDivMatrix.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abtmm", "link" : "smile\/math\/ValueDivMatrix.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abmm", "link" : "smile\/math\/ValueDivMatrix.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/ValueDivMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/ValueDivMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atx", "link" : "smile\/math\/ValueDivMatrix.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/ValueDivMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/ValueDivMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.ax", "link" : "smile\/math\/ValueDivMatrix.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.Operators.matrixExpression2Array.get", "link" : "smile\/math\/ValueDivMatrix.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/ValueDivMatrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ValueDivMatrix) ⇒ Boolean, msg: ⇒ Any): ValueDivMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueDivMatrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ValueDivMatrix) ⇒ Boolean): ValueDivMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueDivMatrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ValueDivMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueDivMatrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ValueDivMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueDivMatrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ValueDivMatrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/ValueDivMatrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ValueDivMatrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/ValueDivMatrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.ValueDivMatrix.toMatrix", "link" : "smile\/math\/ValueDivMatrix.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.ValueDivMatrix.apply", "link" : "smile\/math\/ValueDivMatrix.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.ValueDivMatrix.ncols", "link" : "smile\/math\/ValueDivMatrix.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.ValueDivMatrix.nrows", "link" : "smile\/math\/ValueDivMatrix.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.ValueDivMatrix#<init>", "error" : "unsupported entity"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.ValueDivMatrix.A", "link" : "smile\/math\/ValueDivMatrix.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "y", "tail" : ": Double", "member" : "smile.math.ValueDivMatrix.y", "link" : "smile\/math\/ValueDivMatrix.html#y:Double", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/ValueDivMatrix.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/ValueDivMatrix.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/ValueDivMatrix.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/ValueDivMatrix.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/ValueDivMatrix.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/ValueDivMatrix.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/ValueDivMatrix.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/ValueDivMatrix.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/ValueDivMatrix.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/ValueDivMatrix.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/ValueDivMatrix.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/ValueDivMatrix.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/ValueDivMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/ValueDivMatrix.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/ValueDivMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/ValueDivMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/ValueDivMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/ValueDivMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/ValueDivMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ValueDivMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ValueDivMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ValueDivMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/ValueDivMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/ValueDivMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/ValueDivMatrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/ValueDivMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/ValueDivMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/ValueDivMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/ValueDivMatrix.html", "kind" : "case class"}, {"name" : "smile.math.ValueDivVector", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.Operators.vectorExpression2Array.update", "link" : "smile\/math\/ValueDivVector.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/ValueDivVector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ValueDivVector) ⇒ Boolean, msg: ⇒ Any): ValueDivVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueDivVector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ValueDivVector) ⇒ Boolean): ValueDivVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueDivVector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ValueDivVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueDivVector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ValueDivVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueDivVector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ValueDivVector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/ValueDivVector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ValueDivVector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/ValueDivVector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.ValueDivVector.toArray", "link" : "smile\/math\/ValueDivVector.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.ValueDivVector.apply", "link" : "smile\/math\/ValueDivVector.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.ValueDivVector.length", "link" : "smile\/math\/ValueDivVector.html#length:Int", "kind" : "def"}, {"member" : "smile.math.ValueDivVector#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.ValueDivVector.x", "link" : "smile\/math\/ValueDivVector.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "y", "tail" : ": Double", "member" : "smile.math.ValueDivVector.y", "link" : "smile\/math\/ValueDivVector.html#y:Double", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/ValueDivVector.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/ValueDivVector.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/ValueDivVector.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/ValueDivVector.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/ValueDivVector.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/ValueDivVector.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/ValueDivVector.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/ValueDivVector.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/ValueDivVector.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/ValueDivVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/ValueDivVector.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/ValueDivVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/ValueDivVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/ValueDivVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/ValueDivVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/ValueDivVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ValueDivVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ValueDivVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ValueDivVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/ValueDivVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/ValueDivVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/ValueDivVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/ValueDivVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/ValueDivVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/ValueDivVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/ValueDivVector.html", "kind" : "case class"}, {"name" : "smile.math.ValueMulMatrix", "shortDescription" : "", "members_case class" : [{"label" : "array", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.Operators.matrixExpression2Array.array", "link" : "smile\/math\/ValueMulMatrix.html#array():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.sum", "link" : "smile\/math\/ValueMulMatrix.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/ValueMulMatrix.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/ValueMulMatrix.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/ValueMulMatrix.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/ValueMulMatrix.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/ValueMulMatrix.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/ValueMulMatrix.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/ValueMulMatrix.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/ValueMulMatrix.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/ValueMulMatrix.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/ValueMulMatrix.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/ValueMulMatrix.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/ValueMulMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/ValueMulMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/ValueMulMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/ValueMulMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/ValueMulMatrix.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/ValueMulMatrix.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colMeans", "link" : "smile\/math\/ValueMulMatrix.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colSums", "link" : "smile\/math\/ValueMulMatrix.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowMeans", "link" : "smile\/math\/ValueMulMatrix.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowSums", "link" : "smile\/math\/ValueMulMatrix.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.Operators.matrixExpression2Array.xax", "link" : "smile\/math\/ValueMulMatrix.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normFro", "link" : "smile\/math\/ValueMulMatrix.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normInf", "link" : "smile\/math\/ValueMulMatrix.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm", "link" : "smile\/math\/ValueMulMatrix.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm2", "link" : "smile\/math\/ValueMulMatrix.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm1", "link" : "smile\/math\/ValueMulMatrix.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/ValueMulMatrix.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/ValueMulMatrix.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/ValueMulMatrix.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/ValueMulMatrix.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/ValueMulMatrix.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/ValueMulMatrix.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/ValueMulMatrix.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/ValueMulMatrix.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.update", "link" : "smile\/math\/ValueMulMatrix.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/ValueMulMatrix.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/ValueMulMatrix.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/ValueMulMatrix.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/ValueMulMatrix.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.trace", "link" : "smile\/math\/ValueMulMatrix.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.diag", "link" : "smile\/math\/ValueMulMatrix.html#diag():Array[Double]", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.Operators.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/ValueMulMatrix.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.Operators.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/ValueMulMatrix.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/ValueMulMatrix.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/ValueMulMatrix.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/ValueMulMatrix.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/ValueMulMatrix.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.aat", "link" : "smile\/math\/ValueMulMatrix.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.ata", "link" : "smile\/math\/ValueMulMatrix.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "copy", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.copy", "link" : "smile\/math\/ValueMulMatrix.html#copy():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.transpose", "link" : "smile\/math\/ValueMulMatrix.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/ValueMulMatrix.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/ValueMulMatrix.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/ValueMulMatrix.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/ValueMulMatrix.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/ValueMulMatrix.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/ValueMulMatrix.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.set", "link" : "smile\/math\/ValueMulMatrix.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.Operators.matrixExpression2Array.ld", "link" : "smile\/math\/ValueMulMatrix.html#ld():Int", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.data", "link" : "smile\/math\/ValueMulMatrix.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.atbmm", "link" : "smile\/math\/ValueMulMatrix.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abtmm", "link" : "smile\/math\/ValueMulMatrix.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abmm", "link" : "smile\/math\/ValueMulMatrix.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/ValueMulMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/ValueMulMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atx", "link" : "smile\/math\/ValueMulMatrix.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/ValueMulMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/ValueMulMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.ax", "link" : "smile\/math\/ValueMulMatrix.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.Operators.matrixExpression2Array.get", "link" : "smile\/math\/ValueMulMatrix.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/ValueMulMatrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ValueMulMatrix) ⇒ Boolean, msg: ⇒ Any): ValueMulMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueMulMatrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ValueMulMatrix) ⇒ Boolean): ValueMulMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueMulMatrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ValueMulMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueMulMatrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ValueMulMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueMulMatrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ValueMulMatrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/ValueMulMatrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ValueMulMatrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/ValueMulMatrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.ValueMulMatrix.toMatrix", "link" : "smile\/math\/ValueMulMatrix.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.ValueMulMatrix.apply", "link" : "smile\/math\/ValueMulMatrix.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.ValueMulMatrix.ncols", "link" : "smile\/math\/ValueMulMatrix.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.ValueMulMatrix.nrows", "link" : "smile\/math\/ValueMulMatrix.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.ValueMulMatrix#<init>", "error" : "unsupported entity"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.ValueMulMatrix.A", "link" : "smile\/math\/ValueMulMatrix.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "y", "tail" : ": Double", "member" : "smile.math.ValueMulMatrix.y", "link" : "smile\/math\/ValueMulMatrix.html#y:Double", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/ValueMulMatrix.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/ValueMulMatrix.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/ValueMulMatrix.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/ValueMulMatrix.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/ValueMulMatrix.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/ValueMulMatrix.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/ValueMulMatrix.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/ValueMulMatrix.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/ValueMulMatrix.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/ValueMulMatrix.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/ValueMulMatrix.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/ValueMulMatrix.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/ValueMulMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/ValueMulMatrix.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/ValueMulMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/ValueMulMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/ValueMulMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/ValueMulMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/ValueMulMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ValueMulMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ValueMulMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ValueMulMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/ValueMulMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/ValueMulMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/ValueMulMatrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/ValueMulMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/ValueMulMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/ValueMulMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/ValueMulMatrix.html", "kind" : "case class"}, {"name" : "smile.math.ValueMulVector", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.Operators.vectorExpression2Array.update", "link" : "smile\/math\/ValueMulVector.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/ValueMulVector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ValueMulVector) ⇒ Boolean, msg: ⇒ Any): ValueMulVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueMulVector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ValueMulVector) ⇒ Boolean): ValueMulVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueMulVector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ValueMulVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueMulVector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ValueMulVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueMulVector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ValueMulVector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/ValueMulVector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ValueMulVector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/ValueMulVector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.ValueMulVector.toArray", "link" : "smile\/math\/ValueMulVector.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.ValueMulVector.apply", "link" : "smile\/math\/ValueMulVector.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.ValueMulVector.length", "link" : "smile\/math\/ValueMulVector.html#length:Int", "kind" : "def"}, {"member" : "smile.math.ValueMulVector#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.ValueMulVector.x", "link" : "smile\/math\/ValueMulVector.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "y", "tail" : ": Double", "member" : "smile.math.ValueMulVector.y", "link" : "smile\/math\/ValueMulVector.html#y:Double", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/ValueMulVector.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/ValueMulVector.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/ValueMulVector.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/ValueMulVector.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/ValueMulVector.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/ValueMulVector.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/ValueMulVector.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/ValueMulVector.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/ValueMulVector.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/ValueMulVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/ValueMulVector.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/ValueMulVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/ValueMulVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/ValueMulVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/ValueMulVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/ValueMulVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ValueMulVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ValueMulVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ValueMulVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/ValueMulVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/ValueMulVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/ValueMulVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/ValueMulVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/ValueMulVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/ValueMulVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/ValueMulVector.html", "kind" : "case class"}, {"name" : "smile.math.ValueSubMatrix", "shortDescription" : "", "members_case class" : [{"label" : "array", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.Operators.matrixExpression2Array.array", "link" : "smile\/math\/ValueSubMatrix.html#array():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.sum", "link" : "smile\/math\/ValueSubMatrix.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/ValueSubMatrix.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/ValueSubMatrix.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/ValueSubMatrix.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/ValueSubMatrix.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/ValueSubMatrix.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/ValueSubMatrix.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/ValueSubMatrix.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/ValueSubMatrix.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/ValueSubMatrix.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/ValueSubMatrix.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/ValueSubMatrix.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/ValueSubMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/ValueSubMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/ValueSubMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/ValueSubMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/ValueSubMatrix.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/ValueSubMatrix.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colMeans", "link" : "smile\/math\/ValueSubMatrix.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.colSums", "link" : "smile\/math\/ValueSubMatrix.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowMeans", "link" : "smile\/math\/ValueSubMatrix.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.rowSums", "link" : "smile\/math\/ValueSubMatrix.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.Operators.matrixExpression2Array.xax", "link" : "smile\/math\/ValueSubMatrix.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normFro", "link" : "smile\/math\/ValueSubMatrix.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.normInf", "link" : "smile\/math\/ValueSubMatrix.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm", "link" : "smile\/math\/ValueSubMatrix.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm2", "link" : "smile\/math\/ValueSubMatrix.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.norm1", "link" : "smile\/math\/ValueSubMatrix.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/ValueSubMatrix.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.inverse", "link" : "smile\/math\/ValueSubMatrix.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/ValueSubMatrix.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/ValueSubMatrix.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/ValueSubMatrix.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/ValueSubMatrix.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/ValueSubMatrix.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/ValueSubMatrix.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.update", "link" : "smile\/math\/ValueSubMatrix.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/ValueSubMatrix.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/ValueSubMatrix.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/ValueSubMatrix.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/ValueSubMatrix.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.Operators.matrixExpression2Array.trace", "link" : "smile\/math\/ValueSubMatrix.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.diag", "link" : "smile\/math\/ValueSubMatrix.html#diag():Array[Double]", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.Operators.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/ValueSubMatrix.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.Operators.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/ValueSubMatrix.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.div", "link" : "smile\/math\/ValueSubMatrix.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.mul", "link" : "smile\/math\/ValueSubMatrix.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.sub", "link" : "smile\/math\/ValueSubMatrix.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.add", "link" : "smile\/math\/ValueSubMatrix.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.aat", "link" : "smile\/math\/ValueSubMatrix.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.ata", "link" : "smile\/math\/ValueSubMatrix.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "copy", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.copy", "link" : "smile\/math\/ValueSubMatrix.html#copy():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.transpose", "link" : "smile\/math\/ValueSubMatrix.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.eig", "link" : "smile\/math\/ValueSubMatrix.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.Operators.matrixExpression2Array.eigen", "link" : "smile\/math\/ValueSubMatrix.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.Operators.matrixExpression2Array.svd", "link" : "smile\/math\/ValueSubMatrix.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.Operators.matrixExpression2Array.qr", "link" : "smile\/math\/ValueSubMatrix.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.Operators.matrixExpression2Array.cholesky", "link" : "smile\/math\/ValueSubMatrix.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.Operators.matrixExpression2Array.lu", "link" : "smile\/math\/ValueSubMatrix.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.Operators.matrixExpression2Array.set", "link" : "smile\/math\/ValueSubMatrix.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.Operators.matrixExpression2Array.ld", "link" : "smile\/math\/ValueSubMatrix.html#ld():Int", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.data", "link" : "smile\/math\/ValueSubMatrix.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.atbmm", "link" : "smile\/math\/ValueSubMatrix.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abtmm", "link" : "smile\/math\/ValueSubMatrix.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.Operators.matrixExpression2Array.abmm", "link" : "smile\/math\/ValueSubMatrix.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/ValueSubMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atxpy", "link" : "smile\/math\/ValueSubMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.atx", "link" : "smile\/math\/ValueSubMatrix.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/ValueSubMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.axpy", "link" : "smile\/math\/ValueSubMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.Operators.matrixExpression2Array.ax", "link" : "smile\/math\/ValueSubMatrix.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.Operators.matrixExpression2Array.get", "link" : "smile\/math\/ValueSubMatrix.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/ValueSubMatrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ValueSubMatrix) ⇒ Boolean, msg: ⇒ Any): ValueSubMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueSubMatrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ValueSubMatrix) ⇒ Boolean): ValueSubMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueSubMatrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ValueSubMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueSubMatrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ValueSubMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueSubMatrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ValueSubMatrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/ValueSubMatrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ValueSubMatrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/ValueSubMatrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.ValueSubMatrix.toMatrix", "link" : "smile\/math\/ValueSubMatrix.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.ValueSubMatrix.apply", "link" : "smile\/math\/ValueSubMatrix.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.ValueSubMatrix.ncols", "link" : "smile\/math\/ValueSubMatrix.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.ValueSubMatrix.nrows", "link" : "smile\/math\/ValueSubMatrix.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.ValueSubMatrix#<init>", "error" : "unsupported entity"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.ValueSubMatrix.A", "link" : "smile\/math\/ValueSubMatrix.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "y", "tail" : ": Double", "member" : "smile.math.ValueSubMatrix.y", "link" : "smile\/math\/ValueSubMatrix.html#y:Double", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/ValueSubMatrix.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/ValueSubMatrix.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/ValueSubMatrix.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/ValueSubMatrix.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/ValueSubMatrix.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/ValueSubMatrix.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/ValueSubMatrix.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/ValueSubMatrix.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/ValueSubMatrix.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/ValueSubMatrix.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/ValueSubMatrix.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/ValueSubMatrix.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/ValueSubMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/ValueSubMatrix.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/ValueSubMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/ValueSubMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/ValueSubMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/ValueSubMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/ValueSubMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ValueSubMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ValueSubMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ValueSubMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/ValueSubMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/ValueSubMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/ValueSubMatrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/ValueSubMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/ValueSubMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/ValueSubMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/ValueSubMatrix.html", "kind" : "case class"}, {"name" : "smile.math.ValueSubVector", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.Operators.vectorExpression2Array.update", "link" : "smile\/math\/ValueSubVector.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/ValueSubVector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ValueSubVector) ⇒ Boolean, msg: ⇒ Any): ValueSubVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueSubVector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ValueSubVector) ⇒ Boolean): ValueSubVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueSubVector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ValueSubVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueSubVector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ValueSubVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueSubVector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ValueSubVector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/ValueSubVector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ValueSubVector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/ValueSubVector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.ValueSubVector.toArray", "link" : "smile\/math\/ValueSubVector.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.ValueSubVector.apply", "link" : "smile\/math\/ValueSubVector.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.ValueSubVector.length", "link" : "smile\/math\/ValueSubVector.html#length:Int", "kind" : "def"}, {"member" : "smile.math.ValueSubVector#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.ValueSubVector.x", "link" : "smile\/math\/ValueSubVector.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "y", "tail" : ": Double", "member" : "smile.math.ValueSubVector.y", "link" : "smile\/math\/ValueSubVector.html#y:Double", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/ValueSubVector.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/ValueSubVector.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/ValueSubVector.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/ValueSubVector.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/ValueSubVector.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/ValueSubVector.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/ValueSubVector.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/ValueSubVector.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/ValueSubVector.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/ValueSubVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/ValueSubVector.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/ValueSubVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/ValueSubVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/ValueSubVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/ValueSubVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/ValueSubVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ValueSubVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ValueSubVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ValueSubVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/ValueSubVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/ValueSubVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/ValueSubVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/ValueSubVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/ValueSubVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/ValueSubVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/ValueSubVector.html", "kind" : "case class"}, {"name" : "smile.math.VectorAddValue", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.Operators.vectorExpression2Array.update", "link" : "smile\/math\/VectorAddValue.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/VectorAddValue.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (VectorAddValue) ⇒ Boolean, msg: ⇒ Any): VectorAddValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorAddValue.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (VectorAddValue) ⇒ Boolean): VectorAddValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorAddValue.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): VectorAddValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorAddValue.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): VectorAddValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorAddValue.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (VectorAddValue, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/VectorAddValue.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (VectorAddValue, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/VectorAddValue.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.VectorAddValue.toArray", "link" : "smile\/math\/VectorAddValue.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.VectorAddValue.apply", "link" : "smile\/math\/VectorAddValue.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.VectorAddValue.length", "link" : "smile\/math\/VectorAddValue.html#length:Int", "kind" : "def"}, {"member" : "smile.math.VectorAddValue#<init>", "error" : "unsupported entity"}, {"label" : "y", "tail" : ": Double", "member" : "smile.math.VectorAddValue.y", "link" : "smile\/math\/VectorAddValue.html#y:Double", "kind" : "val"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.VectorAddValue.x", "link" : "smile\/math\/VectorAddValue.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/VectorAddValue.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/VectorAddValue.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/VectorAddValue.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/VectorAddValue.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/VectorAddValue.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/VectorAddValue.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/VectorAddValue.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/VectorAddValue.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/VectorAddValue.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/VectorAddValue.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/VectorAddValue.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/VectorAddValue.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/VectorAddValue.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/VectorAddValue.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/VectorAddValue.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/VectorAddValue.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorAddValue.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorAddValue.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorAddValue.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/VectorAddValue.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/VectorAddValue.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/VectorAddValue.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/VectorAddValue.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/VectorAddValue.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/VectorAddValue.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/VectorAddValue.html", "kind" : "case class"}, {"name" : "smile.math.VectorAddVector", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.Operators.vectorExpression2Array.update", "link" : "smile\/math\/VectorAddVector.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/VectorAddVector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (VectorAddVector) ⇒ Boolean, msg: ⇒ Any): VectorAddVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorAddVector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (VectorAddVector) ⇒ Boolean): VectorAddVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorAddVector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): VectorAddVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorAddVector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): VectorAddVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorAddVector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (VectorAddVector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/VectorAddVector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (VectorAddVector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/VectorAddVector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.VectorAddVector.toArray", "link" : "smile\/math\/VectorAddVector.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.VectorAddVector.apply", "link" : "smile\/math\/VectorAddVector.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.VectorAddVector.length", "link" : "smile\/math\/VectorAddVector.html#length:Int", "kind" : "def"}, {"member" : "smile.math.VectorAddVector#<init>", "error" : "unsupported entity"}, {"label" : "y", "tail" : ": VectorExpression", "member" : "smile.math.VectorAddVector.y", "link" : "smile\/math\/VectorAddVector.html#y:smile.math.VectorExpression", "kind" : "val"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.VectorAddVector.x", "link" : "smile\/math\/VectorAddVector.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/VectorAddVector.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/VectorAddVector.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/VectorAddVector.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/VectorAddVector.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/VectorAddVector.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/VectorAddVector.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/VectorAddVector.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/VectorAddVector.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/VectorAddVector.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/VectorAddVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/VectorAddVector.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/VectorAddVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/VectorAddVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/VectorAddVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/VectorAddVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/VectorAddVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorAddVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorAddVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorAddVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/VectorAddVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/VectorAddVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/VectorAddVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/VectorAddVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/VectorAddVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/VectorAddVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/VectorAddVector.html", "kind" : "case class"}, {"name" : "smile.math.VectorDivValue", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.Operators.vectorExpression2Array.update", "link" : "smile\/math\/VectorDivValue.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/VectorDivValue.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (VectorDivValue) ⇒ Boolean, msg: ⇒ Any): VectorDivValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorDivValue.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (VectorDivValue) ⇒ Boolean): VectorDivValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorDivValue.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): VectorDivValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorDivValue.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): VectorDivValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorDivValue.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (VectorDivValue, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/VectorDivValue.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (VectorDivValue, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/VectorDivValue.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.VectorDivValue.toArray", "link" : "smile\/math\/VectorDivValue.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.VectorDivValue.apply", "link" : "smile\/math\/VectorDivValue.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.VectorDivValue.length", "link" : "smile\/math\/VectorDivValue.html#length:Int", "kind" : "def"}, {"member" : "smile.math.VectorDivValue#<init>", "error" : "unsupported entity"}, {"label" : "y", "tail" : ": Double", "member" : "smile.math.VectorDivValue.y", "link" : "smile\/math\/VectorDivValue.html#y:Double", "kind" : "val"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.VectorDivValue.x", "link" : "smile\/math\/VectorDivValue.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/VectorDivValue.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/VectorDivValue.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/VectorDivValue.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/VectorDivValue.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/VectorDivValue.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/VectorDivValue.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/VectorDivValue.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/VectorDivValue.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/VectorDivValue.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/VectorDivValue.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/VectorDivValue.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/VectorDivValue.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/VectorDivValue.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/VectorDivValue.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/VectorDivValue.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/VectorDivValue.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorDivValue.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorDivValue.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorDivValue.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/VectorDivValue.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/VectorDivValue.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/VectorDivValue.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/VectorDivValue.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/VectorDivValue.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/VectorDivValue.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/VectorDivValue.html", "kind" : "case class"}, {"name" : "smile.math.VectorDivVector", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.Operators.vectorExpression2Array.update", "link" : "smile\/math\/VectorDivVector.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/VectorDivVector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (VectorDivVector) ⇒ Boolean, msg: ⇒ Any): VectorDivVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorDivVector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (VectorDivVector) ⇒ Boolean): VectorDivVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorDivVector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): VectorDivVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorDivVector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): VectorDivVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorDivVector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (VectorDivVector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/VectorDivVector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (VectorDivVector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/VectorDivVector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.VectorDivVector.toArray", "link" : "smile\/math\/VectorDivVector.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.VectorDivVector.apply", "link" : "smile\/math\/VectorDivVector.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.VectorDivVector.length", "link" : "smile\/math\/VectorDivVector.html#length:Int", "kind" : "def"}, {"member" : "smile.math.VectorDivVector#<init>", "error" : "unsupported entity"}, {"label" : "y", "tail" : ": VectorExpression", "member" : "smile.math.VectorDivVector.y", "link" : "smile\/math\/VectorDivVector.html#y:smile.math.VectorExpression", "kind" : "val"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.VectorDivVector.x", "link" : "smile\/math\/VectorDivVector.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/VectorDivVector.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/VectorDivVector.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/VectorDivVector.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/VectorDivVector.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/VectorDivVector.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/VectorDivVector.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/VectorDivVector.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/VectorDivVector.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/VectorDivVector.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/VectorDivVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/VectorDivVector.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/VectorDivVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/VectorDivVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/VectorDivVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/VectorDivVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/VectorDivVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorDivVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorDivVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorDivVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/VectorDivVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/VectorDivVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/VectorDivVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/VectorDivVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/VectorDivVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/VectorDivVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/VectorDivVector.html", "kind" : "case class"}, {"name" : "smile.math.VectorExpression", "members_trait" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.Operators.vectorExpression2Array.update", "link" : "smile\/math\/VectorExpression.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/VectorExpression.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (VectorExpression) ⇒ Boolean, msg: ⇒ Any): VectorExpression", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorExpression.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (VectorExpression) ⇒ Boolean): VectorExpression", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorExpression.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): VectorExpression", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorExpression.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): VectorExpression", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorExpression.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (VectorExpression, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/VectorExpression.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (VectorExpression, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/VectorExpression.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/VectorExpression.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/VectorExpression.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/VectorExpression.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/VectorExpression.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/VectorExpression.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/VectorExpression.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/VectorExpression.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/VectorExpression.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/VectorExpression.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/VectorExpression.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/VectorExpression.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/VectorExpression.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/VectorExpression.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/VectorExpression.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/VectorExpression.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/VectorExpression.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorExpression.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorExpression.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorExpression.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/VectorExpression.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/VectorExpression.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/VectorExpression.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/math\/VectorExpression.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/math\/VectorExpression.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/VectorExpression.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/VectorExpression.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/VectorExpression.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toArray", "tail" : "(): Array[Double]", "member" : "smile.math.VectorExpression.toArray", "link" : "smile\/math\/VectorExpression.html#toArray:Array[Double]", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.VectorExpression.apply", "link" : "smile\/math\/VectorExpression.html#apply(i:Int):Double", "kind" : "abstract def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.VectorExpression.length", "link" : "smile\/math\/VectorExpression.html#length:Int", "kind" : "abstract def"}], "shortDescription" : "Vector Expression.", "trait" : "smile\/math\/VectorExpression.html", "kind" : "trait"}, {"name" : "smile.math.VectorLift", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.Operators.vectorExpression2Array.update", "link" : "smile\/math\/VectorLift.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/VectorLift.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (VectorLift) ⇒ Boolean, msg: ⇒ Any): VectorLift", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorLift.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (VectorLift) ⇒ Boolean): VectorLift", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorLift.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): VectorLift", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorLift.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): VectorLift", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorLift.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (VectorLift, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/VectorLift.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (VectorLift, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/VectorLift.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : "(): Array[Double]", "member" : "smile.math.VectorLift.toArray", "link" : "smile\/math\/VectorLift.html#toArray:Array[Double]", "kind" : "def"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.VectorLift.apply", "link" : "smile\/math\/VectorLift.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.VectorLift.length", "link" : "smile\/math\/VectorLift.html#length:Int", "kind" : "def"}, {"member" : "smile.math.VectorLift#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": Array[Double]", "member" : "smile.math.VectorLift.x", "link" : "smile\/math\/VectorLift.html#x:Array[Double]", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/VectorLift.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/VectorLift.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/VectorLift.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/VectorLift.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/VectorLift.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/VectorLift.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/VectorLift.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/VectorLift.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/VectorLift.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/VectorLift.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/VectorLift.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/VectorLift.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/VectorLift.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/VectorLift.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/VectorLift.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/VectorLift.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorLift.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorLift.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorLift.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/VectorLift.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/VectorLift.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/VectorLift.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/VectorLift.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/VectorLift.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/VectorLift.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/VectorLift.html", "kind" : "case class"}, {"name" : "smile.math.VectorMulValue", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.Operators.vectorExpression2Array.update", "link" : "smile\/math\/VectorMulValue.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/VectorMulValue.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (VectorMulValue) ⇒ Boolean, msg: ⇒ Any): VectorMulValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorMulValue.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (VectorMulValue) ⇒ Boolean): VectorMulValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorMulValue.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): VectorMulValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorMulValue.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): VectorMulValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorMulValue.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (VectorMulValue, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/VectorMulValue.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (VectorMulValue, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/VectorMulValue.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.VectorMulValue.toArray", "link" : "smile\/math\/VectorMulValue.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.VectorMulValue.apply", "link" : "smile\/math\/VectorMulValue.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.VectorMulValue.length", "link" : "smile\/math\/VectorMulValue.html#length:Int", "kind" : "def"}, {"member" : "smile.math.VectorMulValue#<init>", "error" : "unsupported entity"}, {"label" : "y", "tail" : ": Double", "member" : "smile.math.VectorMulValue.y", "link" : "smile\/math\/VectorMulValue.html#y:Double", "kind" : "val"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.VectorMulValue.x", "link" : "smile\/math\/VectorMulValue.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/VectorMulValue.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/VectorMulValue.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/VectorMulValue.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/VectorMulValue.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/VectorMulValue.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/VectorMulValue.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/VectorMulValue.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/VectorMulValue.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/VectorMulValue.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/VectorMulValue.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/VectorMulValue.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/VectorMulValue.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/VectorMulValue.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/VectorMulValue.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/VectorMulValue.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/VectorMulValue.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorMulValue.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorMulValue.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorMulValue.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/VectorMulValue.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/VectorMulValue.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/VectorMulValue.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/VectorMulValue.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/VectorMulValue.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/VectorMulValue.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/VectorMulValue.html", "kind" : "case class"}, {"name" : "smile.math.VectorMulVector", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.Operators.vectorExpression2Array.update", "link" : "smile\/math\/VectorMulVector.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/VectorMulVector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (VectorMulVector) ⇒ Boolean, msg: ⇒ Any): VectorMulVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorMulVector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (VectorMulVector) ⇒ Boolean): VectorMulVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorMulVector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): VectorMulVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorMulVector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): VectorMulVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorMulVector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (VectorMulVector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/VectorMulVector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (VectorMulVector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/VectorMulVector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.VectorMulVector.toArray", "link" : "smile\/math\/VectorMulVector.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.VectorMulVector.apply", "link" : "smile\/math\/VectorMulVector.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.VectorMulVector.length", "link" : "smile\/math\/VectorMulVector.html#length:Int", "kind" : "def"}, {"member" : "smile.math.VectorMulVector#<init>", "error" : "unsupported entity"}, {"label" : "y", "tail" : ": VectorExpression", "member" : "smile.math.VectorMulVector.y", "link" : "smile\/math\/VectorMulVector.html#y:smile.math.VectorExpression", "kind" : "val"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.VectorMulVector.x", "link" : "smile\/math\/VectorMulVector.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/VectorMulVector.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/VectorMulVector.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/VectorMulVector.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/VectorMulVector.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/VectorMulVector.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/VectorMulVector.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/VectorMulVector.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/VectorMulVector.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/VectorMulVector.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/VectorMulVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/VectorMulVector.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/VectorMulVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/VectorMulVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/VectorMulVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/VectorMulVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/VectorMulVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorMulVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorMulVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorMulVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/VectorMulVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/VectorMulVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/VectorMulVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/VectorMulVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/VectorMulVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/VectorMulVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/VectorMulVector.html", "kind" : "case class"}, {"name" : "smile.math.VectorSubValue", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.Operators.vectorExpression2Array.update", "link" : "smile\/math\/VectorSubValue.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/VectorSubValue.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (VectorSubValue) ⇒ Boolean, msg: ⇒ Any): VectorSubValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorSubValue.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (VectorSubValue) ⇒ Boolean): VectorSubValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorSubValue.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): VectorSubValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorSubValue.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): VectorSubValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorSubValue.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (VectorSubValue, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/VectorSubValue.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (VectorSubValue, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/VectorSubValue.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.VectorSubValue.toArray", "link" : "smile\/math\/VectorSubValue.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.VectorSubValue.apply", "link" : "smile\/math\/VectorSubValue.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.VectorSubValue.length", "link" : "smile\/math\/VectorSubValue.html#length:Int", "kind" : "def"}, {"member" : "smile.math.VectorSubValue#<init>", "error" : "unsupported entity"}, {"label" : "y", "tail" : ": Double", "member" : "smile.math.VectorSubValue.y", "link" : "smile\/math\/VectorSubValue.html#y:Double", "kind" : "val"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.VectorSubValue.x", "link" : "smile\/math\/VectorSubValue.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/VectorSubValue.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/VectorSubValue.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/VectorSubValue.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/VectorSubValue.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/VectorSubValue.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/VectorSubValue.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/VectorSubValue.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/VectorSubValue.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/VectorSubValue.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/VectorSubValue.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/VectorSubValue.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/VectorSubValue.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/VectorSubValue.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/VectorSubValue.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/VectorSubValue.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/VectorSubValue.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorSubValue.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorSubValue.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorSubValue.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/VectorSubValue.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/VectorSubValue.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/VectorSubValue.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/VectorSubValue.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/VectorSubValue.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/VectorSubValue.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/VectorSubValue.html", "kind" : "case class"}, {"name" : "smile.math.VectorSubVector", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.Operators.vectorExpression2Array.update", "link" : "smile\/math\/VectorSubVector.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/VectorSubVector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (VectorSubVector) ⇒ Boolean, msg: ⇒ Any): VectorSubVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorSubVector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (VectorSubVector) ⇒ Boolean): VectorSubVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorSubVector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): VectorSubVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorSubVector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): VectorSubVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorSubVector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (VectorSubVector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/VectorSubVector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (VectorSubVector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/VectorSubVector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.VectorSubVector.toArray", "link" : "smile\/math\/VectorSubVector.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.VectorSubVector.apply", "link" : "smile\/math\/VectorSubVector.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.VectorSubVector.length", "link" : "smile\/math\/VectorSubVector.html#length:Int", "kind" : "def"}, {"member" : "smile.math.VectorSubVector#<init>", "error" : "unsupported entity"}, {"label" : "y", "tail" : ": VectorExpression", "member" : "smile.math.VectorSubVector.y", "link" : "smile\/math\/VectorSubVector.html#y:smile.math.VectorExpression", "kind" : "val"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.VectorSubVector.x", "link" : "smile\/math\/VectorSubVector.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/VectorSubVector.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/VectorSubVector.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/VectorSubVector.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/VectorSubVector.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/VectorSubVector.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/VectorSubVector.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/VectorSubVector.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/VectorSubVector.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/VectorSubVector.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/VectorSubVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/VectorSubVector.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/VectorSubVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/VectorSubVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/VectorSubVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/VectorSubVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/VectorSubVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorSubVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorSubVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorSubVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/VectorSubVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/VectorSubVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/VectorSubVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/VectorSubVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/VectorSubVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/VectorSubVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/VectorSubVector.html", "kind" : "case class"}], "smile.vq" : [{"name" : "smile.vq.Operators", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "smile\/vq\/Operators.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/vq\/Operators.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Operators) ⇒ Boolean, msg: ⇒ Any): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/vq\/Operators.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Operators) ⇒ Boolean): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/vq\/Operators.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/vq\/Operators.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/vq\/Operators.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Operators, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/vq\/Operators.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Operators, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/vq\/Operators.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "neuralmap", "tail" : "(data: Array[Array[Double]], radius: Double, L: Int, k: Int, epsBest: Double, epsNeighbor: Double): NeuralMap", "member" : "smile.vq.Operators.neuralmap", "link" : "smile\/vq\/Operators.html#neuralmap(data:Array[Array[Double]],radius:Double,L:Int,k:Int,epsBest:Double,epsNeighbor:Double):smile.vq.NeuralMap", "kind" : "def"}, {"label" : "gng", "tail" : "(data: Array[Array[Double]], epochs: Int, epsBest: Double, epsNeighbor: Double, maxEdgeAge: Int, lambda: Int, alpha: Double, beta: Double): GrowingNeuralGas", "member" : "smile.vq.Operators.gng", "link" : "smile\/vq\/Operators.html#gng(data:Array[Array[Double]],epochs:Int,epsBest:Double,epsNeighbor:Double,maxEdgeAge:Int,lambda:Int,alpha:Double,beta:Double):smile.vq.GrowingNeuralGas", "kind" : "def"}, {"label" : "neuralgas", "tail" : "(data: Array[Array[Double]], k: Int, lambda_i: Double, lambda_f: Double, eps_i: Double, eps_f: Double, steps: Int): NeuralGas", "member" : "smile.vq.Operators.neuralgas", "link" : "smile\/vq\/Operators.html#neuralgas(data:Array[Array[Double]],k:Int,lambda_i:Double,lambda_f:Double,eps_i:Double,eps_f:Double,steps:Int):smile.vq.NeuralGas", "kind" : "def"}, {"label" : "som", "tail" : "(data: Array[Array[Double]], width: Int, height: Int): SOM", "member" : "smile.vq.Operators.som", "link" : "smile\/vq\/Operators.html#som(data:Array[Array[Double]],width:Int,height:Int):smile.vq.SOM", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/vq\/Operators.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/vq\/Operators.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/vq\/Operators.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/vq\/Operators.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/vq\/Operators.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/vq\/Operators.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/vq\/Operators.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/vq\/Operators.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/vq\/Operators.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/vq\/Operators.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/vq\/Operators.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/vq\/Operators.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/vq\/Operators.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/vq\/Operators.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/vq\/Operators.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/vq\/Operators.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/vq\/Operators.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/vq\/Operators.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/vq\/Operators.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "High level vector quantization operators.", "trait" : "smile\/vq\/Operators.html", "kind" : "trait"}], "smile.projection" : [{"name" : "smile.projection.Operators", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "smile\/projection\/Operators.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/projection\/Operators.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Operators) ⇒ Boolean, msg: ⇒ Any): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/projection\/Operators.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Operators) ⇒ Boolean): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/projection\/Operators.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/projection\/Operators.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/projection\/Operators.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Operators, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/projection\/Operators.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Operators, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/projection\/Operators.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "gha", "tail" : "(data: Array[Array[Double]], k: Int, r: Double): GHA", "member" : "smile.projection.Operators.gha", "link" : "smile\/projection\/Operators.html#gha(data:Array[Array[Double]],k:Int,r:Double):smile.projection.GHA", "kind" : "def"}, {"label" : "gha", "tail" : "(data: Array[Array[Double]], w: Array[Array[Double]], r: Double): GHA", "member" : "smile.projection.Operators.gha", "link" : "smile\/projection\/Operators.html#gha(data:Array[Array[Double]],w:Array[Array[Double]],r:Double):smile.projection.GHA", "kind" : "def"}, {"label" : "kpca", "tail" : "(data: Array[T], kernel: MercerKernel[T], k: Int, threshold: Double): KPCA[T]", "member" : "smile.projection.Operators.kpca", "link" : "smile\/projection\/Operators.html#kpca[T<:Object](data:Array[T],kernel:smile.math.kernel.MercerKernel[T],k:Int,threshold:Double):smile.projection.KPCA[T]", "kind" : "def"}, {"label" : "ppca", "tail" : "(data: Array[Array[Double]], k: Int): PPCA", "member" : "smile.projection.Operators.ppca", "link" : "smile\/projection\/Operators.html#ppca(data:Array[Array[Double]],k:Int):smile.projection.PPCA", "kind" : "def"}, {"label" : "pca", "tail" : "(data: Array[Array[Double]], cor: Boolean): PCA", "member" : "smile.projection.Operators.pca", "link" : "smile\/projection\/Operators.html#pca(data:Array[Array[Double]],cor:Boolean):smile.projection.PCA", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/projection\/Operators.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/projection\/Operators.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/projection\/Operators.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/projection\/Operators.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/projection\/Operators.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/projection\/Operators.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/projection\/Operators.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/projection\/Operators.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/projection\/Operators.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/projection\/Operators.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/projection\/Operators.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/projection\/Operators.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/projection\/Operators.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/projection\/Operators.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/projection\/Operators.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/projection\/Operators.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/projection\/Operators.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/projection\/Operators.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/projection\/Operators.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "High level projection operators for feature extraction.", "trait" : "smile\/projection\/Operators.html", "kind" : "trait"}], "smile.classification" : [{"name" : "smile.classification.Operators", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "smile\/classification\/Operators.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/classification\/Operators.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Operators) ⇒ Boolean, msg: ⇒ Any): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/classification\/Operators.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Operators) ⇒ Boolean): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/classification\/Operators.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/classification\/Operators.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/classification\/Operators.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Operators, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/classification\/Operators.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Operators, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/classification\/Operators.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "naiveBayes", "tail" : "(priori: Array[Double], condprob: Array[Array[Distribution]]): NaiveBayes", "member" : "smile.classification.Operators.naiveBayes", "link" : "smile\/classification\/Operators.html#naiveBayes(priori:Array[Double],condprob:Array[Array[smile.stat.distribution.Distribution]]):smile.classification.NaiveBayes", "kind" : "def"}, {"label" : "naiveBayes", "tail" : "(x: Array[Array[Double]], y: Array[Int], model: Model, priori: Array[Double], sigma: Double): NaiveBayes", "member" : "smile.classification.Operators.naiveBayes", "link" : "smile\/classification\/Operators.html#naiveBayes(x:Array[Array[Double]],y:Array[Int],model:smile.classification.NaiveBayes.Model,priori:Array[Double],sigma:Double):smile.classification.NaiveBayes", "kind" : "def"}, {"label" : "rda", "tail" : "(x: Array[Array[Double]], y: Array[Int], alpha: Double, priori: Array[Double], tol: Double): RDA", "member" : "smile.classification.Operators.rda", "link" : "smile\/classification\/Operators.html#rda(x:Array[Array[Double]],y:Array[Int],alpha:Double,priori:Array[Double],tol:Double):smile.classification.RDA", "kind" : "def"}, {"label" : "qda", "tail" : "(x: Array[Array[Double]], y: Array[Int], priori: Array[Double], tol: Double): QDA", "member" : "smile.classification.Operators.qda", "link" : "smile\/classification\/Operators.html#qda(x:Array[Array[Double]],y:Array[Int],priori:Array[Double],tol:Double):smile.classification.QDA", "kind" : "def"}, {"label" : "lda", "tail" : "(x: Array[Array[Double]], y: Array[Int], priori: Array[Double], tol: Double): LDA", "member" : "smile.classification.Operators.lda", "link" : "smile\/classification\/Operators.html#lda(x:Array[Array[Double]],y:Array[Int],priori:Array[Double],tol:Double):smile.classification.LDA", "kind" : "def"}, {"label" : "fisher", "tail" : "(x: Array[Array[Double]], y: Array[Int], L: Int, tol: Double): FLD", "member" : "smile.classification.Operators.fisher", "link" : "smile\/classification\/Operators.html#fisher(x:Array[Array[Double]],y:Array[Int],L:Int,tol:Double):smile.classification.FLD", "kind" : "def"}, {"label" : "adaboost", "tail" : "(x: Array[Array[Double]], y: Array[Int], attributes: Array[Attribute], ntrees: Int, maxNodes: Int): AdaBoost", "member" : "smile.classification.Operators.adaboost", "link" : "smile\/classification\/Operators.html#adaboost(x:Array[Array[Double]],y:Array[Int],attributes:Array[smile.data.Attribute],ntrees:Int,maxNodes:Int):smile.classification.AdaBoost", "kind" : "def"}, {"label" : "gbm", "tail" : "(x: Array[Array[Double]], y: Array[Int], attributes: Array[Attribute], ntrees: Int, maxNodes: Int, shrinkage: Double, subsample: Double): GradientTreeBoost", "member" : "smile.classification.Operators.gbm", "link" : "smile\/classification\/Operators.html#gbm(x:Array[Array[Double]],y:Array[Int],attributes:Array[smile.data.Attribute],ntrees:Int,maxNodes:Int,shrinkage:Double,subsample:Double):smile.classification.GradientTreeBoost", "kind" : "def"}, {"label" : "randomForest", "tail" : "(x: Array[Array[Double]], y: Array[Int], attributes: Array[Attribute], ntrees: Int, maxNodes: Int, nodeSize: Int, mtry: Int, subsample: Double, splitRule: SplitRule, classWeight: Array[Int]): RandomForest", "member" : "smile.classification.Operators.randomForest", "link" : "smile\/classification\/Operators.html#randomForest(x:Array[Array[Double]],y:Array[Int],attributes:Array[smile.data.Attribute],ntrees:Int,maxNodes:Int,nodeSize:Int,mtry:Int,subsample:Double,splitRule:smile.classification.DecisionTree.SplitRule,classWeight:Array[Int]):smile.classification.RandomForest", "kind" : "def"}, {"label" : "cart", "tail" : "(x: Array[Array[Double]], y: Array[Int], maxNodes: Int, attributes: Array[Attribute], splitRule: SplitRule): DecisionTree", "member" : "smile.classification.Operators.cart", "link" : "smile\/classification\/Operators.html#cart(x:Array[Array[Double]],y:Array[Int],maxNodes:Int,attributes:Array[smile.data.Attribute],splitRule:smile.classification.DecisionTree.SplitRule):smile.classification.DecisionTree", "kind" : "def"}, {"label" : "svm", "tail" : "(x: Array[T], y: Array[Int], kernel: MercerKernel[T], C: Double, strategy: Multiclass, epoch: Int): SVM[T]", "member" : "smile.classification.Operators.svm", "link" : "smile\/classification\/Operators.html#svm[T<:AnyRef](x:Array[T],y:Array[Int],kernel:smile.math.kernel.MercerKernel[T],C:Double,strategy:smile.classification.SVM.Multiclass,epoch:Int):smile.classification.SVM[T]", "kind" : "def"}, {"label" : "nrbfnet", "tail" : "(x: Array[T], y: Array[Int], distance: Metric[T], rbf: Array[RBF], centers: Array[T]): RBFNetwork[T]", "member" : "smile.classification.Operators.nrbfnet", "link" : "smile\/classification\/Operators.html#nrbfnet[T<:AnyRef,RBF<:smile.math.rbf.RadialBasisFunction](x:Array[T],y:Array[Int],distance:smile.math.distance.Metric[T],rbf:Array[RBF],centers:Array[T]):smile.classification.RBFNetwork[T]", "kind" : "def"}, {"label" : "rbfnet", "tail" : "(x: Array[T], y: Array[Int], distance: Metric[T], rbf: Array[RBF], centers: Array[T]): RBFNetwork[T]", "member" : "smile.classification.Operators.rbfnet", "link" : "smile\/classification\/Operators.html#rbfnet[T<:AnyRef,RBF<:smile.math.rbf.RadialBasisFunction](x:Array[T],y:Array[Int],distance:smile.math.distance.Metric[T],rbf:Array[RBF],centers:Array[T]):smile.classification.RBFNetwork[T]", "kind" : "def"}, {"label" : "nrbfnet", "tail" : "(x: Array[T], y: Array[Int], distance: Metric[T], rbf: RadialBasisFunction, centers: Array[T]): RBFNetwork[T]", "member" : "smile.classification.Operators.nrbfnet", "link" : "smile\/classification\/Operators.html#nrbfnet[T<:AnyRef](x:Array[T],y:Array[Int],distance:smile.math.distance.Metric[T],rbf:smile.math.rbf.RadialBasisFunction,centers:Array[T]):smile.classification.RBFNetwork[T]", "kind" : "def"}, {"label" : "rbfnet", "tail" : "(x: Array[T], y: Array[Int], distance: Metric[T], rbf: RadialBasisFunction, centers: Array[T]): RBFNetwork[T]", "member" : "smile.classification.Operators.rbfnet", "link" : "smile\/classification\/Operators.html#rbfnet[T<:AnyRef](x:Array[T],y:Array[Int],distance:smile.math.distance.Metric[T],rbf:smile.math.rbf.RadialBasisFunction,centers:Array[T]):smile.classification.RBFNetwork[T]", "kind" : "def"}, {"label" : "mlp", "tail" : "(x: Array[Array[Double]], y: Array[Int], numUnits: Array[Int], error: ErrorFunction, activation: ActivationFunction, epochs: Int, eta: Double, alpha: Double, lambda: Double): NeuralNetwork", "member" : "smile.classification.Operators.mlp", "link" : "smile\/classification\/Operators.html#mlp(x:Array[Array[Double]],y:Array[Int],numUnits:Array[Int],error:smile.classification.NeuralNetwork.ErrorFunction,activation:smile.classification.NeuralNetwork.ActivationFunction,epochs:Int,eta:Double,alpha:Double,lambda:Double):smile.classification.NeuralNetwork", "kind" : "def"}, {"label" : "maxent", "tail" : "(x: Array[Array[Int]], y: Array[Int], p: Int, lambda: Double, tol: Double, maxIter: Int): Maxent", "member" : "smile.classification.Operators.maxent", "link" : "smile\/classification\/Operators.html#maxent(x:Array[Array[Int]],y:Array[Int],p:Int,lambda:Double,tol:Double,maxIter:Int):smile.classification.Maxent", "kind" : "def"}, {"label" : "logit", "tail" : "(x: Array[Array[Double]], y: Array[Int], lambda: Double, tol: Double, maxIter: Int): LogisticRegression", "member" : "smile.classification.Operators.logit", "link" : "smile\/classification\/Operators.html#logit(x:Array[Array[Double]],y:Array[Int],lambda:Double,tol:Double,maxIter:Int):smile.classification.LogisticRegression", "kind" : "def"}, {"label" : "knn", "tail" : "(x: Array[Array[Double]], y: Array[Int], k: Int): KNN[Array[Double]]", "member" : "smile.classification.Operators.knn", "link" : "smile\/classification\/Operators.html#knn(x:Array[Array[Double]],y:Array[Int],k:Int):smile.classification.KNN[Array[Double]]", "kind" : "def"}, {"label" : "knn", "tail" : "(x: Array[T], y: Array[Int], distance: Distance[T], k: Int): KNN[T]", "member" : "smile.classification.Operators.knn", "link" : "smile\/classification\/Operators.html#knn[T<:AnyRef](x:Array[T],y:Array[Int],distance:smile.math.distance.Distance[T],k:Int):smile.classification.KNN[T]", "kind" : "def"}, {"label" : "knn", "tail" : "(x: KNNSearch[T, T], y: Array[Int], k: Int): KNN[T]", "member" : "smile.classification.Operators.knn", "link" : "smile\/classification\/Operators.html#knn[T<:AnyRef](x:smile.neighbor.KNNSearch[T,T],y:Array[Int],k:Int):smile.classification.KNN[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/classification\/Operators.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/classification\/Operators.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/classification\/Operators.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/classification\/Operators.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/classification\/Operators.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/classification\/Operators.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/classification\/Operators.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/classification\/Operators.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/classification\/Operators.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/classification\/Operators.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/classification\/Operators.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/classification\/Operators.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/classification\/Operators.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/classification\/Operators.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/classification\/Operators.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/classification\/Operators.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/classification\/Operators.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/classification\/Operators.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/classification\/Operators.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : " * High level classification operators.", "trait" : "smile\/classification\/Operators.html", "kind" : "trait"}], "smile.nlp" : [{"name" : "smile.nlp.Operators", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "smile\/nlp\/Operators.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/nlp\/Operators.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Operators) ⇒ Boolean, msg: ⇒ Any): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/nlp\/Operators.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Operators) ⇒ Boolean): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/nlp\/Operators.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/nlp\/Operators.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Operators", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/nlp\/Operators.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Operators, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/nlp\/Operators.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Operators, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/nlp\/Operators.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "tfidf", "tail" : "(bag: Array[Double], n: Int, df: Array[Int]): Array[Double]", "member" : "smile.nlp.Operators.tfidf", "link" : "smile\/nlp\/Operators.html#tfidf(bag:Array[Double],n:Int,df:Array[Int]):Array[Double]", "kind" : "def"}, {"label" : "tfidf", "tail" : "(corpus: Array[Array[Double]]): Array[Array[Double]]", "member" : "smile.nlp.Operators.tfidf", "link" : "smile\/nlp\/Operators.html#tfidf(corpus:Array[Array[Double]]):Array[Array[Double]]", "kind" : "def"}, {"label" : "df", "tail" : "(terms: Array[String], corpus: Array[Map[String, Int]]): Array[Int]", "member" : "smile.nlp.Operators.df", "link" : "smile\/nlp\/Operators.html#df(terms:Array[String],corpus:Array[Map[String,Int]]):Array[Int]", "kind" : "def"}, {"label" : "vectorize", "tail" : "(terms: Array[String], bag: Set[String]): Array[Int]", "member" : "smile.nlp.Operators.vectorize", "link" : "smile\/nlp\/Operators.html#vectorize(terms:Array[String],bag:Set[String]):Array[Int]", "kind" : "def"}, {"label" : "vectorize", "tail" : "(terms: Array[String], bag: Map[String, Int]): Array[Double]", "member" : "smile.nlp.Operators.vectorize", "link" : "smile\/nlp\/Operators.html#vectorize(terms:Array[String],bag:Map[String,Int]):Array[Double]", "kind" : "def"}, {"label" : "postag", "tail" : "(sentence: Array[String]): Array[PennTreebankPOS]", "member" : "smile.nlp.Operators.postag", "link" : "smile\/nlp\/Operators.html#postag(sentence:Array[String]):Array[smile.nlp.pos.PennTreebankPOS]", "kind" : "def"}, {"label" : "ngram", "tail" : "(maxNGramSize: Int, minFreq: Int, text: String*): Seq[Seq[NGram]]", "member" : "smile.nlp.Operators.ngram", "link" : "smile\/nlp\/Operators.html#ngram(maxNGramSize:Int,minFreq:Int,text:String*):Seq[Seq[smile.nlp.NGram]]", "kind" : "def"}, {"label" : "bigram", "tail" : "(p: Double, minFreq: Int, text: String*): Array[BigramCollocation]", "member" : "smile.nlp.Operators.bigram", "link" : "smile\/nlp\/Operators.html#bigram(p:Double,minFreq:Int,text:String*):Array[smile.nlp.collocation.BigramCollocation]", "kind" : "def"}, {"label" : "bigram", "tail" : "(k: Int, minFreq: Int, text: String*): Array[BigramCollocation]", "member" : "smile.nlp.Operators.bigram", "link" : "smile\/nlp\/Operators.html#bigram(k:Int,minFreq:Int,text:String*):Array[smile.nlp.collocation.BigramCollocation]", "kind" : "def"}, {"label" : "corpus", "tail" : "(text: Seq[String]): SimpleCorpus", "member" : "smile.nlp.Operators.corpus", "link" : "smile\/nlp\/Operators.html#corpus(text:Seq[String]):smile.nlp.SimpleCorpus", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/nlp\/Operators.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/nlp\/Operators.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/nlp\/Operators.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/nlp\/Operators.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/nlp\/Operators.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/nlp\/Operators.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/nlp\/Operators.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/nlp\/Operators.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/nlp\/Operators.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/nlp\/Operators.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/nlp\/Operators.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/nlp\/Operators.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/nlp\/Operators.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/nlp\/Operators.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/nlp\/Operators.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/nlp\/Operators.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "smile\/nlp\/Operators.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/nlp\/Operators.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/nlp\/Operators.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "High level NLP operators.", "trait" : "smile\/nlp\/Operators.html", "kind" : "trait"}]};