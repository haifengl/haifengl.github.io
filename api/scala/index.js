Index.PACKAGES = {"smile.wavelet" : [{"name" : "smile.wavelet.$dummy", "shortDescription" : "Hacking scaladoc issue-8124.", "object" : "smile\/wavelet\/package$$$dummy$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/wavelet\/package$$$dummy$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/wavelet\/package$$$dummy$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/wavelet\/package$$$dummy$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/wavelet\/package$$$dummy$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/wavelet\/package$$$dummy$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/wavelet\/package$$$dummy$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/wavelet\/package$$$dummy$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/wavelet\/package$$$dummy$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/wavelet\/package$$$dummy$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/wavelet\/package$$$dummy$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/wavelet\/package$$$dummy$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/wavelet\/package$$$dummy$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/wavelet\/package$$$dummy$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/wavelet\/package$$$dummy$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/wavelet\/package$$$dummy$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/wavelet\/package$$$dummy$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/wavelet\/package$$$dummy$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/wavelet\/package$$$dummy$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/wavelet\/package$$$dummy$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "smile.mds" : [{"name" : "smile.mds.$dummy", "shortDescription" : "Hacking scaladoc issue-8124.", "object" : "smile\/mds\/package$$$dummy$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/mds\/package$$$dummy$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/mds\/package$$$dummy$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/mds\/package$$$dummy$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/mds\/package$$$dummy$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/mds\/package$$$dummy$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/mds\/package$$$dummy$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/mds\/package$$$dummy$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/mds\/package$$$dummy$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/mds\/package$$$dummy$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/mds\/package$$$dummy$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/mds\/package$$$dummy$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/mds\/package$$$dummy$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/mds\/package$$$dummy$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/mds\/package$$$dummy$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/mds\/package$$$dummy$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/mds\/package$$$dummy$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/mds\/package$$$dummy$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/mds\/package$$$dummy$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/mds\/package$$$dummy$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "smile.math.distance" : [{"name" : "smile.math.distance.Hamming", "shortDescription" : "Hamming distance between two bit strings.", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "smile\/math\/distance\/Hamming.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/distance\/Hamming.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Hamming) => Boolean, msg: => Any): Hamming", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/distance\/Hamming.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Hamming) => Boolean): Hamming", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/distance\/Hamming.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Hamming", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/distance\/Hamming.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Hamming", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/distance\/Hamming.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Hamming, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/distance\/Hamming.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Hamming, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/distance\/Hamming.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "d", "tail" : "(x: Array[Int], y: Array[Int]): Double", "member" : "smile.math.distance.Hamming.d", "link" : "smile\/math\/distance\/Hamming.html#d(x:Array[Int],y:Array[Int]):Double", "kind" : "def"}, {"member" : "smile.math.distance.Hamming#<init>", "error" : "unsupported entity"}, {"label" : "applyAsDouble", "tail" : "(arg0: Array[Int], arg1: Array[Int]): Double", "member" : "smile.math.distance.Distance.applyAsDouble", "link" : "smile\/math\/distance\/Hamming.html#applyAsDouble(x$1:T,x$2:T):Double", "kind" : "def"}, {"label" : "apply", "tail" : "(arg0: Array[Int], arg1: Array[Int]): Double", "member" : "smile.math.distance.Distance.apply", "link" : "smile\/math\/distance\/Hamming.html#apply(x$1:T,x$2:T):Double", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/distance\/Hamming.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/distance\/Hamming.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/distance\/Hamming.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/distance\/Hamming.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/distance\/Hamming.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/distance\/Hamming.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/distance\/Hamming.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/distance\/Hamming.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/distance\/Hamming.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/distance\/Hamming.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/distance\/Hamming.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/distance\/Hamming.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/math\/distance\/Hamming.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/distance\/Hamming.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/math\/distance\/Hamming.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/math\/distance\/Hamming.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/distance\/Hamming.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/distance\/Hamming.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/distance\/Hamming.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "smile\/math\/distance\/Hamming.html", "kind" : "class"}, {"name" : "smile.math.distance.MeanMahanttan", "shortDescription" : "Mean Mahantan distance.", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "smile\/math\/distance\/MeanMahanttan.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/distance\/MeanMahanttan.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MeanMahanttan) => Boolean, msg: => Any): MeanMahanttan", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/distance\/MeanMahanttan.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MeanMahanttan) => Boolean): MeanMahanttan", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/distance\/MeanMahanttan.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): MeanMahanttan", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/distance\/MeanMahanttan.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): MeanMahanttan", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/distance\/MeanMahanttan.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (MeanMahanttan, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/distance\/MeanMahanttan.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (MeanMahanttan, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/distance\/MeanMahanttan.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "d", "tail" : "(x: Array[Int], y: Array[Int]): Double", "member" : "smile.math.distance.MeanMahanttan.d", "link" : "smile\/math\/distance\/MeanMahanttan.html#d(x:Array[Int],y:Array[Int]):Double", "kind" : "def"}, {"member" : "smile.math.distance.MeanMahanttan#<init>", "error" : "unsupported entity"}, {"label" : "applyAsDouble", "tail" : "(arg0: Array[Int], arg1: Array[Int]): Double", "member" : "smile.math.distance.Distance.applyAsDouble", "link" : "smile\/math\/distance\/MeanMahanttan.html#applyAsDouble(x$1:T,x$2:T):Double", "kind" : "def"}, {"label" : "apply", "tail" : "(arg0: Array[Int], arg1: Array[Int]): Double", "member" : "smile.math.distance.Distance.apply", "link" : "smile\/math\/distance\/MeanMahanttan.html#apply(x$1:T,x$2:T):Double", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/distance\/MeanMahanttan.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/distance\/MeanMahanttan.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/distance\/MeanMahanttan.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/distance\/MeanMahanttan.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/distance\/MeanMahanttan.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/distance\/MeanMahanttan.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/distance\/MeanMahanttan.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/distance\/MeanMahanttan.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/distance\/MeanMahanttan.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/distance\/MeanMahanttan.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/distance\/MeanMahanttan.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/distance\/MeanMahanttan.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/math\/distance\/MeanMahanttan.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/distance\/MeanMahanttan.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/math\/distance\/MeanMahanttan.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/math\/distance\/MeanMahanttan.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/distance\/MeanMahanttan.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/distance\/MeanMahanttan.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/distance\/MeanMahanttan.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "smile\/math\/distance\/MeanMahanttan.html", "kind" : "class"}, {"name" : "smile.math.distance.PatternDifference", "shortDescription" : "Pattern difference distance.", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "smile\/math\/distance\/PatternDifference.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/distance\/PatternDifference.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (PatternDifference) => Boolean, msg: => Any): PatternDifference", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/distance\/PatternDifference.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (PatternDifference) => Boolean): PatternDifference", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/distance\/PatternDifference.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): PatternDifference", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/distance\/PatternDifference.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): PatternDifference", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/distance\/PatternDifference.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (PatternDifference, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/distance\/PatternDifference.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (PatternDifference, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/distance\/PatternDifference.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "d", "tail" : "(x: Array[Int], y: Array[Int]): Double", "member" : "smile.math.distance.PatternDifference.d", "link" : "smile\/math\/distance\/PatternDifference.html#d(x:Array[Int],y:Array[Int]):Double", "kind" : "def"}, {"member" : "smile.math.distance.PatternDifference#<init>", "error" : "unsupported entity"}, {"label" : "applyAsDouble", "tail" : "(arg0: Array[Int], arg1: Array[Int]): Double", "member" : "smile.math.distance.Distance.applyAsDouble", "link" : "smile\/math\/distance\/PatternDifference.html#applyAsDouble(x$1:T,x$2:T):Double", "kind" : "def"}, {"label" : "apply", "tail" : "(arg0: Array[Int], arg1: Array[Int]): Double", "member" : "smile.math.distance.Distance.apply", "link" : "smile\/math\/distance\/PatternDifference.html#apply(x$1:T,x$2:T):Double", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/distance\/PatternDifference.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/distance\/PatternDifference.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/distance\/PatternDifference.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/distance\/PatternDifference.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/distance\/PatternDifference.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/distance\/PatternDifference.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/distance\/PatternDifference.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/distance\/PatternDifference.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/distance\/PatternDifference.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/distance\/PatternDifference.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/distance\/PatternDifference.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/distance\/PatternDifference.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/math\/distance\/PatternDifference.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/distance\/PatternDifference.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/math\/distance\/PatternDifference.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/math\/distance\/PatternDifference.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/distance\/PatternDifference.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/distance\/PatternDifference.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/distance\/PatternDifference.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "smile\/math\/distance\/PatternDifference.html", "kind" : "class"}, {"name" : "smile.math.distance.ShapeDifference", "shortDescription" : "Shape Difference distance.", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "smile\/math\/distance\/ShapeDifference.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/distance\/ShapeDifference.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ShapeDifference) => Boolean, msg: => Any): ShapeDifference", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/distance\/ShapeDifference.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ShapeDifference) => Boolean): ShapeDifference", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/distance\/ShapeDifference.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): ShapeDifference", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/distance\/ShapeDifference.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ShapeDifference", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/distance\/ShapeDifference.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ShapeDifference, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/distance\/ShapeDifference.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ShapeDifference, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/distance\/ShapeDifference.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "d", "tail" : "(x: Array[Int], y: Array[Int]): Double", "member" : "smile.math.distance.ShapeDifference.d", "link" : "smile\/math\/distance\/ShapeDifference.html#d(x:Array[Int],y:Array[Int]):Double", "kind" : "def"}, {"member" : "smile.math.distance.ShapeDifference#<init>", "error" : "unsupported entity"}, {"label" : "applyAsDouble", "tail" : "(arg0: Array[Int], arg1: Array[Int]): Double", "member" : "smile.math.distance.Distance.applyAsDouble", "link" : "smile\/math\/distance\/ShapeDifference.html#applyAsDouble(x$1:T,x$2:T):Double", "kind" : "def"}, {"label" : "apply", "tail" : "(arg0: Array[Int], arg1: Array[Int]): Double", "member" : "smile.math.distance.Distance.apply", "link" : "smile\/math\/distance\/ShapeDifference.html#apply(x$1:T,x$2:T):Double", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/distance\/ShapeDifference.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/distance\/ShapeDifference.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/distance\/ShapeDifference.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/distance\/ShapeDifference.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/distance\/ShapeDifference.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/distance\/ShapeDifference.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/distance\/ShapeDifference.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/distance\/ShapeDifference.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/distance\/ShapeDifference.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/distance\/ShapeDifference.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/distance\/ShapeDifference.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/distance\/ShapeDifference.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/math\/distance\/ShapeDifference.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/distance\/ShapeDifference.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/math\/distance\/ShapeDifference.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/math\/distance\/ShapeDifference.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/distance\/ShapeDifference.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/distance\/ShapeDifference.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/distance\/ShapeDifference.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "smile\/math\/distance\/ShapeDifference.html", "kind" : "class"}, {"name" : "smile.math.distance.SizeDifference", "shortDescription" : "Size Difference distance.", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "smile\/math\/distance\/SizeDifference.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/distance\/SizeDifference.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SizeDifference) => Boolean, msg: => Any): SizeDifference", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/distance\/SizeDifference.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SizeDifference) => Boolean): SizeDifference", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/distance\/SizeDifference.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): SizeDifference", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/distance\/SizeDifference.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): SizeDifference", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/distance\/SizeDifference.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (SizeDifference, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/distance\/SizeDifference.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (SizeDifference, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/distance\/SizeDifference.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "d", "tail" : "(x: Array[Int], y: Array[Int]): Double", "member" : "smile.math.distance.SizeDifference.d", "link" : "smile\/math\/distance\/SizeDifference.html#d(x:Array[Int],y:Array[Int]):Double", "kind" : "def"}, {"member" : "smile.math.distance.SizeDifference#<init>", "error" : "unsupported entity"}, {"label" : "applyAsDouble", "tail" : "(arg0: Array[Int], arg1: Array[Int]): Double", "member" : "smile.math.distance.Distance.applyAsDouble", "link" : "smile\/math\/distance\/SizeDifference.html#applyAsDouble(x$1:T,x$2:T):Double", "kind" : "def"}, {"label" : "apply", "tail" : "(arg0: Array[Int], arg1: Array[Int]): Double", "member" : "smile.math.distance.Distance.apply", "link" : "smile\/math\/distance\/SizeDifference.html#apply(x$1:T,x$2:T):Double", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/distance\/SizeDifference.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/distance\/SizeDifference.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/distance\/SizeDifference.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/distance\/SizeDifference.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/distance\/SizeDifference.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/distance\/SizeDifference.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/distance\/SizeDifference.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/distance\/SizeDifference.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/distance\/SizeDifference.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/distance\/SizeDifference.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/distance\/SizeDifference.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/distance\/SizeDifference.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/math\/distance\/SizeDifference.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/distance\/SizeDifference.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/math\/distance\/SizeDifference.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/math\/distance\/SizeDifference.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/distance\/SizeDifference.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/distance\/SizeDifference.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/distance\/SizeDifference.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "smile\/math\/distance\/SizeDifference.html", "kind" : "class"}, {"name" : "smile.math.distance.Vari", "shortDescription" : "Vari distance class.", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "smile\/math\/distance\/Vari.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/distance\/Vari.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Vari) => Boolean, msg: => Any): Vari", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/distance\/Vari.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Vari) => Boolean): Vari", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/distance\/Vari.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Vari", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/distance\/Vari.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Vari", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/distance\/Vari.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Vari, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/distance\/Vari.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Vari, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/distance\/Vari.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "d", "tail" : "(x: Array[Int], y: Array[Int]): Double", "member" : "smile.math.distance.Vari.d", "link" : "smile\/math\/distance\/Vari.html#d(x:Array[Int],y:Array[Int]):Double", "kind" : "def"}, {"member" : "smile.math.distance.Vari#<init>", "error" : "unsupported entity"}, {"label" : "applyAsDouble", "tail" : "(arg0: Array[Int], arg1: Array[Int]): Double", "member" : "smile.math.distance.Distance.applyAsDouble", "link" : "smile\/math\/distance\/Vari.html#applyAsDouble(x$1:T,x$2:T):Double", "kind" : "def"}, {"label" : "apply", "tail" : "(arg0: Array[Int], arg1: Array[Int]): Double", "member" : "smile.math.distance.Distance.apply", "link" : "smile\/math\/distance\/Vari.html#apply(x$1:T,x$2:T):Double", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/distance\/Vari.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/distance\/Vari.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/distance\/Vari.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/distance\/Vari.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/distance\/Vari.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/distance\/Vari.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/distance\/Vari.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/distance\/Vari.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/distance\/Vari.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/distance\/Vari.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/distance\/Vari.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/distance\/Vari.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/math\/distance\/Vari.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/distance\/Vari.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/math\/distance\/Vari.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/math\/distance\/Vari.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/distance\/Vari.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/distance\/Vari.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/distance\/Vari.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "smile\/math\/distance\/Vari.html", "kind" : "class"}], "smile.data.formula" : [{"name" : "smile.data.formula.FormulaBuilder", "shortDescription" : "DSL to build a formula in R style.", "members_case class" : [{"label" : "yint", "tail" : "(arg0: Tuple): Int", "member" : "smile.data.formula.buildFormula.yint", "link" : "smile\/data\/formula\/FormulaBuilder.html#yint(x$1:smile.data.Tuple):Int", "kind" : "def"}, {"label" : "matrix", "tail" : "(arg0: DataFrame, arg1: Boolean): DenseMatrix", "member" : "smile.data.formula.buildFormula.matrix", "link" : "smile\/data\/formula\/FormulaBuilder.html#matrix(x$1:smile.data.DataFrame,x$2:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "matrix", "tail" : "(arg0: DataFrame): DenseMatrix", "member" : "smile.data.formula.buildFormula.matrix", "link" : "smile\/data\/formula\/FormulaBuilder.html#matrix(x$1:smile.data.DataFrame):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "apply", "tail" : "(arg0: DataFrame): DataFrame", "member" : "smile.data.formula.buildFormula.apply", "link" : "smile\/data\/formula\/FormulaBuilder.html#apply(x$1:smile.data.DataFrame):smile.data.DataFrame", "kind" : "def"}, {"label" : "xarray", "tail" : "(arg0: Tuple): Array[Double]", "member" : "smile.data.formula.buildFormula.xarray", "link" : "smile\/data\/formula\/FormulaBuilder.html#xarray(x$1:smile.data.Tuple):Array[Double]", "kind" : "def"}, {"label" : "apply", "tail" : "(arg0: Tuple): Tuple", "member" : "smile.data.formula.buildFormula.apply", "link" : "smile\/data\/formula\/FormulaBuilder.html#apply(x$1:smile.data.Tuple):smile.data.Tuple", "kind" : "def"}, {"label" : "bind", "tail" : "(arg0: StructType): StructType", "member" : "smile.data.formula.buildFormula.bind", "link" : "smile\/data\/formula\/FormulaBuilder.html#bind(x$1:smile.data.type.StructType):smile.data.type.StructType", "kind" : "def"}, {"label" : "xschema", "tail" : "(): StructType", "member" : "smile.data.formula.buildFormula.xschema", "link" : "smile\/data\/formula\/FormulaBuilder.html#xschema():smile.data.type.StructType", "kind" : "def"}, {"label" : "schema", "tail" : "(): StructType", "member" : "smile.data.formula.buildFormula.schema", "link" : "smile\/data\/formula\/FormulaBuilder.html#schema():smile.data.type.StructType", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.data.formula.buildFormula.toString", "link" : "smile\/data\/formula\/FormulaBuilder.html#toString():String", "kind" : "def"}, {"label" : "response", "tail" : "(): Optional[Term]", "member" : "smile.data.formula.buildFormula.response", "link" : "smile\/data\/formula\/FormulaBuilder.html#response():java.util.Optional[smile.data.formula.Term]", "kind" : "def"}, {"label" : "predictors", "tail" : "(): Formula", "member" : "smile.data.formula.buildFormula.predictors", "link" : "smile\/data\/formula\/FormulaBuilder.html#predictors():smile.data.formula.Formula", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/data\/formula\/FormulaBuilder.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (FormulaBuilder) => Boolean, msg: => Any): FormulaBuilder", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/data\/formula\/FormulaBuilder.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (FormulaBuilder) => Boolean): FormulaBuilder", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/data\/formula\/FormulaBuilder.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): FormulaBuilder", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/data\/formula\/FormulaBuilder.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): FormulaBuilder", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/data\/formula\/FormulaBuilder.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (FormulaBuilder, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/data\/formula\/FormulaBuilder.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (FormulaBuilder, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/data\/formula\/FormulaBuilder.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toFormula", "tail" : "(): Formula", "member" : "smile.data.formula.FormulaBuilder.toFormula", "link" : "smile\/data\/formula\/FormulaBuilder.html#toFormula:smile.data.formula.Formula", "kind" : "def"}, {"label" : "-", "tail" : "(variable: String): FormulaBuilder", "member" : "smile.data.formula.FormulaBuilder.-", "link" : "smile\/data\/formula\/FormulaBuilder.html#-(variable:String):smile.data.formula.FormulaBuilder", "kind" : "def"}, {"label" : "-", "tail" : "(term: Term): FormulaBuilder", "member" : "smile.data.formula.FormulaBuilder.-", "link" : "smile\/data\/formula\/FormulaBuilder.html#-(term:smile.data.formula.Term):smile.data.formula.FormulaBuilder", "kind" : "def"}, {"label" : "+", "tail" : "(variable: String): FormulaBuilder", "member" : "smile.data.formula.FormulaBuilder.+", "link" : "smile\/data\/formula\/FormulaBuilder.html#+(variable:String):smile.data.formula.FormulaBuilder", "kind" : "def"}, {"label" : "+", "tail" : "(term: HyperTerm): FormulaBuilder", "member" : "smile.data.formula.FormulaBuilder.+", "link" : "smile\/data\/formula\/FormulaBuilder.html#+(term:smile.data.formula.HyperTerm):smile.data.formula.FormulaBuilder", "kind" : "def"}, {"member" : "smile.data.formula.FormulaBuilder#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": ListBuffer[HyperTerm]", "member" : "smile.data.formula.FormulaBuilder.x", "link" : "smile\/data\/formula\/FormulaBuilder.html#x:scala.collection.mutable.ListBuffer[smile.data.formula.HyperTerm]", "kind" : "val"}, {"label" : "y", "tail" : ": Option[Term]", "member" : "smile.data.formula.FormulaBuilder.y", "link" : "smile\/data\/formula\/FormulaBuilder.html#y:Option[smile.data.formula.Term]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/data\/formula\/FormulaBuilder.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/data\/formula\/FormulaBuilder.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/data\/formula\/FormulaBuilder.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/data\/formula\/FormulaBuilder.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/data\/formula\/FormulaBuilder.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/data\/formula\/FormulaBuilder.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/data\/formula\/FormulaBuilder.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/data\/formula\/FormulaBuilder.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/data\/formula\/FormulaBuilder.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/data\/formula\/FormulaBuilder.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/data\/formula\/FormulaBuilder.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/data\/formula\/FormulaBuilder.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/data\/formula\/FormulaBuilder.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/data\/formula\/FormulaBuilder.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/data\/formula\/FormulaBuilder.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/data\/formula\/FormulaBuilder.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/data\/formula\/FormulaBuilder.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/data\/formula\/FormulaBuilder.html", "kind" : "case class"}], "smile.clustering" : [{"name" : "smile.clustering.$dummy", "shortDescription" : "Hacking scaladoc issue-8124.", "object" : "smile\/clustering\/package$$$dummy$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/clustering\/package$$$dummy$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/clustering\/package$$$dummy$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/clustering\/package$$$dummy$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/clustering\/package$$$dummy$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/clustering\/package$$$dummy$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/clustering\/package$$$dummy$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/clustering\/package$$$dummy$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/clustering\/package$$$dummy$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/clustering\/package$$$dummy$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/clustering\/package$$$dummy$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/clustering\/package$$$dummy$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/clustering\/package$$$dummy$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/clustering\/package$$$dummy$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/clustering\/package$$$dummy$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/clustering\/package$$$dummy$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/clustering\/package$$$dummy$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/clustering\/package$$$dummy$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/clustering\/package$$$dummy$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/clustering\/package$$$dummy$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "smile.association" : [{"name" : "smile.association.$dummy", "shortDescription" : "Hacking scaladoc issue-8124.", "object" : "smile\/association\/package$$$dummy$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/association\/package$$$dummy$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/association\/package$$$dummy$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/association\/package$$$dummy$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/association\/package$$$dummy$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/association\/package$$$dummy$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/association\/package$$$dummy$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/association\/package$$$dummy$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/association\/package$$$dummy$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/association\/package$$$dummy$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/association\/package$$$dummy$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/association\/package$$$dummy$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/association\/package$$$dummy$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/association\/package$$$dummy$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/association\/package$$$dummy$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/association\/package$$$dummy$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/association\/package$$$dummy$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/association\/package$$$dummy$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/association\/package$$$dummy$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/association\/package$$$dummy$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "smile.imputation" : [{"name" : "smile.imputation.$dummy", "shortDescription" : "Hacking scaladoc issue-8124.", "object" : "smile\/imputation\/package$$$dummy$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/imputation\/package$$$dummy$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/imputation\/package$$$dummy$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/imputation\/package$$$dummy$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/imputation\/package$$$dummy$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/imputation\/package$$$dummy$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/imputation\/package$$$dummy$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/imputation\/package$$$dummy$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/imputation\/package$$$dummy$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/imputation\/package$$$dummy$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/imputation\/package$$$dummy$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/imputation\/package$$$dummy$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/imputation\/package$$$dummy$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/imputation\/package$$$dummy$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/imputation\/package$$$dummy$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/imputation\/package$$$dummy$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/imputation\/package$$$dummy$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/imputation\/package$$$dummy$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/imputation\/package$$$dummy$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/imputation\/package$$$dummy$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "smile.math" : [{"name" : "smile.math.AbsMatrix", "shortDescription" : "", "members_case class" : [{"label" : "toArray", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.matrixExpression2Array.toArray", "link" : "smile\/math\/AbsMatrix.html#toArray():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.sum", "link" : "smile\/math\/AbsMatrix.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/AbsMatrix.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/AbsMatrix.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/AbsMatrix.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/AbsMatrix.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/AbsMatrix.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/AbsMatrix.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/AbsMatrix.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/AbsMatrix.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/AbsMatrix.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/AbsMatrix.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/AbsMatrix.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/AbsMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/AbsMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/AbsMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/AbsMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/AbsMatrix.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/AbsMatrix.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSds", "link" : "smile\/math\/AbsMatrix.html#colSds():Array[Double]", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colMeans", "link" : "smile\/math\/AbsMatrix.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSums", "link" : "smile\/math\/AbsMatrix.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSds", "link" : "smile\/math\/AbsMatrix.html#rowSds():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowMeans", "link" : "smile\/math\/AbsMatrix.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSums", "link" : "smile\/math\/AbsMatrix.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.matrixExpression2Array.xax", "link" : "smile\/math\/AbsMatrix.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normFro", "link" : "smile\/math\/AbsMatrix.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normInf", "link" : "smile\/math\/AbsMatrix.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm", "link" : "smile\/math\/AbsMatrix.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm2", "link" : "smile\/math\/AbsMatrix.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm1", "link" : "smile\/math\/AbsMatrix.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/AbsMatrix.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/AbsMatrix.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(arg0: Array[Double], arg1: Array[Double]): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/AbsMatrix.html#scale(x$1:Array[Double],x$2:Array[Double]):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/AbsMatrix.html#scale():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/AbsMatrix.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/AbsMatrix.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/AbsMatrix.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/AbsMatrix.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/AbsMatrix.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/AbsMatrix.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "submat", "tail" : "(arg0: Int, arg1: Int, arg2: Int, arg3: Int): DenseMatrix", "member" : "smile.math.matrixExpression2Array.submat", "link" : "smile\/math\/AbsMatrix.html#submat(x$1:Int,x$2:Int,x$3:Int,x$4:Int):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.update", "link" : "smile\/math\/AbsMatrix.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.matrixExpression2Array.ld", "link" : "smile\/math\/AbsMatrix.html#ld():Int", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/AbsMatrix.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/AbsMatrix.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/AbsMatrix.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/AbsMatrix.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/AbsMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/AbsMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atx", "link" : "smile\/math\/AbsMatrix.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/AbsMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/AbsMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.trace", "link" : "smile\/math\/AbsMatrix.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.diag", "link" : "smile\/math\/AbsMatrix.html#diag():Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.matrixExpression2Array.get", "link" : "smile\/math\/AbsMatrix.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/AbsMatrix.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/AbsMatrix.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/AbsMatrix.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/AbsMatrix.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/AbsMatrix.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/AbsMatrix.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.aat", "link" : "smile\/math\/AbsMatrix.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.ata", "link" : "smile\/math\/AbsMatrix.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.transpose", "link" : "smile\/math\/AbsMatrix.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/AbsMatrix.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/AbsMatrix.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/AbsMatrix.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/AbsMatrix.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/AbsMatrix.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/AbsMatrix.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.set", "link" : "smile\/math\/AbsMatrix.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "fill", "tail" : "(arg0: Double): Unit", "member" : "smile.math.matrixExpression2Array.fill", "link" : "smile\/math\/AbsMatrix.html#fill(x$1:Double):Unit", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.data", "link" : "smile\/math\/AbsMatrix.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbtmm", "link" : "smile\/math\/AbsMatrix.html#atbtmm(x$1:B):A", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbmm", "link" : "smile\/math\/AbsMatrix.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abtmm", "link" : "smile\/math\/AbsMatrix.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abmm", "link" : "smile\/math\/AbsMatrix.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.ax", "link" : "smile\/math\/AbsMatrix.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/AbsMatrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AbsMatrix) => Boolean, msg: => Any): AbsMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AbsMatrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AbsMatrix) => Boolean): AbsMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AbsMatrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): AbsMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AbsMatrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): AbsMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AbsMatrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (AbsMatrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/AbsMatrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (AbsMatrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/AbsMatrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.AbsMatrix.toMatrix", "link" : "smile\/math\/AbsMatrix.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.AbsMatrix.apply", "link" : "smile\/math\/AbsMatrix.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.AbsMatrix.ncols", "link" : "smile\/math\/AbsMatrix.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.AbsMatrix.nrows", "link" : "smile\/math\/AbsMatrix.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.AbsMatrix#<init>", "error" : "unsupported entity"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.AbsMatrix.A", "link" : "smile\/math\/AbsMatrix.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/AbsMatrix.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/AbsMatrix.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/AbsMatrix.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/AbsMatrix.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/AbsMatrix.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/AbsMatrix.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/AbsMatrix.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/AbsMatrix.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/AbsMatrix.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/AbsMatrix.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/AbsMatrix.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/AbsMatrix.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/AbsMatrix.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/AbsMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/AbsMatrix.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/AbsMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/AbsMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/AbsMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/AbsMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/AbsMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/AbsMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/AbsMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/AbsMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/AbsMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/AbsMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/AbsMatrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/AbsMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/AbsMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/AbsMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/AbsMatrix.html", "kind" : "case class"}, {"name" : "smile.math.AbsVector", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.vectorExpression2Array.update", "link" : "smile\/math\/AbsVector.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/AbsVector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AbsVector) => Boolean, msg: => Any): AbsVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AbsVector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AbsVector) => Boolean): AbsVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AbsVector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): AbsVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AbsVector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): AbsVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AbsVector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (AbsVector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/AbsVector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (AbsVector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/AbsVector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.AbsVector.toArray", "link" : "smile\/math\/AbsVector.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.AbsVector.apply", "link" : "smile\/math\/AbsVector.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.AbsVector.length", "link" : "smile\/math\/AbsVector.html#length:Int", "kind" : "def"}, {"member" : "smile.math.AbsVector#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.AbsVector.x", "link" : "smile\/math\/AbsVector.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/AbsVector.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/AbsVector.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/AbsVector.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/AbsVector.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/AbsVector.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/AbsVector.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/AbsVector.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/AbsVector.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/AbsVector.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/AbsVector.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/AbsVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/AbsVector.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/AbsVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/AbsVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/AbsVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/AbsVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/AbsVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/AbsVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/AbsVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/AbsVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/AbsVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/AbsVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/AbsVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/AbsVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/AbsVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/AbsVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/AbsVector.html", "kind" : "case class"}, {"name" : "smile.math.AcosMatrix", "shortDescription" : "", "members_case class" : [{"label" : "toArray", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.matrixExpression2Array.toArray", "link" : "smile\/math\/AcosMatrix.html#toArray():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.sum", "link" : "smile\/math\/AcosMatrix.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/AcosMatrix.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/AcosMatrix.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/AcosMatrix.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/AcosMatrix.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/AcosMatrix.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/AcosMatrix.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/AcosMatrix.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/AcosMatrix.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/AcosMatrix.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/AcosMatrix.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/AcosMatrix.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/AcosMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/AcosMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/AcosMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/AcosMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/AcosMatrix.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/AcosMatrix.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSds", "link" : "smile\/math\/AcosMatrix.html#colSds():Array[Double]", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colMeans", "link" : "smile\/math\/AcosMatrix.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSums", "link" : "smile\/math\/AcosMatrix.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSds", "link" : "smile\/math\/AcosMatrix.html#rowSds():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowMeans", "link" : "smile\/math\/AcosMatrix.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSums", "link" : "smile\/math\/AcosMatrix.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.matrixExpression2Array.xax", "link" : "smile\/math\/AcosMatrix.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normFro", "link" : "smile\/math\/AcosMatrix.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normInf", "link" : "smile\/math\/AcosMatrix.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm", "link" : "smile\/math\/AcosMatrix.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm2", "link" : "smile\/math\/AcosMatrix.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm1", "link" : "smile\/math\/AcosMatrix.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/AcosMatrix.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/AcosMatrix.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(arg0: Array[Double], arg1: Array[Double]): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/AcosMatrix.html#scale(x$1:Array[Double],x$2:Array[Double]):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/AcosMatrix.html#scale():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/AcosMatrix.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/AcosMatrix.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/AcosMatrix.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/AcosMatrix.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/AcosMatrix.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/AcosMatrix.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "submat", "tail" : "(arg0: Int, arg1: Int, arg2: Int, arg3: Int): DenseMatrix", "member" : "smile.math.matrixExpression2Array.submat", "link" : "smile\/math\/AcosMatrix.html#submat(x$1:Int,x$2:Int,x$3:Int,x$4:Int):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.update", "link" : "smile\/math\/AcosMatrix.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.matrixExpression2Array.ld", "link" : "smile\/math\/AcosMatrix.html#ld():Int", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/AcosMatrix.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/AcosMatrix.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/AcosMatrix.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/AcosMatrix.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/AcosMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/AcosMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atx", "link" : "smile\/math\/AcosMatrix.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/AcosMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/AcosMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.trace", "link" : "smile\/math\/AcosMatrix.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.diag", "link" : "smile\/math\/AcosMatrix.html#diag():Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.matrixExpression2Array.get", "link" : "smile\/math\/AcosMatrix.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/AcosMatrix.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/AcosMatrix.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/AcosMatrix.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/AcosMatrix.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/AcosMatrix.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/AcosMatrix.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.aat", "link" : "smile\/math\/AcosMatrix.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.ata", "link" : "smile\/math\/AcosMatrix.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.transpose", "link" : "smile\/math\/AcosMatrix.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/AcosMatrix.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/AcosMatrix.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/AcosMatrix.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/AcosMatrix.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/AcosMatrix.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/AcosMatrix.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.set", "link" : "smile\/math\/AcosMatrix.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "fill", "tail" : "(arg0: Double): Unit", "member" : "smile.math.matrixExpression2Array.fill", "link" : "smile\/math\/AcosMatrix.html#fill(x$1:Double):Unit", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.data", "link" : "smile\/math\/AcosMatrix.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbtmm", "link" : "smile\/math\/AcosMatrix.html#atbtmm(x$1:B):A", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbmm", "link" : "smile\/math\/AcosMatrix.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abtmm", "link" : "smile\/math\/AcosMatrix.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abmm", "link" : "smile\/math\/AcosMatrix.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.ax", "link" : "smile\/math\/AcosMatrix.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/AcosMatrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AcosMatrix) => Boolean, msg: => Any): AcosMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AcosMatrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AcosMatrix) => Boolean): AcosMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AcosMatrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): AcosMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AcosMatrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): AcosMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AcosMatrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (AcosMatrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/AcosMatrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (AcosMatrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/AcosMatrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.AcosMatrix.toMatrix", "link" : "smile\/math\/AcosMatrix.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.AcosMatrix.apply", "link" : "smile\/math\/AcosMatrix.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.AcosMatrix.ncols", "link" : "smile\/math\/AcosMatrix.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.AcosMatrix.nrows", "link" : "smile\/math\/AcosMatrix.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.AcosMatrix#<init>", "error" : "unsupported entity"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.AcosMatrix.A", "link" : "smile\/math\/AcosMatrix.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/AcosMatrix.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/AcosMatrix.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/AcosMatrix.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/AcosMatrix.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/AcosMatrix.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/AcosMatrix.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/AcosMatrix.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/AcosMatrix.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/AcosMatrix.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/AcosMatrix.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/AcosMatrix.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/AcosMatrix.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/AcosMatrix.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/AcosMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/AcosMatrix.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/AcosMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/AcosMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/AcosMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/AcosMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/AcosMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/AcosMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/AcosMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/AcosMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/AcosMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/AcosMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/AcosMatrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/AcosMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/AcosMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/AcosMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/AcosMatrix.html", "kind" : "case class"}, {"name" : "smile.math.AcosVector", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.vectorExpression2Array.update", "link" : "smile\/math\/AcosVector.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/AcosVector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AcosVector) => Boolean, msg: => Any): AcosVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AcosVector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AcosVector) => Boolean): AcosVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AcosVector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): AcosVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AcosVector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): AcosVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AcosVector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (AcosVector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/AcosVector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (AcosVector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/AcosVector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.AcosVector.toArray", "link" : "smile\/math\/AcosVector.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.AcosVector.apply", "link" : "smile\/math\/AcosVector.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.AcosVector.length", "link" : "smile\/math\/AcosVector.html#length:Int", "kind" : "def"}, {"member" : "smile.math.AcosVector#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.AcosVector.x", "link" : "smile\/math\/AcosVector.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/AcosVector.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/AcosVector.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/AcosVector.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/AcosVector.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/AcosVector.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/AcosVector.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/AcosVector.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/AcosVector.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/AcosVector.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/AcosVector.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/AcosVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/AcosVector.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/AcosVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/AcosVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/AcosVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/AcosVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/AcosVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/AcosVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/AcosVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/AcosVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/AcosVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/AcosVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/AcosVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/AcosVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/AcosVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/AcosVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/AcosVector.html", "kind" : "case class"}, {"name" : "smile.math.AsinMatrix", "shortDescription" : "", "members_case class" : [{"label" : "toArray", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.matrixExpression2Array.toArray", "link" : "smile\/math\/AsinMatrix.html#toArray():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.sum", "link" : "smile\/math\/AsinMatrix.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/AsinMatrix.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/AsinMatrix.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/AsinMatrix.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/AsinMatrix.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/AsinMatrix.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/AsinMatrix.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/AsinMatrix.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/AsinMatrix.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/AsinMatrix.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/AsinMatrix.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/AsinMatrix.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/AsinMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/AsinMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/AsinMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/AsinMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/AsinMatrix.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/AsinMatrix.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSds", "link" : "smile\/math\/AsinMatrix.html#colSds():Array[Double]", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colMeans", "link" : "smile\/math\/AsinMatrix.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSums", "link" : "smile\/math\/AsinMatrix.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSds", "link" : "smile\/math\/AsinMatrix.html#rowSds():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowMeans", "link" : "smile\/math\/AsinMatrix.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSums", "link" : "smile\/math\/AsinMatrix.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.matrixExpression2Array.xax", "link" : "smile\/math\/AsinMatrix.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normFro", "link" : "smile\/math\/AsinMatrix.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normInf", "link" : "smile\/math\/AsinMatrix.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm", "link" : "smile\/math\/AsinMatrix.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm2", "link" : "smile\/math\/AsinMatrix.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm1", "link" : "smile\/math\/AsinMatrix.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/AsinMatrix.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/AsinMatrix.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(arg0: Array[Double], arg1: Array[Double]): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/AsinMatrix.html#scale(x$1:Array[Double],x$2:Array[Double]):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/AsinMatrix.html#scale():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/AsinMatrix.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/AsinMatrix.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/AsinMatrix.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/AsinMatrix.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/AsinMatrix.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/AsinMatrix.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "submat", "tail" : "(arg0: Int, arg1: Int, arg2: Int, arg3: Int): DenseMatrix", "member" : "smile.math.matrixExpression2Array.submat", "link" : "smile\/math\/AsinMatrix.html#submat(x$1:Int,x$2:Int,x$3:Int,x$4:Int):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.update", "link" : "smile\/math\/AsinMatrix.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.matrixExpression2Array.ld", "link" : "smile\/math\/AsinMatrix.html#ld():Int", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/AsinMatrix.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/AsinMatrix.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/AsinMatrix.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/AsinMatrix.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/AsinMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/AsinMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atx", "link" : "smile\/math\/AsinMatrix.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/AsinMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/AsinMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.trace", "link" : "smile\/math\/AsinMatrix.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.diag", "link" : "smile\/math\/AsinMatrix.html#diag():Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.matrixExpression2Array.get", "link" : "smile\/math\/AsinMatrix.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/AsinMatrix.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/AsinMatrix.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/AsinMatrix.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/AsinMatrix.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/AsinMatrix.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/AsinMatrix.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.aat", "link" : "smile\/math\/AsinMatrix.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.ata", "link" : "smile\/math\/AsinMatrix.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.transpose", "link" : "smile\/math\/AsinMatrix.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/AsinMatrix.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/AsinMatrix.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/AsinMatrix.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/AsinMatrix.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/AsinMatrix.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/AsinMatrix.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.set", "link" : "smile\/math\/AsinMatrix.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "fill", "tail" : "(arg0: Double): Unit", "member" : "smile.math.matrixExpression2Array.fill", "link" : "smile\/math\/AsinMatrix.html#fill(x$1:Double):Unit", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.data", "link" : "smile\/math\/AsinMatrix.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbtmm", "link" : "smile\/math\/AsinMatrix.html#atbtmm(x$1:B):A", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbmm", "link" : "smile\/math\/AsinMatrix.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abtmm", "link" : "smile\/math\/AsinMatrix.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abmm", "link" : "smile\/math\/AsinMatrix.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.ax", "link" : "smile\/math\/AsinMatrix.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/AsinMatrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AsinMatrix) => Boolean, msg: => Any): AsinMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AsinMatrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AsinMatrix) => Boolean): AsinMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AsinMatrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): AsinMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AsinMatrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): AsinMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AsinMatrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (AsinMatrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/AsinMatrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (AsinMatrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/AsinMatrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.AsinMatrix.toMatrix", "link" : "smile\/math\/AsinMatrix.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.AsinMatrix.apply", "link" : "smile\/math\/AsinMatrix.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.AsinMatrix.ncols", "link" : "smile\/math\/AsinMatrix.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.AsinMatrix.nrows", "link" : "smile\/math\/AsinMatrix.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.AsinMatrix#<init>", "error" : "unsupported entity"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.AsinMatrix.A", "link" : "smile\/math\/AsinMatrix.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/AsinMatrix.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/AsinMatrix.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/AsinMatrix.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/AsinMatrix.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/AsinMatrix.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/AsinMatrix.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/AsinMatrix.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/AsinMatrix.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/AsinMatrix.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/AsinMatrix.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/AsinMatrix.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/AsinMatrix.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/AsinMatrix.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/AsinMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/AsinMatrix.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/AsinMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/AsinMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/AsinMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/AsinMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/AsinMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/AsinMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/AsinMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/AsinMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/AsinMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/AsinMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/AsinMatrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/AsinMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/AsinMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/AsinMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/AsinMatrix.html", "kind" : "case class"}, {"name" : "smile.math.AsinVector", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.vectorExpression2Array.update", "link" : "smile\/math\/AsinVector.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/AsinVector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AsinVector) => Boolean, msg: => Any): AsinVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AsinVector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AsinVector) => Boolean): AsinVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AsinVector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): AsinVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AsinVector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): AsinVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AsinVector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (AsinVector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/AsinVector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (AsinVector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/AsinVector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.AsinVector.toArray", "link" : "smile\/math\/AsinVector.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.AsinVector.apply", "link" : "smile\/math\/AsinVector.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.AsinVector.length", "link" : "smile\/math\/AsinVector.html#length:Int", "kind" : "def"}, {"member" : "smile.math.AsinVector#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.AsinVector.x", "link" : "smile\/math\/AsinVector.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/AsinVector.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/AsinVector.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/AsinVector.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/AsinVector.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/AsinVector.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/AsinVector.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/AsinVector.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/AsinVector.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/AsinVector.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/AsinVector.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/AsinVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/AsinVector.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/AsinVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/AsinVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/AsinVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/AsinVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/AsinVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/AsinVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/AsinVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/AsinVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/AsinVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/AsinVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/AsinVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/AsinVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/AsinVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/AsinVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/AsinVector.html", "kind" : "case class"}, {"name" : "smile.math.AtanMatrix", "shortDescription" : "", "members_case class" : [{"label" : "toArray", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.matrixExpression2Array.toArray", "link" : "smile\/math\/AtanMatrix.html#toArray():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.sum", "link" : "smile\/math\/AtanMatrix.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/AtanMatrix.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/AtanMatrix.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/AtanMatrix.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/AtanMatrix.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/AtanMatrix.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/AtanMatrix.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/AtanMatrix.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/AtanMatrix.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/AtanMatrix.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/AtanMatrix.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/AtanMatrix.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/AtanMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/AtanMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/AtanMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/AtanMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/AtanMatrix.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/AtanMatrix.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSds", "link" : "smile\/math\/AtanMatrix.html#colSds():Array[Double]", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colMeans", "link" : "smile\/math\/AtanMatrix.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSums", "link" : "smile\/math\/AtanMatrix.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSds", "link" : "smile\/math\/AtanMatrix.html#rowSds():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowMeans", "link" : "smile\/math\/AtanMatrix.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSums", "link" : "smile\/math\/AtanMatrix.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.matrixExpression2Array.xax", "link" : "smile\/math\/AtanMatrix.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normFro", "link" : "smile\/math\/AtanMatrix.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normInf", "link" : "smile\/math\/AtanMatrix.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm", "link" : "smile\/math\/AtanMatrix.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm2", "link" : "smile\/math\/AtanMatrix.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm1", "link" : "smile\/math\/AtanMatrix.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/AtanMatrix.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/AtanMatrix.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(arg0: Array[Double], arg1: Array[Double]): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/AtanMatrix.html#scale(x$1:Array[Double],x$2:Array[Double]):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/AtanMatrix.html#scale():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/AtanMatrix.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/AtanMatrix.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/AtanMatrix.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/AtanMatrix.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/AtanMatrix.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/AtanMatrix.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "submat", "tail" : "(arg0: Int, arg1: Int, arg2: Int, arg3: Int): DenseMatrix", "member" : "smile.math.matrixExpression2Array.submat", "link" : "smile\/math\/AtanMatrix.html#submat(x$1:Int,x$2:Int,x$3:Int,x$4:Int):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.update", "link" : "smile\/math\/AtanMatrix.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.matrixExpression2Array.ld", "link" : "smile\/math\/AtanMatrix.html#ld():Int", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/AtanMatrix.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/AtanMatrix.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/AtanMatrix.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/AtanMatrix.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/AtanMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/AtanMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atx", "link" : "smile\/math\/AtanMatrix.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/AtanMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/AtanMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.trace", "link" : "smile\/math\/AtanMatrix.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.diag", "link" : "smile\/math\/AtanMatrix.html#diag():Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.matrixExpression2Array.get", "link" : "smile\/math\/AtanMatrix.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/AtanMatrix.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/AtanMatrix.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/AtanMatrix.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/AtanMatrix.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/AtanMatrix.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/AtanMatrix.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.aat", "link" : "smile\/math\/AtanMatrix.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.ata", "link" : "smile\/math\/AtanMatrix.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.transpose", "link" : "smile\/math\/AtanMatrix.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/AtanMatrix.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/AtanMatrix.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/AtanMatrix.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/AtanMatrix.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/AtanMatrix.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/AtanMatrix.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.set", "link" : "smile\/math\/AtanMatrix.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "fill", "tail" : "(arg0: Double): Unit", "member" : "smile.math.matrixExpression2Array.fill", "link" : "smile\/math\/AtanMatrix.html#fill(x$1:Double):Unit", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.data", "link" : "smile\/math\/AtanMatrix.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbtmm", "link" : "smile\/math\/AtanMatrix.html#atbtmm(x$1:B):A", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbmm", "link" : "smile\/math\/AtanMatrix.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abtmm", "link" : "smile\/math\/AtanMatrix.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abmm", "link" : "smile\/math\/AtanMatrix.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.ax", "link" : "smile\/math\/AtanMatrix.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/AtanMatrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AtanMatrix) => Boolean, msg: => Any): AtanMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AtanMatrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AtanMatrix) => Boolean): AtanMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AtanMatrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): AtanMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AtanMatrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): AtanMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AtanMatrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (AtanMatrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/AtanMatrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (AtanMatrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/AtanMatrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.AtanMatrix.toMatrix", "link" : "smile\/math\/AtanMatrix.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.AtanMatrix.apply", "link" : "smile\/math\/AtanMatrix.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.AtanMatrix.ncols", "link" : "smile\/math\/AtanMatrix.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.AtanMatrix.nrows", "link" : "smile\/math\/AtanMatrix.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.AtanMatrix#<init>", "error" : "unsupported entity"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.AtanMatrix.A", "link" : "smile\/math\/AtanMatrix.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/AtanMatrix.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/AtanMatrix.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/AtanMatrix.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/AtanMatrix.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/AtanMatrix.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/AtanMatrix.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/AtanMatrix.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/AtanMatrix.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/AtanMatrix.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/AtanMatrix.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/AtanMatrix.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/AtanMatrix.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/AtanMatrix.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/AtanMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/AtanMatrix.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/AtanMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/AtanMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/AtanMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/AtanMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/AtanMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/AtanMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/AtanMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/AtanMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/AtanMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/AtanMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/AtanMatrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/AtanMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/AtanMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/AtanMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/AtanMatrix.html", "kind" : "case class"}, {"name" : "smile.math.AtanVector", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.vectorExpression2Array.update", "link" : "smile\/math\/AtanVector.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/AtanVector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AtanVector) => Boolean, msg: => Any): AtanVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AtanVector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AtanVector) => Boolean): AtanVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AtanVector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): AtanVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AtanVector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): AtanVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/AtanVector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (AtanVector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/AtanVector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (AtanVector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/AtanVector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.AtanVector.toArray", "link" : "smile\/math\/AtanVector.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.AtanVector.apply", "link" : "smile\/math\/AtanVector.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.AtanVector.length", "link" : "smile\/math\/AtanVector.html#length:Int", "kind" : "def"}, {"member" : "smile.math.AtanVector#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.AtanVector.x", "link" : "smile\/math\/AtanVector.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/AtanVector.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/AtanVector.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/AtanVector.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/AtanVector.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/AtanVector.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/AtanVector.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/AtanVector.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/AtanVector.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/AtanVector.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/AtanVector.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/AtanVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/AtanVector.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/AtanVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/AtanVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/AtanVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/AtanVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/AtanVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/AtanVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/AtanVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/AtanVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/AtanVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/AtanVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/AtanVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/AtanVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/AtanVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/AtanVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/AtanVector.html", "kind" : "case class"}, {"name" : "smile.math.Ax", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.vectorExpression2Array.update", "link" : "smile\/math\/Ax.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/Ax.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Ax) => Boolean, msg: => Any): Ax", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Ax.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Ax) => Boolean): Ax", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Ax.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Ax", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Ax.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Ax", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Ax.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Ax, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/Ax.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Ax, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/Ax.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.Ax.toArray", "link" : "smile\/math\/Ax.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.Ax.apply", "link" : "smile\/math\/Ax.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.Ax.length", "link" : "smile\/math\/Ax.html#length:Int", "kind" : "def"}, {"member" : "smile.math.Ax#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.Ax.x", "link" : "smile\/math\/Ax.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.Ax.A", "link" : "smile\/math\/Ax.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/Ax.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/Ax.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/Ax.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/Ax.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/Ax.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/Ax.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/Ax.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/Ax.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/Ax.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/Ax.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/Ax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/Ax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/Ax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/Ax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/Ax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/Ax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/Ax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Ax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Ax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Ax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/Ax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/Ax.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/Ax.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/Ax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/Ax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/Ax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/Ax.html", "kind" : "case class"}, {"name" : "smile.math.CbrtMatrix", "shortDescription" : "", "members_case class" : [{"label" : "toArray", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.matrixExpression2Array.toArray", "link" : "smile\/math\/CbrtMatrix.html#toArray():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.sum", "link" : "smile\/math\/CbrtMatrix.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/CbrtMatrix.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/CbrtMatrix.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/CbrtMatrix.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/CbrtMatrix.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/CbrtMatrix.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/CbrtMatrix.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/CbrtMatrix.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/CbrtMatrix.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/CbrtMatrix.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/CbrtMatrix.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/CbrtMatrix.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/CbrtMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/CbrtMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/CbrtMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/CbrtMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/CbrtMatrix.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/CbrtMatrix.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSds", "link" : "smile\/math\/CbrtMatrix.html#colSds():Array[Double]", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colMeans", "link" : "smile\/math\/CbrtMatrix.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSums", "link" : "smile\/math\/CbrtMatrix.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSds", "link" : "smile\/math\/CbrtMatrix.html#rowSds():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowMeans", "link" : "smile\/math\/CbrtMatrix.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSums", "link" : "smile\/math\/CbrtMatrix.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.matrixExpression2Array.xax", "link" : "smile\/math\/CbrtMatrix.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normFro", "link" : "smile\/math\/CbrtMatrix.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normInf", "link" : "smile\/math\/CbrtMatrix.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm", "link" : "smile\/math\/CbrtMatrix.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm2", "link" : "smile\/math\/CbrtMatrix.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm1", "link" : "smile\/math\/CbrtMatrix.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/CbrtMatrix.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/CbrtMatrix.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(arg0: Array[Double], arg1: Array[Double]): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/CbrtMatrix.html#scale(x$1:Array[Double],x$2:Array[Double]):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/CbrtMatrix.html#scale():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/CbrtMatrix.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/CbrtMatrix.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/CbrtMatrix.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/CbrtMatrix.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/CbrtMatrix.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/CbrtMatrix.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "submat", "tail" : "(arg0: Int, arg1: Int, arg2: Int, arg3: Int): DenseMatrix", "member" : "smile.math.matrixExpression2Array.submat", "link" : "smile\/math\/CbrtMatrix.html#submat(x$1:Int,x$2:Int,x$3:Int,x$4:Int):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.update", "link" : "smile\/math\/CbrtMatrix.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.matrixExpression2Array.ld", "link" : "smile\/math\/CbrtMatrix.html#ld():Int", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/CbrtMatrix.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/CbrtMatrix.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/CbrtMatrix.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/CbrtMatrix.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/CbrtMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/CbrtMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atx", "link" : "smile\/math\/CbrtMatrix.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/CbrtMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/CbrtMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.trace", "link" : "smile\/math\/CbrtMatrix.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.diag", "link" : "smile\/math\/CbrtMatrix.html#diag():Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.matrixExpression2Array.get", "link" : "smile\/math\/CbrtMatrix.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/CbrtMatrix.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/CbrtMatrix.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/CbrtMatrix.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/CbrtMatrix.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/CbrtMatrix.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/CbrtMatrix.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.aat", "link" : "smile\/math\/CbrtMatrix.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.ata", "link" : "smile\/math\/CbrtMatrix.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.transpose", "link" : "smile\/math\/CbrtMatrix.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/CbrtMatrix.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/CbrtMatrix.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/CbrtMatrix.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/CbrtMatrix.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/CbrtMatrix.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/CbrtMatrix.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.set", "link" : "smile\/math\/CbrtMatrix.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "fill", "tail" : "(arg0: Double): Unit", "member" : "smile.math.matrixExpression2Array.fill", "link" : "smile\/math\/CbrtMatrix.html#fill(x$1:Double):Unit", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.data", "link" : "smile\/math\/CbrtMatrix.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbtmm", "link" : "smile\/math\/CbrtMatrix.html#atbtmm(x$1:B):A", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbmm", "link" : "smile\/math\/CbrtMatrix.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abtmm", "link" : "smile\/math\/CbrtMatrix.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abmm", "link" : "smile\/math\/CbrtMatrix.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.ax", "link" : "smile\/math\/CbrtMatrix.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/CbrtMatrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (CbrtMatrix) => Boolean, msg: => Any): CbrtMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/CbrtMatrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (CbrtMatrix) => Boolean): CbrtMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/CbrtMatrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): CbrtMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/CbrtMatrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): CbrtMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/CbrtMatrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (CbrtMatrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/CbrtMatrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (CbrtMatrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/CbrtMatrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.CbrtMatrix.toMatrix", "link" : "smile\/math\/CbrtMatrix.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.CbrtMatrix.apply", "link" : "smile\/math\/CbrtMatrix.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.CbrtMatrix.ncols", "link" : "smile\/math\/CbrtMatrix.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.CbrtMatrix.nrows", "link" : "smile\/math\/CbrtMatrix.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.CbrtMatrix#<init>", "error" : "unsupported entity"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.CbrtMatrix.A", "link" : "smile\/math\/CbrtMatrix.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/CbrtMatrix.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/CbrtMatrix.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/CbrtMatrix.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/CbrtMatrix.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/CbrtMatrix.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/CbrtMatrix.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/CbrtMatrix.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/CbrtMatrix.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/CbrtMatrix.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/CbrtMatrix.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/CbrtMatrix.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/CbrtMatrix.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/CbrtMatrix.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/CbrtMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/CbrtMatrix.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/CbrtMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/CbrtMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/CbrtMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/CbrtMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/CbrtMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/CbrtMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/CbrtMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/CbrtMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/CbrtMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/CbrtMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/CbrtMatrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/CbrtMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/CbrtMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/CbrtMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/CbrtMatrix.html", "kind" : "case class"}, {"name" : "smile.math.CbrtVector", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.vectorExpression2Array.update", "link" : "smile\/math\/CbrtVector.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/CbrtVector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (CbrtVector) => Boolean, msg: => Any): CbrtVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/CbrtVector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (CbrtVector) => Boolean): CbrtVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/CbrtVector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): CbrtVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/CbrtVector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): CbrtVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/CbrtVector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (CbrtVector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/CbrtVector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (CbrtVector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/CbrtVector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.CbrtVector.toArray", "link" : "smile\/math\/CbrtVector.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.CbrtVector.apply", "link" : "smile\/math\/CbrtVector.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.CbrtVector.length", "link" : "smile\/math\/CbrtVector.html#length:Int", "kind" : "def"}, {"member" : "smile.math.CbrtVector#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.CbrtVector.x", "link" : "smile\/math\/CbrtVector.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/CbrtVector.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/CbrtVector.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/CbrtVector.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/CbrtVector.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/CbrtVector.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/CbrtVector.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/CbrtVector.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/CbrtVector.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/CbrtVector.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/CbrtVector.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/CbrtVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/CbrtVector.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/CbrtVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/CbrtVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/CbrtVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/CbrtVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/CbrtVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/CbrtVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/CbrtVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/CbrtVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/CbrtVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/CbrtVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/CbrtVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/CbrtVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/CbrtVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/CbrtVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/CbrtVector.html", "kind" : "case class"}, {"name" : "smile.math.CeilMatrix", "shortDescription" : "", "members_case class" : [{"label" : "toArray", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.matrixExpression2Array.toArray", "link" : "smile\/math\/CeilMatrix.html#toArray():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.sum", "link" : "smile\/math\/CeilMatrix.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/CeilMatrix.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/CeilMatrix.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/CeilMatrix.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/CeilMatrix.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/CeilMatrix.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/CeilMatrix.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/CeilMatrix.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/CeilMatrix.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/CeilMatrix.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/CeilMatrix.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/CeilMatrix.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/CeilMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/CeilMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/CeilMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/CeilMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/CeilMatrix.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/CeilMatrix.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSds", "link" : "smile\/math\/CeilMatrix.html#colSds():Array[Double]", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colMeans", "link" : "smile\/math\/CeilMatrix.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSums", "link" : "smile\/math\/CeilMatrix.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSds", "link" : "smile\/math\/CeilMatrix.html#rowSds():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowMeans", "link" : "smile\/math\/CeilMatrix.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSums", "link" : "smile\/math\/CeilMatrix.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.matrixExpression2Array.xax", "link" : "smile\/math\/CeilMatrix.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normFro", "link" : "smile\/math\/CeilMatrix.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normInf", "link" : "smile\/math\/CeilMatrix.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm", "link" : "smile\/math\/CeilMatrix.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm2", "link" : "smile\/math\/CeilMatrix.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm1", "link" : "smile\/math\/CeilMatrix.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/CeilMatrix.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/CeilMatrix.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(arg0: Array[Double], arg1: Array[Double]): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/CeilMatrix.html#scale(x$1:Array[Double],x$2:Array[Double]):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/CeilMatrix.html#scale():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/CeilMatrix.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/CeilMatrix.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/CeilMatrix.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/CeilMatrix.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/CeilMatrix.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/CeilMatrix.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "submat", "tail" : "(arg0: Int, arg1: Int, arg2: Int, arg3: Int): DenseMatrix", "member" : "smile.math.matrixExpression2Array.submat", "link" : "smile\/math\/CeilMatrix.html#submat(x$1:Int,x$2:Int,x$3:Int,x$4:Int):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.update", "link" : "smile\/math\/CeilMatrix.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.matrixExpression2Array.ld", "link" : "smile\/math\/CeilMatrix.html#ld():Int", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/CeilMatrix.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/CeilMatrix.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/CeilMatrix.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/CeilMatrix.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/CeilMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/CeilMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atx", "link" : "smile\/math\/CeilMatrix.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/CeilMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/CeilMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.trace", "link" : "smile\/math\/CeilMatrix.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.diag", "link" : "smile\/math\/CeilMatrix.html#diag():Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.matrixExpression2Array.get", "link" : "smile\/math\/CeilMatrix.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/CeilMatrix.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/CeilMatrix.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/CeilMatrix.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/CeilMatrix.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/CeilMatrix.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/CeilMatrix.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.aat", "link" : "smile\/math\/CeilMatrix.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.ata", "link" : "smile\/math\/CeilMatrix.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.transpose", "link" : "smile\/math\/CeilMatrix.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/CeilMatrix.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/CeilMatrix.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/CeilMatrix.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/CeilMatrix.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/CeilMatrix.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/CeilMatrix.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.set", "link" : "smile\/math\/CeilMatrix.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "fill", "tail" : "(arg0: Double): Unit", "member" : "smile.math.matrixExpression2Array.fill", "link" : "smile\/math\/CeilMatrix.html#fill(x$1:Double):Unit", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.data", "link" : "smile\/math\/CeilMatrix.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbtmm", "link" : "smile\/math\/CeilMatrix.html#atbtmm(x$1:B):A", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbmm", "link" : "smile\/math\/CeilMatrix.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abtmm", "link" : "smile\/math\/CeilMatrix.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abmm", "link" : "smile\/math\/CeilMatrix.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.ax", "link" : "smile\/math\/CeilMatrix.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/CeilMatrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (CeilMatrix) => Boolean, msg: => Any): CeilMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/CeilMatrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (CeilMatrix) => Boolean): CeilMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/CeilMatrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): CeilMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/CeilMatrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): CeilMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/CeilMatrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (CeilMatrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/CeilMatrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (CeilMatrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/CeilMatrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.CeilMatrix.toMatrix", "link" : "smile\/math\/CeilMatrix.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.CeilMatrix.apply", "link" : "smile\/math\/CeilMatrix.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.CeilMatrix.ncols", "link" : "smile\/math\/CeilMatrix.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.CeilMatrix.nrows", "link" : "smile\/math\/CeilMatrix.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.CeilMatrix#<init>", "error" : "unsupported entity"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.CeilMatrix.A", "link" : "smile\/math\/CeilMatrix.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/CeilMatrix.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/CeilMatrix.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/CeilMatrix.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/CeilMatrix.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/CeilMatrix.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/CeilMatrix.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/CeilMatrix.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/CeilMatrix.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/CeilMatrix.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/CeilMatrix.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/CeilMatrix.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/CeilMatrix.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/CeilMatrix.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/CeilMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/CeilMatrix.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/CeilMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/CeilMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/CeilMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/CeilMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/CeilMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/CeilMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/CeilMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/CeilMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/CeilMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/CeilMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/CeilMatrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/CeilMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/CeilMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/CeilMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/CeilMatrix.html", "kind" : "case class"}, {"name" : "smile.math.CeilVector", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.vectorExpression2Array.update", "link" : "smile\/math\/CeilVector.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/CeilVector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (CeilVector) => Boolean, msg: => Any): CeilVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/CeilVector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (CeilVector) => Boolean): CeilVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/CeilVector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): CeilVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/CeilVector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): CeilVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/CeilVector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (CeilVector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/CeilVector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (CeilVector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/CeilVector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.CeilVector.toArray", "link" : "smile\/math\/CeilVector.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.CeilVector.apply", "link" : "smile\/math\/CeilVector.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.CeilVector.length", "link" : "smile\/math\/CeilVector.html#length:Int", "kind" : "def"}, {"member" : "smile.math.CeilVector#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.CeilVector.x", "link" : "smile\/math\/CeilVector.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/CeilVector.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/CeilVector.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/CeilVector.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/CeilVector.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/CeilVector.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/CeilVector.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/CeilVector.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/CeilVector.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/CeilVector.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/CeilVector.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/CeilVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/CeilVector.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/CeilVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/CeilVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/CeilVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/CeilVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/CeilVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/CeilVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/CeilVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/CeilVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/CeilVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/CeilVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/CeilVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/CeilVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/CeilVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/CeilVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/CeilVector.html", "kind" : "case class"}, {"name" : "smile.math.Expm1Matrix", "shortDescription" : "", "members_case class" : [{"label" : "toArray", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.matrixExpression2Array.toArray", "link" : "smile\/math\/Expm1Matrix.html#toArray():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.sum", "link" : "smile\/math\/Expm1Matrix.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/Expm1Matrix.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/Expm1Matrix.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/Expm1Matrix.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/Expm1Matrix.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/Expm1Matrix.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/Expm1Matrix.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/Expm1Matrix.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/Expm1Matrix.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/Expm1Matrix.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/Expm1Matrix.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/Expm1Matrix.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/Expm1Matrix.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/Expm1Matrix.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/Expm1Matrix.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/Expm1Matrix.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/Expm1Matrix.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/Expm1Matrix.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSds", "link" : "smile\/math\/Expm1Matrix.html#colSds():Array[Double]", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colMeans", "link" : "smile\/math\/Expm1Matrix.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSums", "link" : "smile\/math\/Expm1Matrix.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSds", "link" : "smile\/math\/Expm1Matrix.html#rowSds():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowMeans", "link" : "smile\/math\/Expm1Matrix.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSums", "link" : "smile\/math\/Expm1Matrix.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.matrixExpression2Array.xax", "link" : "smile\/math\/Expm1Matrix.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normFro", "link" : "smile\/math\/Expm1Matrix.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normInf", "link" : "smile\/math\/Expm1Matrix.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm", "link" : "smile\/math\/Expm1Matrix.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm2", "link" : "smile\/math\/Expm1Matrix.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm1", "link" : "smile\/math\/Expm1Matrix.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/Expm1Matrix.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/Expm1Matrix.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(arg0: Array[Double], arg1: Array[Double]): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/Expm1Matrix.html#scale(x$1:Array[Double],x$2:Array[Double]):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/Expm1Matrix.html#scale():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/Expm1Matrix.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/Expm1Matrix.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/Expm1Matrix.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/Expm1Matrix.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/Expm1Matrix.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/Expm1Matrix.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "submat", "tail" : "(arg0: Int, arg1: Int, arg2: Int, arg3: Int): DenseMatrix", "member" : "smile.math.matrixExpression2Array.submat", "link" : "smile\/math\/Expm1Matrix.html#submat(x$1:Int,x$2:Int,x$3:Int,x$4:Int):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.update", "link" : "smile\/math\/Expm1Matrix.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.matrixExpression2Array.ld", "link" : "smile\/math\/Expm1Matrix.html#ld():Int", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/Expm1Matrix.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/Expm1Matrix.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/Expm1Matrix.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/Expm1Matrix.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/Expm1Matrix.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/Expm1Matrix.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atx", "link" : "smile\/math\/Expm1Matrix.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/Expm1Matrix.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/Expm1Matrix.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.trace", "link" : "smile\/math\/Expm1Matrix.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.diag", "link" : "smile\/math\/Expm1Matrix.html#diag():Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.matrixExpression2Array.get", "link" : "smile\/math\/Expm1Matrix.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/Expm1Matrix.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/Expm1Matrix.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/Expm1Matrix.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/Expm1Matrix.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/Expm1Matrix.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/Expm1Matrix.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.aat", "link" : "smile\/math\/Expm1Matrix.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.ata", "link" : "smile\/math\/Expm1Matrix.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.transpose", "link" : "smile\/math\/Expm1Matrix.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/Expm1Matrix.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/Expm1Matrix.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/Expm1Matrix.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/Expm1Matrix.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/Expm1Matrix.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/Expm1Matrix.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.set", "link" : "smile\/math\/Expm1Matrix.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "fill", "tail" : "(arg0: Double): Unit", "member" : "smile.math.matrixExpression2Array.fill", "link" : "smile\/math\/Expm1Matrix.html#fill(x$1:Double):Unit", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.data", "link" : "smile\/math\/Expm1Matrix.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbtmm", "link" : "smile\/math\/Expm1Matrix.html#atbtmm(x$1:B):A", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbmm", "link" : "smile\/math\/Expm1Matrix.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abtmm", "link" : "smile\/math\/Expm1Matrix.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abmm", "link" : "smile\/math\/Expm1Matrix.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.ax", "link" : "smile\/math\/Expm1Matrix.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/Expm1Matrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Expm1Matrix) => Boolean, msg: => Any): Expm1Matrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Expm1Matrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Expm1Matrix) => Boolean): Expm1Matrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Expm1Matrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Expm1Matrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Expm1Matrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Expm1Matrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Expm1Matrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Expm1Matrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/Expm1Matrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Expm1Matrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/Expm1Matrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.Expm1Matrix.toMatrix", "link" : "smile\/math\/Expm1Matrix.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.Expm1Matrix.apply", "link" : "smile\/math\/Expm1Matrix.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.Expm1Matrix.ncols", "link" : "smile\/math\/Expm1Matrix.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.Expm1Matrix.nrows", "link" : "smile\/math\/Expm1Matrix.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.Expm1Matrix#<init>", "error" : "unsupported entity"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.Expm1Matrix.A", "link" : "smile\/math\/Expm1Matrix.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/Expm1Matrix.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/Expm1Matrix.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/Expm1Matrix.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/Expm1Matrix.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/Expm1Matrix.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/Expm1Matrix.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/Expm1Matrix.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/Expm1Matrix.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/Expm1Matrix.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/Expm1Matrix.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/Expm1Matrix.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/Expm1Matrix.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/Expm1Matrix.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/Expm1Matrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/Expm1Matrix.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/Expm1Matrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/Expm1Matrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/Expm1Matrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/Expm1Matrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/Expm1Matrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Expm1Matrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Expm1Matrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Expm1Matrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/Expm1Matrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/Expm1Matrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/Expm1Matrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/Expm1Matrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/Expm1Matrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/Expm1Matrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/Expm1Matrix.html", "kind" : "case class"}, {"name" : "smile.math.Expm1Vector", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.vectorExpression2Array.update", "link" : "smile\/math\/Expm1Vector.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/Expm1Vector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Expm1Vector) => Boolean, msg: => Any): Expm1Vector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Expm1Vector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Expm1Vector) => Boolean): Expm1Vector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Expm1Vector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Expm1Vector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Expm1Vector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Expm1Vector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Expm1Vector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Expm1Vector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/Expm1Vector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Expm1Vector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/Expm1Vector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.Expm1Vector.toArray", "link" : "smile\/math\/Expm1Vector.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.Expm1Vector.apply", "link" : "smile\/math\/Expm1Vector.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.Expm1Vector.length", "link" : "smile\/math\/Expm1Vector.html#length:Int", "kind" : "def"}, {"member" : "smile.math.Expm1Vector#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.Expm1Vector.x", "link" : "smile\/math\/Expm1Vector.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/Expm1Vector.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/Expm1Vector.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/Expm1Vector.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/Expm1Vector.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/Expm1Vector.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/Expm1Vector.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/Expm1Vector.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/Expm1Vector.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/Expm1Vector.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/Expm1Vector.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/Expm1Vector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/Expm1Vector.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/Expm1Vector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/Expm1Vector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/Expm1Vector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/Expm1Vector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/Expm1Vector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Expm1Vector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Expm1Vector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Expm1Vector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/Expm1Vector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/Expm1Vector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/Expm1Vector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/Expm1Vector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/Expm1Vector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/Expm1Vector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/Expm1Vector.html", "kind" : "case class"}, {"name" : "smile.math.ExpMatrix", "shortDescription" : "", "members_case class" : [{"label" : "toArray", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.matrixExpression2Array.toArray", "link" : "smile\/math\/ExpMatrix.html#toArray():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.sum", "link" : "smile\/math\/ExpMatrix.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/ExpMatrix.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/ExpMatrix.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/ExpMatrix.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/ExpMatrix.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/ExpMatrix.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/ExpMatrix.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/ExpMatrix.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/ExpMatrix.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/ExpMatrix.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/ExpMatrix.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/ExpMatrix.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/ExpMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/ExpMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/ExpMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/ExpMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/ExpMatrix.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/ExpMatrix.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSds", "link" : "smile\/math\/ExpMatrix.html#colSds():Array[Double]", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colMeans", "link" : "smile\/math\/ExpMatrix.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSums", "link" : "smile\/math\/ExpMatrix.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSds", "link" : "smile\/math\/ExpMatrix.html#rowSds():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowMeans", "link" : "smile\/math\/ExpMatrix.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSums", "link" : "smile\/math\/ExpMatrix.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.matrixExpression2Array.xax", "link" : "smile\/math\/ExpMatrix.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normFro", "link" : "smile\/math\/ExpMatrix.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normInf", "link" : "smile\/math\/ExpMatrix.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm", "link" : "smile\/math\/ExpMatrix.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm2", "link" : "smile\/math\/ExpMatrix.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm1", "link" : "smile\/math\/ExpMatrix.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/ExpMatrix.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/ExpMatrix.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(arg0: Array[Double], arg1: Array[Double]): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/ExpMatrix.html#scale(x$1:Array[Double],x$2:Array[Double]):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/ExpMatrix.html#scale():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/ExpMatrix.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/ExpMatrix.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/ExpMatrix.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/ExpMatrix.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/ExpMatrix.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/ExpMatrix.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "submat", "tail" : "(arg0: Int, arg1: Int, arg2: Int, arg3: Int): DenseMatrix", "member" : "smile.math.matrixExpression2Array.submat", "link" : "smile\/math\/ExpMatrix.html#submat(x$1:Int,x$2:Int,x$3:Int,x$4:Int):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.update", "link" : "smile\/math\/ExpMatrix.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.matrixExpression2Array.ld", "link" : "smile\/math\/ExpMatrix.html#ld():Int", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/ExpMatrix.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/ExpMatrix.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/ExpMatrix.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/ExpMatrix.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/ExpMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/ExpMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atx", "link" : "smile\/math\/ExpMatrix.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/ExpMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/ExpMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.trace", "link" : "smile\/math\/ExpMatrix.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.diag", "link" : "smile\/math\/ExpMatrix.html#diag():Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.matrixExpression2Array.get", "link" : "smile\/math\/ExpMatrix.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/ExpMatrix.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/ExpMatrix.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/ExpMatrix.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/ExpMatrix.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/ExpMatrix.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/ExpMatrix.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.aat", "link" : "smile\/math\/ExpMatrix.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.ata", "link" : "smile\/math\/ExpMatrix.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.transpose", "link" : "smile\/math\/ExpMatrix.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/ExpMatrix.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/ExpMatrix.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/ExpMatrix.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/ExpMatrix.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/ExpMatrix.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/ExpMatrix.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.set", "link" : "smile\/math\/ExpMatrix.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "fill", "tail" : "(arg0: Double): Unit", "member" : "smile.math.matrixExpression2Array.fill", "link" : "smile\/math\/ExpMatrix.html#fill(x$1:Double):Unit", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.data", "link" : "smile\/math\/ExpMatrix.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbtmm", "link" : "smile\/math\/ExpMatrix.html#atbtmm(x$1:B):A", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbmm", "link" : "smile\/math\/ExpMatrix.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abtmm", "link" : "smile\/math\/ExpMatrix.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abmm", "link" : "smile\/math\/ExpMatrix.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.ax", "link" : "smile\/math\/ExpMatrix.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/ExpMatrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ExpMatrix) => Boolean, msg: => Any): ExpMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ExpMatrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ExpMatrix) => Boolean): ExpMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ExpMatrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): ExpMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ExpMatrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ExpMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ExpMatrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ExpMatrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/ExpMatrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ExpMatrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/ExpMatrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.ExpMatrix.toMatrix", "link" : "smile\/math\/ExpMatrix.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.ExpMatrix.apply", "link" : "smile\/math\/ExpMatrix.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.ExpMatrix.ncols", "link" : "smile\/math\/ExpMatrix.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.ExpMatrix.nrows", "link" : "smile\/math\/ExpMatrix.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.ExpMatrix#<init>", "error" : "unsupported entity"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.ExpMatrix.A", "link" : "smile\/math\/ExpMatrix.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/ExpMatrix.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/ExpMatrix.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/ExpMatrix.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/ExpMatrix.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/ExpMatrix.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/ExpMatrix.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/ExpMatrix.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/ExpMatrix.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/ExpMatrix.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/ExpMatrix.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/ExpMatrix.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/ExpMatrix.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/ExpMatrix.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/ExpMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/ExpMatrix.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/ExpMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/ExpMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/ExpMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/ExpMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/ExpMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ExpMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ExpMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ExpMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/ExpMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/ExpMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/ExpMatrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/ExpMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/ExpMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/ExpMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/ExpMatrix.html", "kind" : "case class"}, {"name" : "smile.math.ExpVector", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.vectorExpression2Array.update", "link" : "smile\/math\/ExpVector.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/ExpVector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ExpVector) => Boolean, msg: => Any): ExpVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ExpVector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ExpVector) => Boolean): ExpVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ExpVector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): ExpVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ExpVector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ExpVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ExpVector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ExpVector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/ExpVector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ExpVector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/ExpVector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.ExpVector.toArray", "link" : "smile\/math\/ExpVector.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.ExpVector.apply", "link" : "smile\/math\/ExpVector.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.ExpVector.length", "link" : "smile\/math\/ExpVector.html#length:Int", "kind" : "def"}, {"member" : "smile.math.ExpVector#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.ExpVector.x", "link" : "smile\/math\/ExpVector.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/ExpVector.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/ExpVector.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/ExpVector.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/ExpVector.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/ExpVector.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/ExpVector.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/ExpVector.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/ExpVector.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/ExpVector.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/ExpVector.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/ExpVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/ExpVector.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/ExpVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/ExpVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/ExpVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/ExpVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/ExpVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ExpVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ExpVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ExpVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/ExpVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/ExpVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/ExpVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/ExpVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/ExpVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/ExpVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/ExpVector.html", "kind" : "case class"}, {"name" : "smile.math.FloorMatrix", "shortDescription" : "", "members_case class" : [{"label" : "toArray", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.matrixExpression2Array.toArray", "link" : "smile\/math\/FloorMatrix.html#toArray():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.sum", "link" : "smile\/math\/FloorMatrix.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/FloorMatrix.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/FloorMatrix.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/FloorMatrix.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/FloorMatrix.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/FloorMatrix.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/FloorMatrix.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/FloorMatrix.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/FloorMatrix.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/FloorMatrix.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/FloorMatrix.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/FloorMatrix.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/FloorMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/FloorMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/FloorMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/FloorMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/FloorMatrix.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/FloorMatrix.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSds", "link" : "smile\/math\/FloorMatrix.html#colSds():Array[Double]", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colMeans", "link" : "smile\/math\/FloorMatrix.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSums", "link" : "smile\/math\/FloorMatrix.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSds", "link" : "smile\/math\/FloorMatrix.html#rowSds():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowMeans", "link" : "smile\/math\/FloorMatrix.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSums", "link" : "smile\/math\/FloorMatrix.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.matrixExpression2Array.xax", "link" : "smile\/math\/FloorMatrix.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normFro", "link" : "smile\/math\/FloorMatrix.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normInf", "link" : "smile\/math\/FloorMatrix.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm", "link" : "smile\/math\/FloorMatrix.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm2", "link" : "smile\/math\/FloorMatrix.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm1", "link" : "smile\/math\/FloorMatrix.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/FloorMatrix.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/FloorMatrix.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(arg0: Array[Double], arg1: Array[Double]): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/FloorMatrix.html#scale(x$1:Array[Double],x$2:Array[Double]):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/FloorMatrix.html#scale():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/FloorMatrix.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/FloorMatrix.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/FloorMatrix.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/FloorMatrix.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/FloorMatrix.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/FloorMatrix.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "submat", "tail" : "(arg0: Int, arg1: Int, arg2: Int, arg3: Int): DenseMatrix", "member" : "smile.math.matrixExpression2Array.submat", "link" : "smile\/math\/FloorMatrix.html#submat(x$1:Int,x$2:Int,x$3:Int,x$4:Int):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.update", "link" : "smile\/math\/FloorMatrix.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.matrixExpression2Array.ld", "link" : "smile\/math\/FloorMatrix.html#ld():Int", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/FloorMatrix.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/FloorMatrix.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/FloorMatrix.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/FloorMatrix.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/FloorMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/FloorMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atx", "link" : "smile\/math\/FloorMatrix.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/FloorMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/FloorMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.trace", "link" : "smile\/math\/FloorMatrix.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.diag", "link" : "smile\/math\/FloorMatrix.html#diag():Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.matrixExpression2Array.get", "link" : "smile\/math\/FloorMatrix.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/FloorMatrix.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/FloorMatrix.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/FloorMatrix.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/FloorMatrix.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/FloorMatrix.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/FloorMatrix.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.aat", "link" : "smile\/math\/FloorMatrix.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.ata", "link" : "smile\/math\/FloorMatrix.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.transpose", "link" : "smile\/math\/FloorMatrix.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/FloorMatrix.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/FloorMatrix.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/FloorMatrix.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/FloorMatrix.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/FloorMatrix.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/FloorMatrix.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.set", "link" : "smile\/math\/FloorMatrix.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "fill", "tail" : "(arg0: Double): Unit", "member" : "smile.math.matrixExpression2Array.fill", "link" : "smile\/math\/FloorMatrix.html#fill(x$1:Double):Unit", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.data", "link" : "smile\/math\/FloorMatrix.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbtmm", "link" : "smile\/math\/FloorMatrix.html#atbtmm(x$1:B):A", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbmm", "link" : "smile\/math\/FloorMatrix.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abtmm", "link" : "smile\/math\/FloorMatrix.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abmm", "link" : "smile\/math\/FloorMatrix.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.ax", "link" : "smile\/math\/FloorMatrix.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/FloorMatrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (FloorMatrix) => Boolean, msg: => Any): FloorMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/FloorMatrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (FloorMatrix) => Boolean): FloorMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/FloorMatrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): FloorMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/FloorMatrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): FloorMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/FloorMatrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (FloorMatrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/FloorMatrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (FloorMatrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/FloorMatrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.FloorMatrix.toMatrix", "link" : "smile\/math\/FloorMatrix.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.FloorMatrix.apply", "link" : "smile\/math\/FloorMatrix.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.FloorMatrix.ncols", "link" : "smile\/math\/FloorMatrix.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.FloorMatrix.nrows", "link" : "smile\/math\/FloorMatrix.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.FloorMatrix#<init>", "error" : "unsupported entity"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.FloorMatrix.A", "link" : "smile\/math\/FloorMatrix.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/FloorMatrix.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/FloorMatrix.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/FloorMatrix.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/FloorMatrix.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/FloorMatrix.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/FloorMatrix.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/FloorMatrix.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/FloorMatrix.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/FloorMatrix.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/FloorMatrix.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/FloorMatrix.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/FloorMatrix.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/FloorMatrix.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/FloorMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/FloorMatrix.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/FloorMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/FloorMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/FloorMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/FloorMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/FloorMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/FloorMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/FloorMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/FloorMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/FloorMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/FloorMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/FloorMatrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/FloorMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/FloorMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/FloorMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/FloorMatrix.html", "kind" : "case class"}, {"name" : "smile.math.FloorVector", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.vectorExpression2Array.update", "link" : "smile\/math\/FloorVector.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/FloorVector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (FloorVector) => Boolean, msg: => Any): FloorVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/FloorVector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (FloorVector) => Boolean): FloorVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/FloorVector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): FloorVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/FloorVector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): FloorVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/FloorVector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (FloorVector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/FloorVector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (FloorVector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/FloorVector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.FloorVector.toArray", "link" : "smile\/math\/FloorVector.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.FloorVector.apply", "link" : "smile\/math\/FloorVector.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.FloorVector.length", "link" : "smile\/math\/FloorVector.html#length:Int", "kind" : "def"}, {"member" : "smile.math.FloorVector#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.FloorVector.x", "link" : "smile\/math\/FloorVector.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/FloorVector.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/FloorVector.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/FloorVector.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/FloorVector.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/FloorVector.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/FloorVector.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/FloorVector.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/FloorVector.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/FloorVector.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/FloorVector.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/FloorVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/FloorVector.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/FloorVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/FloorVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/FloorVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/FloorVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/FloorVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/FloorVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/FloorVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/FloorVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/FloorVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/FloorVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/FloorVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/FloorVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/FloorVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/FloorVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/FloorVector.html", "kind" : "case class"}, {"name" : "smile.math.Log10Matrix", "shortDescription" : "", "members_case class" : [{"label" : "toArray", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.matrixExpression2Array.toArray", "link" : "smile\/math\/Log10Matrix.html#toArray():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.sum", "link" : "smile\/math\/Log10Matrix.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/Log10Matrix.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/Log10Matrix.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/Log10Matrix.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/Log10Matrix.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/Log10Matrix.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/Log10Matrix.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/Log10Matrix.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/Log10Matrix.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/Log10Matrix.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/Log10Matrix.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/Log10Matrix.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/Log10Matrix.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/Log10Matrix.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/Log10Matrix.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/Log10Matrix.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/Log10Matrix.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/Log10Matrix.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSds", "link" : "smile\/math\/Log10Matrix.html#colSds():Array[Double]", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colMeans", "link" : "smile\/math\/Log10Matrix.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSums", "link" : "smile\/math\/Log10Matrix.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSds", "link" : "smile\/math\/Log10Matrix.html#rowSds():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowMeans", "link" : "smile\/math\/Log10Matrix.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSums", "link" : "smile\/math\/Log10Matrix.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.matrixExpression2Array.xax", "link" : "smile\/math\/Log10Matrix.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normFro", "link" : "smile\/math\/Log10Matrix.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normInf", "link" : "smile\/math\/Log10Matrix.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm", "link" : "smile\/math\/Log10Matrix.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm2", "link" : "smile\/math\/Log10Matrix.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm1", "link" : "smile\/math\/Log10Matrix.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/Log10Matrix.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/Log10Matrix.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(arg0: Array[Double], arg1: Array[Double]): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/Log10Matrix.html#scale(x$1:Array[Double],x$2:Array[Double]):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/Log10Matrix.html#scale():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/Log10Matrix.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/Log10Matrix.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/Log10Matrix.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/Log10Matrix.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/Log10Matrix.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/Log10Matrix.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "submat", "tail" : "(arg0: Int, arg1: Int, arg2: Int, arg3: Int): DenseMatrix", "member" : "smile.math.matrixExpression2Array.submat", "link" : "smile\/math\/Log10Matrix.html#submat(x$1:Int,x$2:Int,x$3:Int,x$4:Int):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.update", "link" : "smile\/math\/Log10Matrix.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.matrixExpression2Array.ld", "link" : "smile\/math\/Log10Matrix.html#ld():Int", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/Log10Matrix.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/Log10Matrix.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/Log10Matrix.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/Log10Matrix.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/Log10Matrix.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/Log10Matrix.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atx", "link" : "smile\/math\/Log10Matrix.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/Log10Matrix.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/Log10Matrix.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.trace", "link" : "smile\/math\/Log10Matrix.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.diag", "link" : "smile\/math\/Log10Matrix.html#diag():Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.matrixExpression2Array.get", "link" : "smile\/math\/Log10Matrix.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/Log10Matrix.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/Log10Matrix.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/Log10Matrix.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/Log10Matrix.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/Log10Matrix.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/Log10Matrix.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.aat", "link" : "smile\/math\/Log10Matrix.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.ata", "link" : "smile\/math\/Log10Matrix.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.transpose", "link" : "smile\/math\/Log10Matrix.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/Log10Matrix.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/Log10Matrix.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/Log10Matrix.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/Log10Matrix.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/Log10Matrix.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/Log10Matrix.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.set", "link" : "smile\/math\/Log10Matrix.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "fill", "tail" : "(arg0: Double): Unit", "member" : "smile.math.matrixExpression2Array.fill", "link" : "smile\/math\/Log10Matrix.html#fill(x$1:Double):Unit", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.data", "link" : "smile\/math\/Log10Matrix.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbtmm", "link" : "smile\/math\/Log10Matrix.html#atbtmm(x$1:B):A", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbmm", "link" : "smile\/math\/Log10Matrix.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abtmm", "link" : "smile\/math\/Log10Matrix.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abmm", "link" : "smile\/math\/Log10Matrix.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.ax", "link" : "smile\/math\/Log10Matrix.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/Log10Matrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Log10Matrix) => Boolean, msg: => Any): Log10Matrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Log10Matrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Log10Matrix) => Boolean): Log10Matrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Log10Matrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Log10Matrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Log10Matrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Log10Matrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Log10Matrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Log10Matrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/Log10Matrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Log10Matrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/Log10Matrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.Log10Matrix.toMatrix", "link" : "smile\/math\/Log10Matrix.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.Log10Matrix.apply", "link" : "smile\/math\/Log10Matrix.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.Log10Matrix.ncols", "link" : "smile\/math\/Log10Matrix.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.Log10Matrix.nrows", "link" : "smile\/math\/Log10Matrix.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.Log10Matrix#<init>", "error" : "unsupported entity"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.Log10Matrix.A", "link" : "smile\/math\/Log10Matrix.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/Log10Matrix.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/Log10Matrix.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/Log10Matrix.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/Log10Matrix.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/Log10Matrix.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/Log10Matrix.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/Log10Matrix.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/Log10Matrix.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/Log10Matrix.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/Log10Matrix.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/Log10Matrix.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/Log10Matrix.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/Log10Matrix.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/Log10Matrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/Log10Matrix.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/Log10Matrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/Log10Matrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/Log10Matrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/Log10Matrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/Log10Matrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Log10Matrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Log10Matrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Log10Matrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/Log10Matrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/Log10Matrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/Log10Matrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/Log10Matrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/Log10Matrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/Log10Matrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/Log10Matrix.html", "kind" : "case class"}, {"name" : "smile.math.Log10Vector", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.vectorExpression2Array.update", "link" : "smile\/math\/Log10Vector.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/Log10Vector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Log10Vector) => Boolean, msg: => Any): Log10Vector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Log10Vector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Log10Vector) => Boolean): Log10Vector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Log10Vector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Log10Vector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Log10Vector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Log10Vector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Log10Vector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Log10Vector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/Log10Vector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Log10Vector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/Log10Vector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.Log10Vector.toArray", "link" : "smile\/math\/Log10Vector.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.Log10Vector.apply", "link" : "smile\/math\/Log10Vector.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.Log10Vector.length", "link" : "smile\/math\/Log10Vector.html#length:Int", "kind" : "def"}, {"member" : "smile.math.Log10Vector#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.Log10Vector.x", "link" : "smile\/math\/Log10Vector.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/Log10Vector.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/Log10Vector.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/Log10Vector.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/Log10Vector.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/Log10Vector.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/Log10Vector.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/Log10Vector.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/Log10Vector.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/Log10Vector.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/Log10Vector.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/Log10Vector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/Log10Vector.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/Log10Vector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/Log10Vector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/Log10Vector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/Log10Vector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/Log10Vector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Log10Vector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Log10Vector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Log10Vector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/Log10Vector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/Log10Vector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/Log10Vector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/Log10Vector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/Log10Vector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/Log10Vector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/Log10Vector.html", "kind" : "case class"}, {"name" : "smile.math.Log1pMatrix", "shortDescription" : "", "members_case class" : [{"label" : "toArray", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.matrixExpression2Array.toArray", "link" : "smile\/math\/Log1pMatrix.html#toArray():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.sum", "link" : "smile\/math\/Log1pMatrix.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/Log1pMatrix.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/Log1pMatrix.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/Log1pMatrix.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/Log1pMatrix.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/Log1pMatrix.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/Log1pMatrix.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/Log1pMatrix.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/Log1pMatrix.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/Log1pMatrix.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/Log1pMatrix.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/Log1pMatrix.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/Log1pMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/Log1pMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/Log1pMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/Log1pMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/Log1pMatrix.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/Log1pMatrix.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSds", "link" : "smile\/math\/Log1pMatrix.html#colSds():Array[Double]", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colMeans", "link" : "smile\/math\/Log1pMatrix.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSums", "link" : "smile\/math\/Log1pMatrix.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSds", "link" : "smile\/math\/Log1pMatrix.html#rowSds():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowMeans", "link" : "smile\/math\/Log1pMatrix.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSums", "link" : "smile\/math\/Log1pMatrix.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.matrixExpression2Array.xax", "link" : "smile\/math\/Log1pMatrix.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normFro", "link" : "smile\/math\/Log1pMatrix.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normInf", "link" : "smile\/math\/Log1pMatrix.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm", "link" : "smile\/math\/Log1pMatrix.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm2", "link" : "smile\/math\/Log1pMatrix.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm1", "link" : "smile\/math\/Log1pMatrix.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/Log1pMatrix.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/Log1pMatrix.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(arg0: Array[Double], arg1: Array[Double]): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/Log1pMatrix.html#scale(x$1:Array[Double],x$2:Array[Double]):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/Log1pMatrix.html#scale():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/Log1pMatrix.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/Log1pMatrix.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/Log1pMatrix.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/Log1pMatrix.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/Log1pMatrix.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/Log1pMatrix.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "submat", "tail" : "(arg0: Int, arg1: Int, arg2: Int, arg3: Int): DenseMatrix", "member" : "smile.math.matrixExpression2Array.submat", "link" : "smile\/math\/Log1pMatrix.html#submat(x$1:Int,x$2:Int,x$3:Int,x$4:Int):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.update", "link" : "smile\/math\/Log1pMatrix.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.matrixExpression2Array.ld", "link" : "smile\/math\/Log1pMatrix.html#ld():Int", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/Log1pMatrix.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/Log1pMatrix.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/Log1pMatrix.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/Log1pMatrix.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/Log1pMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/Log1pMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atx", "link" : "smile\/math\/Log1pMatrix.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/Log1pMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/Log1pMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.trace", "link" : "smile\/math\/Log1pMatrix.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.diag", "link" : "smile\/math\/Log1pMatrix.html#diag():Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.matrixExpression2Array.get", "link" : "smile\/math\/Log1pMatrix.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/Log1pMatrix.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/Log1pMatrix.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/Log1pMatrix.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/Log1pMatrix.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/Log1pMatrix.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/Log1pMatrix.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.aat", "link" : "smile\/math\/Log1pMatrix.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.ata", "link" : "smile\/math\/Log1pMatrix.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.transpose", "link" : "smile\/math\/Log1pMatrix.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/Log1pMatrix.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/Log1pMatrix.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/Log1pMatrix.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/Log1pMatrix.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/Log1pMatrix.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/Log1pMatrix.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.set", "link" : "smile\/math\/Log1pMatrix.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "fill", "tail" : "(arg0: Double): Unit", "member" : "smile.math.matrixExpression2Array.fill", "link" : "smile\/math\/Log1pMatrix.html#fill(x$1:Double):Unit", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.data", "link" : "smile\/math\/Log1pMatrix.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbtmm", "link" : "smile\/math\/Log1pMatrix.html#atbtmm(x$1:B):A", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbmm", "link" : "smile\/math\/Log1pMatrix.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abtmm", "link" : "smile\/math\/Log1pMatrix.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abmm", "link" : "smile\/math\/Log1pMatrix.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.ax", "link" : "smile\/math\/Log1pMatrix.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/Log1pMatrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Log1pMatrix) => Boolean, msg: => Any): Log1pMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Log1pMatrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Log1pMatrix) => Boolean): Log1pMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Log1pMatrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Log1pMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Log1pMatrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Log1pMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Log1pMatrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Log1pMatrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/Log1pMatrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Log1pMatrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/Log1pMatrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.Log1pMatrix.toMatrix", "link" : "smile\/math\/Log1pMatrix.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.Log1pMatrix.apply", "link" : "smile\/math\/Log1pMatrix.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.Log1pMatrix.ncols", "link" : "smile\/math\/Log1pMatrix.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.Log1pMatrix.nrows", "link" : "smile\/math\/Log1pMatrix.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.Log1pMatrix#<init>", "error" : "unsupported entity"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.Log1pMatrix.A", "link" : "smile\/math\/Log1pMatrix.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/Log1pMatrix.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/Log1pMatrix.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/Log1pMatrix.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/Log1pMatrix.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/Log1pMatrix.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/Log1pMatrix.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/Log1pMatrix.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/Log1pMatrix.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/Log1pMatrix.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/Log1pMatrix.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/Log1pMatrix.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/Log1pMatrix.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/Log1pMatrix.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/Log1pMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/Log1pMatrix.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/Log1pMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/Log1pMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/Log1pMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/Log1pMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/Log1pMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Log1pMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Log1pMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Log1pMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/Log1pMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/Log1pMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/Log1pMatrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/Log1pMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/Log1pMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/Log1pMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/Log1pMatrix.html", "kind" : "case class"}, {"name" : "smile.math.Log1pVector", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.vectorExpression2Array.update", "link" : "smile\/math\/Log1pVector.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/Log1pVector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Log1pVector) => Boolean, msg: => Any): Log1pVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Log1pVector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Log1pVector) => Boolean): Log1pVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Log1pVector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Log1pVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Log1pVector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Log1pVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Log1pVector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Log1pVector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/Log1pVector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Log1pVector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/Log1pVector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.Log1pVector.toArray", "link" : "smile\/math\/Log1pVector.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.Log1pVector.apply", "link" : "smile\/math\/Log1pVector.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.Log1pVector.length", "link" : "smile\/math\/Log1pVector.html#length:Int", "kind" : "def"}, {"member" : "smile.math.Log1pVector#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.Log1pVector.x", "link" : "smile\/math\/Log1pVector.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/Log1pVector.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/Log1pVector.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/Log1pVector.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/Log1pVector.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/Log1pVector.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/Log1pVector.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/Log1pVector.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/Log1pVector.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/Log1pVector.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/Log1pVector.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/Log1pVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/Log1pVector.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/Log1pVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/Log1pVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/Log1pVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/Log1pVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/Log1pVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Log1pVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Log1pVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Log1pVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/Log1pVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/Log1pVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/Log1pVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/Log1pVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/Log1pVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/Log1pVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/Log1pVector.html", "kind" : "case class"}, {"name" : "smile.math.Log2Matrix", "shortDescription" : "", "members_case class" : [{"label" : "toArray", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.matrixExpression2Array.toArray", "link" : "smile\/math\/Log2Matrix.html#toArray():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.sum", "link" : "smile\/math\/Log2Matrix.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/Log2Matrix.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/Log2Matrix.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/Log2Matrix.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/Log2Matrix.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/Log2Matrix.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/Log2Matrix.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/Log2Matrix.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/Log2Matrix.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/Log2Matrix.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/Log2Matrix.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/Log2Matrix.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/Log2Matrix.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/Log2Matrix.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/Log2Matrix.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/Log2Matrix.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/Log2Matrix.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/Log2Matrix.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSds", "link" : "smile\/math\/Log2Matrix.html#colSds():Array[Double]", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colMeans", "link" : "smile\/math\/Log2Matrix.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSums", "link" : "smile\/math\/Log2Matrix.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSds", "link" : "smile\/math\/Log2Matrix.html#rowSds():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowMeans", "link" : "smile\/math\/Log2Matrix.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSums", "link" : "smile\/math\/Log2Matrix.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.matrixExpression2Array.xax", "link" : "smile\/math\/Log2Matrix.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normFro", "link" : "smile\/math\/Log2Matrix.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normInf", "link" : "smile\/math\/Log2Matrix.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm", "link" : "smile\/math\/Log2Matrix.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm2", "link" : "smile\/math\/Log2Matrix.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm1", "link" : "smile\/math\/Log2Matrix.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/Log2Matrix.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/Log2Matrix.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(arg0: Array[Double], arg1: Array[Double]): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/Log2Matrix.html#scale(x$1:Array[Double],x$2:Array[Double]):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/Log2Matrix.html#scale():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/Log2Matrix.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/Log2Matrix.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/Log2Matrix.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/Log2Matrix.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/Log2Matrix.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/Log2Matrix.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "submat", "tail" : "(arg0: Int, arg1: Int, arg2: Int, arg3: Int): DenseMatrix", "member" : "smile.math.matrixExpression2Array.submat", "link" : "smile\/math\/Log2Matrix.html#submat(x$1:Int,x$2:Int,x$3:Int,x$4:Int):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.update", "link" : "smile\/math\/Log2Matrix.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.matrixExpression2Array.ld", "link" : "smile\/math\/Log2Matrix.html#ld():Int", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/Log2Matrix.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/Log2Matrix.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/Log2Matrix.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/Log2Matrix.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/Log2Matrix.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/Log2Matrix.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atx", "link" : "smile\/math\/Log2Matrix.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/Log2Matrix.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/Log2Matrix.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.trace", "link" : "smile\/math\/Log2Matrix.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.diag", "link" : "smile\/math\/Log2Matrix.html#diag():Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.matrixExpression2Array.get", "link" : "smile\/math\/Log2Matrix.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/Log2Matrix.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/Log2Matrix.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/Log2Matrix.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/Log2Matrix.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/Log2Matrix.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/Log2Matrix.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.aat", "link" : "smile\/math\/Log2Matrix.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.ata", "link" : "smile\/math\/Log2Matrix.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.transpose", "link" : "smile\/math\/Log2Matrix.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/Log2Matrix.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/Log2Matrix.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/Log2Matrix.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/Log2Matrix.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/Log2Matrix.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/Log2Matrix.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.set", "link" : "smile\/math\/Log2Matrix.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "fill", "tail" : "(arg0: Double): Unit", "member" : "smile.math.matrixExpression2Array.fill", "link" : "smile\/math\/Log2Matrix.html#fill(x$1:Double):Unit", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.data", "link" : "smile\/math\/Log2Matrix.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbtmm", "link" : "smile\/math\/Log2Matrix.html#atbtmm(x$1:B):A", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbmm", "link" : "smile\/math\/Log2Matrix.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abtmm", "link" : "smile\/math\/Log2Matrix.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abmm", "link" : "smile\/math\/Log2Matrix.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.ax", "link" : "smile\/math\/Log2Matrix.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/Log2Matrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Log2Matrix) => Boolean, msg: => Any): Log2Matrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Log2Matrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Log2Matrix) => Boolean): Log2Matrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Log2Matrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Log2Matrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Log2Matrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Log2Matrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Log2Matrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Log2Matrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/Log2Matrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Log2Matrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/Log2Matrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.Log2Matrix.toMatrix", "link" : "smile\/math\/Log2Matrix.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.Log2Matrix.apply", "link" : "smile\/math\/Log2Matrix.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.Log2Matrix.ncols", "link" : "smile\/math\/Log2Matrix.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.Log2Matrix.nrows", "link" : "smile\/math\/Log2Matrix.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.Log2Matrix#<init>", "error" : "unsupported entity"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.Log2Matrix.A", "link" : "smile\/math\/Log2Matrix.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/Log2Matrix.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/Log2Matrix.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/Log2Matrix.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/Log2Matrix.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/Log2Matrix.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/Log2Matrix.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/Log2Matrix.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/Log2Matrix.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/Log2Matrix.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/Log2Matrix.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/Log2Matrix.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/Log2Matrix.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/Log2Matrix.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/Log2Matrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/Log2Matrix.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/Log2Matrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/Log2Matrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/Log2Matrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/Log2Matrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/Log2Matrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Log2Matrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Log2Matrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Log2Matrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/Log2Matrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/Log2Matrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/Log2Matrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/Log2Matrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/Log2Matrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/Log2Matrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/Log2Matrix.html", "kind" : "case class"}, {"name" : "smile.math.Log2Vector", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.vectorExpression2Array.update", "link" : "smile\/math\/Log2Vector.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/Log2Vector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Log2Vector) => Boolean, msg: => Any): Log2Vector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Log2Vector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Log2Vector) => Boolean): Log2Vector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Log2Vector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Log2Vector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Log2Vector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Log2Vector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/Log2Vector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Log2Vector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/Log2Vector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Log2Vector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/Log2Vector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.Log2Vector.toArray", "link" : "smile\/math\/Log2Vector.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.Log2Vector.apply", "link" : "smile\/math\/Log2Vector.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.Log2Vector.length", "link" : "smile\/math\/Log2Vector.html#length:Int", "kind" : "def"}, {"member" : "smile.math.Log2Vector#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.Log2Vector.x", "link" : "smile\/math\/Log2Vector.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/Log2Vector.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/Log2Vector.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/Log2Vector.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/Log2Vector.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/Log2Vector.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/Log2Vector.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/Log2Vector.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/Log2Vector.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/Log2Vector.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/Log2Vector.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/Log2Vector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/Log2Vector.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/Log2Vector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/Log2Vector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/Log2Vector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/Log2Vector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/Log2Vector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Log2Vector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Log2Vector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/Log2Vector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/Log2Vector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/Log2Vector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/Log2Vector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/Log2Vector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/Log2Vector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/Log2Vector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/Log2Vector.html", "kind" : "case class"}, {"name" : "smile.math.LogMatrix", "shortDescription" : "", "members_case class" : [{"label" : "toArray", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.matrixExpression2Array.toArray", "link" : "smile\/math\/LogMatrix.html#toArray():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.sum", "link" : "smile\/math\/LogMatrix.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/LogMatrix.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/LogMatrix.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/LogMatrix.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/LogMatrix.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/LogMatrix.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/LogMatrix.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/LogMatrix.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/LogMatrix.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/LogMatrix.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/LogMatrix.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/LogMatrix.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/LogMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/LogMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/LogMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/LogMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/LogMatrix.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/LogMatrix.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSds", "link" : "smile\/math\/LogMatrix.html#colSds():Array[Double]", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colMeans", "link" : "smile\/math\/LogMatrix.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSums", "link" : "smile\/math\/LogMatrix.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSds", "link" : "smile\/math\/LogMatrix.html#rowSds():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowMeans", "link" : "smile\/math\/LogMatrix.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSums", "link" : "smile\/math\/LogMatrix.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.matrixExpression2Array.xax", "link" : "smile\/math\/LogMatrix.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normFro", "link" : "smile\/math\/LogMatrix.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normInf", "link" : "smile\/math\/LogMatrix.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm", "link" : "smile\/math\/LogMatrix.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm2", "link" : "smile\/math\/LogMatrix.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm1", "link" : "smile\/math\/LogMatrix.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/LogMatrix.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/LogMatrix.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(arg0: Array[Double], arg1: Array[Double]): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/LogMatrix.html#scale(x$1:Array[Double],x$2:Array[Double]):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/LogMatrix.html#scale():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/LogMatrix.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/LogMatrix.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/LogMatrix.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/LogMatrix.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/LogMatrix.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/LogMatrix.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "submat", "tail" : "(arg0: Int, arg1: Int, arg2: Int, arg3: Int): DenseMatrix", "member" : "smile.math.matrixExpression2Array.submat", "link" : "smile\/math\/LogMatrix.html#submat(x$1:Int,x$2:Int,x$3:Int,x$4:Int):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.update", "link" : "smile\/math\/LogMatrix.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.matrixExpression2Array.ld", "link" : "smile\/math\/LogMatrix.html#ld():Int", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/LogMatrix.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/LogMatrix.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/LogMatrix.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/LogMatrix.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/LogMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/LogMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atx", "link" : "smile\/math\/LogMatrix.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/LogMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/LogMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.trace", "link" : "smile\/math\/LogMatrix.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.diag", "link" : "smile\/math\/LogMatrix.html#diag():Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.matrixExpression2Array.get", "link" : "smile\/math\/LogMatrix.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/LogMatrix.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/LogMatrix.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/LogMatrix.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/LogMatrix.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/LogMatrix.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/LogMatrix.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.aat", "link" : "smile\/math\/LogMatrix.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.ata", "link" : "smile\/math\/LogMatrix.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.transpose", "link" : "smile\/math\/LogMatrix.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/LogMatrix.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/LogMatrix.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/LogMatrix.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/LogMatrix.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/LogMatrix.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/LogMatrix.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.set", "link" : "smile\/math\/LogMatrix.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "fill", "tail" : "(arg0: Double): Unit", "member" : "smile.math.matrixExpression2Array.fill", "link" : "smile\/math\/LogMatrix.html#fill(x$1:Double):Unit", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.data", "link" : "smile\/math\/LogMatrix.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbtmm", "link" : "smile\/math\/LogMatrix.html#atbtmm(x$1:B):A", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbmm", "link" : "smile\/math\/LogMatrix.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abtmm", "link" : "smile\/math\/LogMatrix.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abmm", "link" : "smile\/math\/LogMatrix.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.ax", "link" : "smile\/math\/LogMatrix.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/LogMatrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (LogMatrix) => Boolean, msg: => Any): LogMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/LogMatrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (LogMatrix) => Boolean): LogMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/LogMatrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): LogMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/LogMatrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): LogMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/LogMatrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (LogMatrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/LogMatrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (LogMatrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/LogMatrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.LogMatrix.toMatrix", "link" : "smile\/math\/LogMatrix.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.LogMatrix.apply", "link" : "smile\/math\/LogMatrix.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.LogMatrix.ncols", "link" : "smile\/math\/LogMatrix.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.LogMatrix.nrows", "link" : "smile\/math\/LogMatrix.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.LogMatrix#<init>", "error" : "unsupported entity"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.LogMatrix.A", "link" : "smile\/math\/LogMatrix.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/LogMatrix.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/LogMatrix.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/LogMatrix.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/LogMatrix.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/LogMatrix.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/LogMatrix.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/LogMatrix.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/LogMatrix.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/LogMatrix.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/LogMatrix.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/LogMatrix.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/LogMatrix.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/LogMatrix.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/LogMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/LogMatrix.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/LogMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/LogMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/LogMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/LogMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/LogMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/LogMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/LogMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/LogMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/LogMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/LogMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/LogMatrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/LogMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/LogMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/LogMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/LogMatrix.html", "kind" : "case class"}, {"name" : "smile.math.LogVector", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.vectorExpression2Array.update", "link" : "smile\/math\/LogVector.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/LogVector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (LogVector) => Boolean, msg: => Any): LogVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/LogVector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (LogVector) => Boolean): LogVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/LogVector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): LogVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/LogVector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): LogVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/LogVector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (LogVector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/LogVector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (LogVector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/LogVector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.LogVector.toArray", "link" : "smile\/math\/LogVector.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.LogVector.apply", "link" : "smile\/math\/LogVector.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.LogVector.length", "link" : "smile\/math\/LogVector.html#length:Int", "kind" : "def"}, {"member" : "smile.math.LogVector#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.LogVector.x", "link" : "smile\/math\/LogVector.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/LogVector.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/LogVector.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/LogVector.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/LogVector.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/LogVector.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/LogVector.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/LogVector.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/LogVector.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/LogVector.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/LogVector.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/LogVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/LogVector.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/LogVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/LogVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/LogVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/LogVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/LogVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/LogVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/LogVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/LogVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/LogVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/LogVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/LogVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/LogVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/LogVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/LogVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/LogVector.html", "kind" : "case class"}, {"name" : "smile.math.MatrixAddMatrix", "shortDescription" : "", "members_case class" : [{"label" : "toArray", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.matrixExpression2Array.toArray", "link" : "smile\/math\/MatrixAddMatrix.html#toArray():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.sum", "link" : "smile\/math\/MatrixAddMatrix.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/MatrixAddMatrix.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixAddMatrix.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixAddMatrix.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixAddMatrix.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixAddMatrix.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixAddMatrix.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixAddMatrix.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixAddMatrix.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixAddMatrix.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixAddMatrix.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixAddMatrix.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixAddMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixAddMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixAddMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixAddMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixAddMatrix.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixAddMatrix.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSds", "link" : "smile\/math\/MatrixAddMatrix.html#colSds():Array[Double]", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colMeans", "link" : "smile\/math\/MatrixAddMatrix.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSums", "link" : "smile\/math\/MatrixAddMatrix.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSds", "link" : "smile\/math\/MatrixAddMatrix.html#rowSds():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowMeans", "link" : "smile\/math\/MatrixAddMatrix.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSums", "link" : "smile\/math\/MatrixAddMatrix.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.matrixExpression2Array.xax", "link" : "smile\/math\/MatrixAddMatrix.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normFro", "link" : "smile\/math\/MatrixAddMatrix.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normInf", "link" : "smile\/math\/MatrixAddMatrix.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm", "link" : "smile\/math\/MatrixAddMatrix.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm2", "link" : "smile\/math\/MatrixAddMatrix.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm1", "link" : "smile\/math\/MatrixAddMatrix.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/MatrixAddMatrix.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/MatrixAddMatrix.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(arg0: Array[Double], arg1: Array[Double]): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/MatrixAddMatrix.html#scale(x$1:Array[Double],x$2:Array[Double]):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/MatrixAddMatrix.html#scale():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/MatrixAddMatrix.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixAddMatrix.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixAddMatrix.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/MatrixAddMatrix.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/MatrixAddMatrix.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/MatrixAddMatrix.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "submat", "tail" : "(arg0: Int, arg1: Int, arg2: Int, arg3: Int): DenseMatrix", "member" : "smile.math.matrixExpression2Array.submat", "link" : "smile\/math\/MatrixAddMatrix.html#submat(x$1:Int,x$2:Int,x$3:Int,x$4:Int):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.update", "link" : "smile\/math\/MatrixAddMatrix.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.matrixExpression2Array.ld", "link" : "smile\/math\/MatrixAddMatrix.html#ld():Int", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixAddMatrix.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixAddMatrix.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixAddMatrix.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixAddMatrix.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/MatrixAddMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/MatrixAddMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atx", "link" : "smile\/math\/MatrixAddMatrix.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/MatrixAddMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/MatrixAddMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.trace", "link" : "smile\/math\/MatrixAddMatrix.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.diag", "link" : "smile\/math\/MatrixAddMatrix.html#diag():Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.matrixExpression2Array.get", "link" : "smile\/math\/MatrixAddMatrix.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/MatrixAddMatrix.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/MatrixAddMatrix.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixAddMatrix.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixAddMatrix.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixAddMatrix.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixAddMatrix.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.aat", "link" : "smile\/math\/MatrixAddMatrix.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.ata", "link" : "smile\/math\/MatrixAddMatrix.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.transpose", "link" : "smile\/math\/MatrixAddMatrix.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/MatrixAddMatrix.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixAddMatrix.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixAddMatrix.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/MatrixAddMatrix.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/MatrixAddMatrix.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/MatrixAddMatrix.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.set", "link" : "smile\/math\/MatrixAddMatrix.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "fill", "tail" : "(arg0: Double): Unit", "member" : "smile.math.matrixExpression2Array.fill", "link" : "smile\/math\/MatrixAddMatrix.html#fill(x$1:Double):Unit", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.data", "link" : "smile\/math\/MatrixAddMatrix.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbtmm", "link" : "smile\/math\/MatrixAddMatrix.html#atbtmm(x$1:B):A", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbmm", "link" : "smile\/math\/MatrixAddMatrix.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abtmm", "link" : "smile\/math\/MatrixAddMatrix.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abmm", "link" : "smile\/math\/MatrixAddMatrix.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.ax", "link" : "smile\/math\/MatrixAddMatrix.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/MatrixAddMatrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixAddMatrix) => Boolean, msg: => Any): MatrixAddMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixAddMatrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixAddMatrix) => Boolean): MatrixAddMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixAddMatrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): MatrixAddMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixAddMatrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): MatrixAddMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixAddMatrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (MatrixAddMatrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/MatrixAddMatrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (MatrixAddMatrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/MatrixAddMatrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.MatrixAddMatrix.toMatrix", "link" : "smile\/math\/MatrixAddMatrix.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.MatrixAddMatrix.apply", "link" : "smile\/math\/MatrixAddMatrix.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.MatrixAddMatrix.ncols", "link" : "smile\/math\/MatrixAddMatrix.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.MatrixAddMatrix.nrows", "link" : "smile\/math\/MatrixAddMatrix.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.MatrixAddMatrix#<init>", "error" : "unsupported entity"}, {"label" : "B", "tail" : ": MatrixExpression", "member" : "smile.math.MatrixAddMatrix.B", "link" : "smile\/math\/MatrixAddMatrix.html#B:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.MatrixAddMatrix.A", "link" : "smile\/math\/MatrixAddMatrix.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/MatrixAddMatrix.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/MatrixAddMatrix.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixAddMatrix.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/MatrixAddMatrix.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/MatrixAddMatrix.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/MatrixAddMatrix.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixAddMatrix.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/MatrixAddMatrix.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/MatrixAddMatrix.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixAddMatrix.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/MatrixAddMatrix.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/MatrixAddMatrix.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/MatrixAddMatrix.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/MatrixAddMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/MatrixAddMatrix.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/MatrixAddMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/MatrixAddMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/MatrixAddMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/MatrixAddMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/MatrixAddMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixAddMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixAddMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixAddMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/MatrixAddMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/MatrixAddMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/MatrixAddMatrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/MatrixAddMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/MatrixAddMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/MatrixAddMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/MatrixAddMatrix.html", "kind" : "case class"}, {"name" : "smile.math.MatrixAddValue", "shortDescription" : "", "members_case class" : [{"label" : "toArray", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.matrixExpression2Array.toArray", "link" : "smile\/math\/MatrixAddValue.html#toArray():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.sum", "link" : "smile\/math\/MatrixAddValue.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/MatrixAddValue.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixAddValue.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixAddValue.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixAddValue.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixAddValue.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixAddValue.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixAddValue.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixAddValue.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixAddValue.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixAddValue.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixAddValue.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixAddValue.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixAddValue.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixAddValue.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixAddValue.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixAddValue.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixAddValue.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSds", "link" : "smile\/math\/MatrixAddValue.html#colSds():Array[Double]", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colMeans", "link" : "smile\/math\/MatrixAddValue.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSums", "link" : "smile\/math\/MatrixAddValue.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSds", "link" : "smile\/math\/MatrixAddValue.html#rowSds():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowMeans", "link" : "smile\/math\/MatrixAddValue.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSums", "link" : "smile\/math\/MatrixAddValue.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.matrixExpression2Array.xax", "link" : "smile\/math\/MatrixAddValue.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normFro", "link" : "smile\/math\/MatrixAddValue.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normInf", "link" : "smile\/math\/MatrixAddValue.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm", "link" : "smile\/math\/MatrixAddValue.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm2", "link" : "smile\/math\/MatrixAddValue.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm1", "link" : "smile\/math\/MatrixAddValue.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/MatrixAddValue.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/MatrixAddValue.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(arg0: Array[Double], arg1: Array[Double]): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/MatrixAddValue.html#scale(x$1:Array[Double],x$2:Array[Double]):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/MatrixAddValue.html#scale():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/MatrixAddValue.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixAddValue.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixAddValue.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/MatrixAddValue.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/MatrixAddValue.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/MatrixAddValue.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "submat", "tail" : "(arg0: Int, arg1: Int, arg2: Int, arg3: Int): DenseMatrix", "member" : "smile.math.matrixExpression2Array.submat", "link" : "smile\/math\/MatrixAddValue.html#submat(x$1:Int,x$2:Int,x$3:Int,x$4:Int):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.update", "link" : "smile\/math\/MatrixAddValue.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.matrixExpression2Array.ld", "link" : "smile\/math\/MatrixAddValue.html#ld():Int", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixAddValue.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixAddValue.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixAddValue.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixAddValue.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/MatrixAddValue.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/MatrixAddValue.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atx", "link" : "smile\/math\/MatrixAddValue.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/MatrixAddValue.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/MatrixAddValue.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.trace", "link" : "smile\/math\/MatrixAddValue.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.diag", "link" : "smile\/math\/MatrixAddValue.html#diag():Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.matrixExpression2Array.get", "link" : "smile\/math\/MatrixAddValue.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/MatrixAddValue.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/MatrixAddValue.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixAddValue.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixAddValue.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixAddValue.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixAddValue.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.aat", "link" : "smile\/math\/MatrixAddValue.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.ata", "link" : "smile\/math\/MatrixAddValue.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.transpose", "link" : "smile\/math\/MatrixAddValue.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/MatrixAddValue.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixAddValue.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixAddValue.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/MatrixAddValue.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/MatrixAddValue.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/MatrixAddValue.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.set", "link" : "smile\/math\/MatrixAddValue.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "fill", "tail" : "(arg0: Double): Unit", "member" : "smile.math.matrixExpression2Array.fill", "link" : "smile\/math\/MatrixAddValue.html#fill(x$1:Double):Unit", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.data", "link" : "smile\/math\/MatrixAddValue.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbtmm", "link" : "smile\/math\/MatrixAddValue.html#atbtmm(x$1:B):A", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbmm", "link" : "smile\/math\/MatrixAddValue.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abtmm", "link" : "smile\/math\/MatrixAddValue.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abmm", "link" : "smile\/math\/MatrixAddValue.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.ax", "link" : "smile\/math\/MatrixAddValue.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/MatrixAddValue.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixAddValue) => Boolean, msg: => Any): MatrixAddValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixAddValue.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixAddValue) => Boolean): MatrixAddValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixAddValue.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): MatrixAddValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixAddValue.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): MatrixAddValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixAddValue.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (MatrixAddValue, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/MatrixAddValue.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (MatrixAddValue, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/MatrixAddValue.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.MatrixAddValue.toMatrix", "link" : "smile\/math\/MatrixAddValue.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.MatrixAddValue.apply", "link" : "smile\/math\/MatrixAddValue.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.MatrixAddValue.ncols", "link" : "smile\/math\/MatrixAddValue.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.MatrixAddValue.nrows", "link" : "smile\/math\/MatrixAddValue.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.MatrixAddValue#<init>", "error" : "unsupported entity"}, {"label" : "y", "tail" : ": Double", "member" : "smile.math.MatrixAddValue.y", "link" : "smile\/math\/MatrixAddValue.html#y:Double", "kind" : "val"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.MatrixAddValue.A", "link" : "smile\/math\/MatrixAddValue.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/MatrixAddValue.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/MatrixAddValue.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixAddValue.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/MatrixAddValue.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/MatrixAddValue.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/MatrixAddValue.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixAddValue.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/MatrixAddValue.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/MatrixAddValue.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixAddValue.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/MatrixAddValue.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/MatrixAddValue.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/MatrixAddValue.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/MatrixAddValue.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/MatrixAddValue.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/MatrixAddValue.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/MatrixAddValue.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/MatrixAddValue.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/MatrixAddValue.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/MatrixAddValue.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixAddValue.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixAddValue.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixAddValue.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/MatrixAddValue.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/MatrixAddValue.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/MatrixAddValue.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/MatrixAddValue.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/MatrixAddValue.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/MatrixAddValue.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/MatrixAddValue.html", "kind" : "case class"}, {"name" : "smile.math.MatrixDivMatrix", "shortDescription" : "", "members_case class" : [{"label" : "toArray", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.matrixExpression2Array.toArray", "link" : "smile\/math\/MatrixDivMatrix.html#toArray():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.sum", "link" : "smile\/math\/MatrixDivMatrix.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/MatrixDivMatrix.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixDivMatrix.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixDivMatrix.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixDivMatrix.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixDivMatrix.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixDivMatrix.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixDivMatrix.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixDivMatrix.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixDivMatrix.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixDivMatrix.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixDivMatrix.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixDivMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixDivMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixDivMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixDivMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixDivMatrix.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixDivMatrix.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSds", "link" : "smile\/math\/MatrixDivMatrix.html#colSds():Array[Double]", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colMeans", "link" : "smile\/math\/MatrixDivMatrix.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSums", "link" : "smile\/math\/MatrixDivMatrix.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSds", "link" : "smile\/math\/MatrixDivMatrix.html#rowSds():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowMeans", "link" : "smile\/math\/MatrixDivMatrix.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSums", "link" : "smile\/math\/MatrixDivMatrix.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.matrixExpression2Array.xax", "link" : "smile\/math\/MatrixDivMatrix.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normFro", "link" : "smile\/math\/MatrixDivMatrix.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normInf", "link" : "smile\/math\/MatrixDivMatrix.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm", "link" : "smile\/math\/MatrixDivMatrix.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm2", "link" : "smile\/math\/MatrixDivMatrix.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm1", "link" : "smile\/math\/MatrixDivMatrix.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/MatrixDivMatrix.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/MatrixDivMatrix.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(arg0: Array[Double], arg1: Array[Double]): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/MatrixDivMatrix.html#scale(x$1:Array[Double],x$2:Array[Double]):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/MatrixDivMatrix.html#scale():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/MatrixDivMatrix.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixDivMatrix.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixDivMatrix.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/MatrixDivMatrix.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/MatrixDivMatrix.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/MatrixDivMatrix.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "submat", "tail" : "(arg0: Int, arg1: Int, arg2: Int, arg3: Int): DenseMatrix", "member" : "smile.math.matrixExpression2Array.submat", "link" : "smile\/math\/MatrixDivMatrix.html#submat(x$1:Int,x$2:Int,x$3:Int,x$4:Int):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.update", "link" : "smile\/math\/MatrixDivMatrix.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.matrixExpression2Array.ld", "link" : "smile\/math\/MatrixDivMatrix.html#ld():Int", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixDivMatrix.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixDivMatrix.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixDivMatrix.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixDivMatrix.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/MatrixDivMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/MatrixDivMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atx", "link" : "smile\/math\/MatrixDivMatrix.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/MatrixDivMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/MatrixDivMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.trace", "link" : "smile\/math\/MatrixDivMatrix.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.diag", "link" : "smile\/math\/MatrixDivMatrix.html#diag():Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.matrixExpression2Array.get", "link" : "smile\/math\/MatrixDivMatrix.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/MatrixDivMatrix.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/MatrixDivMatrix.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixDivMatrix.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixDivMatrix.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixDivMatrix.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixDivMatrix.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.aat", "link" : "smile\/math\/MatrixDivMatrix.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.ata", "link" : "smile\/math\/MatrixDivMatrix.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.transpose", "link" : "smile\/math\/MatrixDivMatrix.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/MatrixDivMatrix.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixDivMatrix.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixDivMatrix.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/MatrixDivMatrix.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/MatrixDivMatrix.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/MatrixDivMatrix.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.set", "link" : "smile\/math\/MatrixDivMatrix.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "fill", "tail" : "(arg0: Double): Unit", "member" : "smile.math.matrixExpression2Array.fill", "link" : "smile\/math\/MatrixDivMatrix.html#fill(x$1:Double):Unit", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.data", "link" : "smile\/math\/MatrixDivMatrix.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbtmm", "link" : "smile\/math\/MatrixDivMatrix.html#atbtmm(x$1:B):A", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbmm", "link" : "smile\/math\/MatrixDivMatrix.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abtmm", "link" : "smile\/math\/MatrixDivMatrix.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abmm", "link" : "smile\/math\/MatrixDivMatrix.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.ax", "link" : "smile\/math\/MatrixDivMatrix.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/MatrixDivMatrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixDivMatrix) => Boolean, msg: => Any): MatrixDivMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixDivMatrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixDivMatrix) => Boolean): MatrixDivMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixDivMatrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): MatrixDivMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixDivMatrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): MatrixDivMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixDivMatrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (MatrixDivMatrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/MatrixDivMatrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (MatrixDivMatrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/MatrixDivMatrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.MatrixDivMatrix.toMatrix", "link" : "smile\/math\/MatrixDivMatrix.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.MatrixDivMatrix.apply", "link" : "smile\/math\/MatrixDivMatrix.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.MatrixDivMatrix.ncols", "link" : "smile\/math\/MatrixDivMatrix.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.MatrixDivMatrix.nrows", "link" : "smile\/math\/MatrixDivMatrix.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.MatrixDivMatrix#<init>", "error" : "unsupported entity"}, {"label" : "B", "tail" : ": MatrixExpression", "member" : "smile.math.MatrixDivMatrix.B", "link" : "smile\/math\/MatrixDivMatrix.html#B:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.MatrixDivMatrix.A", "link" : "smile\/math\/MatrixDivMatrix.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/MatrixDivMatrix.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/MatrixDivMatrix.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixDivMatrix.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/MatrixDivMatrix.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/MatrixDivMatrix.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/MatrixDivMatrix.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixDivMatrix.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/MatrixDivMatrix.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/MatrixDivMatrix.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixDivMatrix.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/MatrixDivMatrix.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/MatrixDivMatrix.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/MatrixDivMatrix.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/MatrixDivMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/MatrixDivMatrix.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/MatrixDivMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/MatrixDivMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/MatrixDivMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/MatrixDivMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/MatrixDivMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixDivMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixDivMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixDivMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/MatrixDivMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/MatrixDivMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/MatrixDivMatrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/MatrixDivMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/MatrixDivMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/MatrixDivMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/MatrixDivMatrix.html", "kind" : "case class"}, {"name" : "smile.math.MatrixDivValue", "shortDescription" : "", "members_case class" : [{"label" : "toArray", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.matrixExpression2Array.toArray", "link" : "smile\/math\/MatrixDivValue.html#toArray():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.sum", "link" : "smile\/math\/MatrixDivValue.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/MatrixDivValue.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixDivValue.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixDivValue.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixDivValue.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixDivValue.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixDivValue.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixDivValue.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixDivValue.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixDivValue.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixDivValue.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixDivValue.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixDivValue.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixDivValue.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixDivValue.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixDivValue.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixDivValue.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixDivValue.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSds", "link" : "smile\/math\/MatrixDivValue.html#colSds():Array[Double]", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colMeans", "link" : "smile\/math\/MatrixDivValue.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSums", "link" : "smile\/math\/MatrixDivValue.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSds", "link" : "smile\/math\/MatrixDivValue.html#rowSds():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowMeans", "link" : "smile\/math\/MatrixDivValue.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSums", "link" : "smile\/math\/MatrixDivValue.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.matrixExpression2Array.xax", "link" : "smile\/math\/MatrixDivValue.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normFro", "link" : "smile\/math\/MatrixDivValue.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normInf", "link" : "smile\/math\/MatrixDivValue.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm", "link" : "smile\/math\/MatrixDivValue.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm2", "link" : "smile\/math\/MatrixDivValue.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm1", "link" : "smile\/math\/MatrixDivValue.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/MatrixDivValue.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/MatrixDivValue.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(arg0: Array[Double], arg1: Array[Double]): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/MatrixDivValue.html#scale(x$1:Array[Double],x$2:Array[Double]):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/MatrixDivValue.html#scale():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/MatrixDivValue.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixDivValue.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixDivValue.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/MatrixDivValue.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/MatrixDivValue.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/MatrixDivValue.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "submat", "tail" : "(arg0: Int, arg1: Int, arg2: Int, arg3: Int): DenseMatrix", "member" : "smile.math.matrixExpression2Array.submat", "link" : "smile\/math\/MatrixDivValue.html#submat(x$1:Int,x$2:Int,x$3:Int,x$4:Int):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.update", "link" : "smile\/math\/MatrixDivValue.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.matrixExpression2Array.ld", "link" : "smile\/math\/MatrixDivValue.html#ld():Int", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixDivValue.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixDivValue.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixDivValue.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixDivValue.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/MatrixDivValue.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/MatrixDivValue.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atx", "link" : "smile\/math\/MatrixDivValue.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/MatrixDivValue.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/MatrixDivValue.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.trace", "link" : "smile\/math\/MatrixDivValue.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.diag", "link" : "smile\/math\/MatrixDivValue.html#diag():Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.matrixExpression2Array.get", "link" : "smile\/math\/MatrixDivValue.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/MatrixDivValue.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/MatrixDivValue.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixDivValue.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixDivValue.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixDivValue.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixDivValue.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.aat", "link" : "smile\/math\/MatrixDivValue.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.ata", "link" : "smile\/math\/MatrixDivValue.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.transpose", "link" : "smile\/math\/MatrixDivValue.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/MatrixDivValue.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixDivValue.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixDivValue.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/MatrixDivValue.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/MatrixDivValue.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/MatrixDivValue.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.set", "link" : "smile\/math\/MatrixDivValue.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "fill", "tail" : "(arg0: Double): Unit", "member" : "smile.math.matrixExpression2Array.fill", "link" : "smile\/math\/MatrixDivValue.html#fill(x$1:Double):Unit", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.data", "link" : "smile\/math\/MatrixDivValue.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbtmm", "link" : "smile\/math\/MatrixDivValue.html#atbtmm(x$1:B):A", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbmm", "link" : "smile\/math\/MatrixDivValue.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abtmm", "link" : "smile\/math\/MatrixDivValue.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abmm", "link" : "smile\/math\/MatrixDivValue.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.ax", "link" : "smile\/math\/MatrixDivValue.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/MatrixDivValue.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixDivValue) => Boolean, msg: => Any): MatrixDivValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixDivValue.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixDivValue) => Boolean): MatrixDivValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixDivValue.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): MatrixDivValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixDivValue.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): MatrixDivValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixDivValue.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (MatrixDivValue, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/MatrixDivValue.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (MatrixDivValue, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/MatrixDivValue.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.MatrixDivValue.toMatrix", "link" : "smile\/math\/MatrixDivValue.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.MatrixDivValue.apply", "link" : "smile\/math\/MatrixDivValue.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.MatrixDivValue.ncols", "link" : "smile\/math\/MatrixDivValue.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.MatrixDivValue.nrows", "link" : "smile\/math\/MatrixDivValue.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.MatrixDivValue#<init>", "error" : "unsupported entity"}, {"label" : "y", "tail" : ": Double", "member" : "smile.math.MatrixDivValue.y", "link" : "smile\/math\/MatrixDivValue.html#y:Double", "kind" : "val"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.MatrixDivValue.A", "link" : "smile\/math\/MatrixDivValue.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/MatrixDivValue.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/MatrixDivValue.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixDivValue.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/MatrixDivValue.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/MatrixDivValue.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/MatrixDivValue.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixDivValue.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/MatrixDivValue.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/MatrixDivValue.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixDivValue.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/MatrixDivValue.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/MatrixDivValue.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/MatrixDivValue.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/MatrixDivValue.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/MatrixDivValue.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/MatrixDivValue.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/MatrixDivValue.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/MatrixDivValue.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/MatrixDivValue.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/MatrixDivValue.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixDivValue.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixDivValue.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixDivValue.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/MatrixDivValue.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/MatrixDivValue.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/MatrixDivValue.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/MatrixDivValue.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/MatrixDivValue.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/MatrixDivValue.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/MatrixDivValue.html", "kind" : "case class"}, {"name" : "smile.math.MatrixExpression", "trait" : "smile\/math\/MatrixExpression.html", "kind" : "trait", "members_trait" : [{"label" : "toArray", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.matrixExpression2Array.toArray", "link" : "smile\/math\/MatrixExpression.html#toArray():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.sum", "link" : "smile\/math\/MatrixExpression.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/MatrixExpression.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixExpression.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixExpression.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixExpression.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixExpression.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixExpression.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixExpression.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixExpression.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixExpression.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixExpression.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixExpression.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixExpression.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixExpression.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixExpression.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixExpression.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixExpression.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixExpression.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSds", "link" : "smile\/math\/MatrixExpression.html#colSds():Array[Double]", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colMeans", "link" : "smile\/math\/MatrixExpression.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSums", "link" : "smile\/math\/MatrixExpression.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSds", "link" : "smile\/math\/MatrixExpression.html#rowSds():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowMeans", "link" : "smile\/math\/MatrixExpression.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSums", "link" : "smile\/math\/MatrixExpression.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.matrixExpression2Array.xax", "link" : "smile\/math\/MatrixExpression.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normFro", "link" : "smile\/math\/MatrixExpression.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normInf", "link" : "smile\/math\/MatrixExpression.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm", "link" : "smile\/math\/MatrixExpression.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm2", "link" : "smile\/math\/MatrixExpression.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm1", "link" : "smile\/math\/MatrixExpression.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/MatrixExpression.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/MatrixExpression.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(arg0: Array[Double], arg1: Array[Double]): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/MatrixExpression.html#scale(x$1:Array[Double],x$2:Array[Double]):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/MatrixExpression.html#scale():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/MatrixExpression.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixExpression.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixExpression.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/MatrixExpression.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/MatrixExpression.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/MatrixExpression.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "submat", "tail" : "(arg0: Int, arg1: Int, arg2: Int, arg3: Int): DenseMatrix", "member" : "smile.math.matrixExpression2Array.submat", "link" : "smile\/math\/MatrixExpression.html#submat(x$1:Int,x$2:Int,x$3:Int,x$4:Int):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.update", "link" : "smile\/math\/MatrixExpression.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.matrixExpression2Array.ld", "link" : "smile\/math\/MatrixExpression.html#ld():Int", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixExpression.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixExpression.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixExpression.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixExpression.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/MatrixExpression.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/MatrixExpression.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atx", "link" : "smile\/math\/MatrixExpression.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/MatrixExpression.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/MatrixExpression.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.trace", "link" : "smile\/math\/MatrixExpression.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.diag", "link" : "smile\/math\/MatrixExpression.html#diag():Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.matrixExpression2Array.get", "link" : "smile\/math\/MatrixExpression.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/MatrixExpression.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/MatrixExpression.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixExpression.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixExpression.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixExpression.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixExpression.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.aat", "link" : "smile\/math\/MatrixExpression.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.ata", "link" : "smile\/math\/MatrixExpression.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.transpose", "link" : "smile\/math\/MatrixExpression.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/MatrixExpression.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixExpression.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixExpression.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/MatrixExpression.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/MatrixExpression.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/MatrixExpression.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.set", "link" : "smile\/math\/MatrixExpression.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "fill", "tail" : "(arg0: Double): Unit", "member" : "smile.math.matrixExpression2Array.fill", "link" : "smile\/math\/MatrixExpression.html#fill(x$1:Double):Unit", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.data", "link" : "smile\/math\/MatrixExpression.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbtmm", "link" : "smile\/math\/MatrixExpression.html#atbtmm(x$1:B):A", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbmm", "link" : "smile\/math\/MatrixExpression.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abtmm", "link" : "smile\/math\/MatrixExpression.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abmm", "link" : "smile\/math\/MatrixExpression.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.ax", "link" : "smile\/math\/MatrixExpression.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/MatrixExpression.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixExpression) => Boolean, msg: => Any): MatrixExpression", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixExpression.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixExpression) => Boolean): MatrixExpression", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixExpression.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): MatrixExpression", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixExpression.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): MatrixExpression", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixExpression.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (MatrixExpression, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/MatrixExpression.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (MatrixExpression, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/MatrixExpression.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/MatrixExpression.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixExpression.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/MatrixExpression.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/MatrixExpression.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/MatrixExpression.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixExpression.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/MatrixExpression.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/MatrixExpression.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixExpression.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/MatrixExpression.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/MatrixExpression.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/MatrixExpression.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/MatrixExpression.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/MatrixExpression.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/MatrixExpression.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/MatrixExpression.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/MatrixExpression.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/MatrixExpression.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/MatrixExpression.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixExpression.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixExpression.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixExpression.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/MatrixExpression.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/MatrixExpression.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/MatrixExpression.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/math\/MatrixExpression.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/math\/MatrixExpression.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/MatrixExpression.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/MatrixExpression.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/MatrixExpression.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toMatrix", "tail" : "(): DenseMatrix", "member" : "smile.math.MatrixExpression.toMatrix", "link" : "smile\/math\/MatrixExpression.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.MatrixExpression.apply", "link" : "smile\/math\/MatrixExpression.html#apply(i:Int,j:Int):Double", "kind" : "abstract def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.MatrixExpression.ncols", "link" : "smile\/math\/MatrixExpression.html#ncols:Int", "kind" : "abstract def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.MatrixExpression.nrows", "link" : "smile\/math\/MatrixExpression.html#nrows:Int", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "smile.math.MatrixLift", "shortDescription" : "", "members_case class" : [{"label" : "toArray", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.matrixExpression2Array.toArray", "link" : "smile\/math\/MatrixLift.html#toArray():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.sum", "link" : "smile\/math\/MatrixLift.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/MatrixLift.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixLift.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixLift.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixLift.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixLift.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixLift.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixLift.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixLift.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixLift.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixLift.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixLift.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixLift.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixLift.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixLift.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixLift.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixLift.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixLift.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSds", "link" : "smile\/math\/MatrixLift.html#colSds():Array[Double]", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colMeans", "link" : "smile\/math\/MatrixLift.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSums", "link" : "smile\/math\/MatrixLift.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSds", "link" : "smile\/math\/MatrixLift.html#rowSds():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowMeans", "link" : "smile\/math\/MatrixLift.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSums", "link" : "smile\/math\/MatrixLift.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.matrixExpression2Array.xax", "link" : "smile\/math\/MatrixLift.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normFro", "link" : "smile\/math\/MatrixLift.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normInf", "link" : "smile\/math\/MatrixLift.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm", "link" : "smile\/math\/MatrixLift.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm2", "link" : "smile\/math\/MatrixLift.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm1", "link" : "smile\/math\/MatrixLift.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/MatrixLift.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/MatrixLift.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(arg0: Array[Double], arg1: Array[Double]): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/MatrixLift.html#scale(x$1:Array[Double],x$2:Array[Double]):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/MatrixLift.html#scale():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/MatrixLift.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixLift.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixLift.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/MatrixLift.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/MatrixLift.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/MatrixLift.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "submat", "tail" : "(arg0: Int, arg1: Int, arg2: Int, arg3: Int): DenseMatrix", "member" : "smile.math.matrixExpression2Array.submat", "link" : "smile\/math\/MatrixLift.html#submat(x$1:Int,x$2:Int,x$3:Int,x$4:Int):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.update", "link" : "smile\/math\/MatrixLift.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.matrixExpression2Array.ld", "link" : "smile\/math\/MatrixLift.html#ld():Int", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixLift.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixLift.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixLift.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixLift.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/MatrixLift.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/MatrixLift.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atx", "link" : "smile\/math\/MatrixLift.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/MatrixLift.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/MatrixLift.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.trace", "link" : "smile\/math\/MatrixLift.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.diag", "link" : "smile\/math\/MatrixLift.html#diag():Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.matrixExpression2Array.get", "link" : "smile\/math\/MatrixLift.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/MatrixLift.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/MatrixLift.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixLift.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixLift.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixLift.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixLift.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.aat", "link" : "smile\/math\/MatrixLift.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.ata", "link" : "smile\/math\/MatrixLift.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.transpose", "link" : "smile\/math\/MatrixLift.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/MatrixLift.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixLift.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixLift.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/MatrixLift.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/MatrixLift.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/MatrixLift.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.set", "link" : "smile\/math\/MatrixLift.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "fill", "tail" : "(arg0: Double): Unit", "member" : "smile.math.matrixExpression2Array.fill", "link" : "smile\/math\/MatrixLift.html#fill(x$1:Double):Unit", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.data", "link" : "smile\/math\/MatrixLift.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbtmm", "link" : "smile\/math\/MatrixLift.html#atbtmm(x$1:B):A", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbmm", "link" : "smile\/math\/MatrixLift.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abtmm", "link" : "smile\/math\/MatrixLift.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abmm", "link" : "smile\/math\/MatrixLift.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.ax", "link" : "smile\/math\/MatrixLift.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/MatrixLift.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixLift) => Boolean, msg: => Any): MatrixLift", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixLift.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixLift) => Boolean): MatrixLift", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixLift.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): MatrixLift", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixLift.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): MatrixLift", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixLift.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (MatrixLift, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/MatrixLift.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (MatrixLift, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/MatrixLift.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : "(): DenseMatrix", "member" : "smile.math.MatrixLift.toMatrix", "link" : "smile\/math\/MatrixLift.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.MatrixLift.apply", "link" : "smile\/math\/MatrixLift.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.MatrixLift.ncols", "link" : "smile\/math\/MatrixLift.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.MatrixLift.nrows", "link" : "smile\/math\/MatrixLift.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.MatrixLift#<init>", "error" : "unsupported entity"}, {"label" : "A", "tail" : ": DenseMatrix", "member" : "smile.math.MatrixLift.A", "link" : "smile\/math\/MatrixLift.html#A:smile.math.matrix.DenseMatrix", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/MatrixLift.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/MatrixLift.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixLift.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/MatrixLift.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/MatrixLift.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/MatrixLift.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixLift.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/MatrixLift.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/MatrixLift.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixLift.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/MatrixLift.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/MatrixLift.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/MatrixLift.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/MatrixLift.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/MatrixLift.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/MatrixLift.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/MatrixLift.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/MatrixLift.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/MatrixLift.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/MatrixLift.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixLift.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixLift.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixLift.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/MatrixLift.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/MatrixLift.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/MatrixLift.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/MatrixLift.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/MatrixLift.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/MatrixLift.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/MatrixLift.html", "kind" : "case class"}, {"name" : "smile.math.MatrixMulMatrix", "shortDescription" : "", "members_case class" : [{"label" : "toArray", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.matrixExpression2Array.toArray", "link" : "smile\/math\/MatrixMulMatrix.html#toArray():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.sum", "link" : "smile\/math\/MatrixMulMatrix.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/MatrixMulMatrix.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixMulMatrix.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixMulMatrix.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixMulMatrix.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixMulMatrix.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixMulMatrix.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixMulMatrix.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixMulMatrix.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixMulMatrix.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixMulMatrix.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixMulMatrix.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixMulMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixMulMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixMulMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixMulMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixMulMatrix.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixMulMatrix.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSds", "link" : "smile\/math\/MatrixMulMatrix.html#colSds():Array[Double]", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colMeans", "link" : "smile\/math\/MatrixMulMatrix.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSums", "link" : "smile\/math\/MatrixMulMatrix.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSds", "link" : "smile\/math\/MatrixMulMatrix.html#rowSds():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowMeans", "link" : "smile\/math\/MatrixMulMatrix.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSums", "link" : "smile\/math\/MatrixMulMatrix.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.matrixExpression2Array.xax", "link" : "smile\/math\/MatrixMulMatrix.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normFro", "link" : "smile\/math\/MatrixMulMatrix.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normInf", "link" : "smile\/math\/MatrixMulMatrix.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm", "link" : "smile\/math\/MatrixMulMatrix.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm2", "link" : "smile\/math\/MatrixMulMatrix.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm1", "link" : "smile\/math\/MatrixMulMatrix.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/MatrixMulMatrix.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/MatrixMulMatrix.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(arg0: Array[Double], arg1: Array[Double]): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/MatrixMulMatrix.html#scale(x$1:Array[Double],x$2:Array[Double]):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/MatrixMulMatrix.html#scale():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/MatrixMulMatrix.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixMulMatrix.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixMulMatrix.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/MatrixMulMatrix.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/MatrixMulMatrix.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/MatrixMulMatrix.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "submat", "tail" : "(arg0: Int, arg1: Int, arg2: Int, arg3: Int): DenseMatrix", "member" : "smile.math.matrixExpression2Array.submat", "link" : "smile\/math\/MatrixMulMatrix.html#submat(x$1:Int,x$2:Int,x$3:Int,x$4:Int):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.update", "link" : "smile\/math\/MatrixMulMatrix.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.matrixExpression2Array.ld", "link" : "smile\/math\/MatrixMulMatrix.html#ld():Int", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixMulMatrix.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixMulMatrix.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixMulMatrix.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixMulMatrix.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/MatrixMulMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/MatrixMulMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atx", "link" : "smile\/math\/MatrixMulMatrix.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/MatrixMulMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/MatrixMulMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.trace", "link" : "smile\/math\/MatrixMulMatrix.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.diag", "link" : "smile\/math\/MatrixMulMatrix.html#diag():Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.matrixExpression2Array.get", "link" : "smile\/math\/MatrixMulMatrix.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/MatrixMulMatrix.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/MatrixMulMatrix.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixMulMatrix.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixMulMatrix.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixMulMatrix.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixMulMatrix.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.aat", "link" : "smile\/math\/MatrixMulMatrix.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.ata", "link" : "smile\/math\/MatrixMulMatrix.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.transpose", "link" : "smile\/math\/MatrixMulMatrix.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/MatrixMulMatrix.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixMulMatrix.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixMulMatrix.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/MatrixMulMatrix.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/MatrixMulMatrix.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/MatrixMulMatrix.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.set", "link" : "smile\/math\/MatrixMulMatrix.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "fill", "tail" : "(arg0: Double): Unit", "member" : "smile.math.matrixExpression2Array.fill", "link" : "smile\/math\/MatrixMulMatrix.html#fill(x$1:Double):Unit", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.data", "link" : "smile\/math\/MatrixMulMatrix.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbtmm", "link" : "smile\/math\/MatrixMulMatrix.html#atbtmm(x$1:B):A", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbmm", "link" : "smile\/math\/MatrixMulMatrix.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abtmm", "link" : "smile\/math\/MatrixMulMatrix.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abmm", "link" : "smile\/math\/MatrixMulMatrix.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.ax", "link" : "smile\/math\/MatrixMulMatrix.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/MatrixMulMatrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixMulMatrix) => Boolean, msg: => Any): MatrixMulMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixMulMatrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixMulMatrix) => Boolean): MatrixMulMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixMulMatrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): MatrixMulMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixMulMatrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): MatrixMulMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixMulMatrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (MatrixMulMatrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/MatrixMulMatrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (MatrixMulMatrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/MatrixMulMatrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.MatrixMulMatrix.toMatrix", "link" : "smile\/math\/MatrixMulMatrix.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.MatrixMulMatrix.apply", "link" : "smile\/math\/MatrixMulMatrix.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.MatrixMulMatrix.ncols", "link" : "smile\/math\/MatrixMulMatrix.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.MatrixMulMatrix.nrows", "link" : "smile\/math\/MatrixMulMatrix.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.MatrixMulMatrix#<init>", "error" : "unsupported entity"}, {"label" : "B", "tail" : ": MatrixExpression", "member" : "smile.math.MatrixMulMatrix.B", "link" : "smile\/math\/MatrixMulMatrix.html#B:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.MatrixMulMatrix.A", "link" : "smile\/math\/MatrixMulMatrix.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/MatrixMulMatrix.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/MatrixMulMatrix.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixMulMatrix.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/MatrixMulMatrix.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/MatrixMulMatrix.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/MatrixMulMatrix.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixMulMatrix.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/MatrixMulMatrix.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/MatrixMulMatrix.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixMulMatrix.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/MatrixMulMatrix.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/MatrixMulMatrix.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/MatrixMulMatrix.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/MatrixMulMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/MatrixMulMatrix.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/MatrixMulMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/MatrixMulMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/MatrixMulMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/MatrixMulMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/MatrixMulMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixMulMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixMulMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixMulMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/MatrixMulMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/MatrixMulMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/MatrixMulMatrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/MatrixMulMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/MatrixMulMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/MatrixMulMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/MatrixMulMatrix.html", "kind" : "case class"}, {"name" : "smile.math.MatrixMultiplicationChain", "shortDescription" : "", "members_case class" : [{"label" : "toArray", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.matrixExpression2Array.toArray", "link" : "smile\/math\/MatrixMultiplicationChain.html#toArray():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.sum", "link" : "smile\/math\/MatrixMultiplicationChain.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/MatrixMultiplicationChain.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixMultiplicationChain.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixMultiplicationChain.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixMultiplicationChain.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixMultiplicationChain.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixMultiplicationChain.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixMultiplicationChain.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixMultiplicationChain.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixMultiplicationChain.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixMultiplicationChain.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixMultiplicationChain.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixMultiplicationChain.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixMultiplicationChain.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixMultiplicationChain.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixMultiplicationChain.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixMultiplicationChain.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixMultiplicationChain.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSds", "link" : "smile\/math\/MatrixMultiplicationChain.html#colSds():Array[Double]", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colMeans", "link" : "smile\/math\/MatrixMultiplicationChain.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSums", "link" : "smile\/math\/MatrixMultiplicationChain.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSds", "link" : "smile\/math\/MatrixMultiplicationChain.html#rowSds():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowMeans", "link" : "smile\/math\/MatrixMultiplicationChain.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSums", "link" : "smile\/math\/MatrixMultiplicationChain.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.matrixExpression2Array.xax", "link" : "smile\/math\/MatrixMultiplicationChain.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normFro", "link" : "smile\/math\/MatrixMultiplicationChain.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normInf", "link" : "smile\/math\/MatrixMultiplicationChain.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm", "link" : "smile\/math\/MatrixMultiplicationChain.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm2", "link" : "smile\/math\/MatrixMultiplicationChain.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm1", "link" : "smile\/math\/MatrixMultiplicationChain.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/MatrixMultiplicationChain.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/MatrixMultiplicationChain.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(arg0: Array[Double], arg1: Array[Double]): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/MatrixMultiplicationChain.html#scale(x$1:Array[Double],x$2:Array[Double]):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/MatrixMultiplicationChain.html#scale():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/MatrixMultiplicationChain.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixMultiplicationChain.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixMultiplicationChain.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/MatrixMultiplicationChain.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/MatrixMultiplicationChain.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/MatrixMultiplicationChain.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "submat", "tail" : "(arg0: Int, arg1: Int, arg2: Int, arg3: Int): DenseMatrix", "member" : "smile.math.matrixExpression2Array.submat", "link" : "smile\/math\/MatrixMultiplicationChain.html#submat(x$1:Int,x$2:Int,x$3:Int,x$4:Int):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.update", "link" : "smile\/math\/MatrixMultiplicationChain.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.matrixExpression2Array.ld", "link" : "smile\/math\/MatrixMultiplicationChain.html#ld():Int", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixMultiplicationChain.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixMultiplicationChain.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixMultiplicationChain.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixMultiplicationChain.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/MatrixMultiplicationChain.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/MatrixMultiplicationChain.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atx", "link" : "smile\/math\/MatrixMultiplicationChain.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/MatrixMultiplicationChain.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/MatrixMultiplicationChain.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.trace", "link" : "smile\/math\/MatrixMultiplicationChain.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.diag", "link" : "smile\/math\/MatrixMultiplicationChain.html#diag():Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.matrixExpression2Array.get", "link" : "smile\/math\/MatrixMultiplicationChain.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/MatrixMultiplicationChain.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/MatrixMultiplicationChain.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixMultiplicationChain.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixMultiplicationChain.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixMultiplicationChain.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixMultiplicationChain.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.aat", "link" : "smile\/math\/MatrixMultiplicationChain.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.ata", "link" : "smile\/math\/MatrixMultiplicationChain.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.transpose", "link" : "smile\/math\/MatrixMultiplicationChain.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/MatrixMultiplicationChain.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixMultiplicationChain.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixMultiplicationChain.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/MatrixMultiplicationChain.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/MatrixMultiplicationChain.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/MatrixMultiplicationChain.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.set", "link" : "smile\/math\/MatrixMultiplicationChain.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "fill", "tail" : "(arg0: Double): Unit", "member" : "smile.math.matrixExpression2Array.fill", "link" : "smile\/math\/MatrixMultiplicationChain.html#fill(x$1:Double):Unit", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.data", "link" : "smile\/math\/MatrixMultiplicationChain.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbtmm", "link" : "smile\/math\/MatrixMultiplicationChain.html#atbtmm(x$1:B):A", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbmm", "link" : "smile\/math\/MatrixMultiplicationChain.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abtmm", "link" : "smile\/math\/MatrixMultiplicationChain.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abmm", "link" : "smile\/math\/MatrixMultiplicationChain.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.ax", "link" : "smile\/math\/MatrixMultiplicationChain.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/MatrixMultiplicationChain.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixMultiplicationChain) => Boolean, msg: => Any): MatrixMultiplicationChain", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixMultiplicationChain.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixMultiplicationChain) => Boolean): MatrixMultiplicationChain", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixMultiplicationChain.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): MatrixMultiplicationChain", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixMultiplicationChain.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): MatrixMultiplicationChain", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixMultiplicationChain.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (MatrixMultiplicationChain, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/MatrixMultiplicationChain.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (MatrixMultiplicationChain, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/MatrixMultiplicationChain.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.MatrixMultiplicationChain.toMatrix", "link" : "smile\/math\/MatrixMultiplicationChain.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "%*%", "tail" : "(B: MatrixExpression): MatrixMultiplicationChain", "member" : "smile.math.MatrixMultiplicationChain.%*%", "link" : "smile\/math\/MatrixMultiplicationChain.html#%*%(B:smile.math.MatrixExpression):smile.math.MatrixMultiplicationChain", "kind" : "def"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.MatrixMultiplicationChain.apply", "link" : "smile\/math\/MatrixMultiplicationChain.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.MatrixMultiplicationChain.ncols", "link" : "smile\/math\/MatrixMultiplicationChain.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.MatrixMultiplicationChain.nrows", "link" : "smile\/math\/MatrixMultiplicationChain.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.MatrixMultiplicationChain#<init>", "error" : "unsupported entity"}, {"label" : "A", "tail" : ": Seq[MatrixExpression]", "member" : "smile.math.MatrixMultiplicationChain.A", "link" : "smile\/math\/MatrixMultiplicationChain.html#A:Seq[smile.math.MatrixExpression]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/MatrixMultiplicationChain.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/MatrixMultiplicationChain.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixMultiplicationChain.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/MatrixMultiplicationChain.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/MatrixMultiplicationChain.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixMultiplicationChain.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/MatrixMultiplicationChain.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/MatrixMultiplicationChain.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixMultiplicationChain.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/MatrixMultiplicationChain.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/MatrixMultiplicationChain.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/MatrixMultiplicationChain.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/MatrixMultiplicationChain.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/MatrixMultiplicationChain.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/MatrixMultiplicationChain.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/MatrixMultiplicationChain.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/MatrixMultiplicationChain.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/MatrixMultiplicationChain.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/MatrixMultiplicationChain.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixMultiplicationChain.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixMultiplicationChain.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixMultiplicationChain.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/MatrixMultiplicationChain.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/MatrixMultiplicationChain.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/MatrixMultiplicationChain.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/MatrixMultiplicationChain.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/MatrixMultiplicationChain.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/MatrixMultiplicationChain.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/MatrixMultiplicationChain.html", "kind" : "case class"}, {"name" : "smile.math.MatrixMultiplicationExpression", "shortDescription" : "", "members_case class" : [{"label" : "toArray", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.matrixExpression2Array.toArray", "link" : "smile\/math\/MatrixMultiplicationExpression.html#toArray():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.sum", "link" : "smile\/math\/MatrixMultiplicationExpression.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/MatrixMultiplicationExpression.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixMultiplicationExpression.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixMultiplicationExpression.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixMultiplicationExpression.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixMultiplicationExpression.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixMultiplicationExpression.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixMultiplicationExpression.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixMultiplicationExpression.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixMultiplicationExpression.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixMultiplicationExpression.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixMultiplicationExpression.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixMultiplicationExpression.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixMultiplicationExpression.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixMultiplicationExpression.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixMultiplicationExpression.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixMultiplicationExpression.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixMultiplicationExpression.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSds", "link" : "smile\/math\/MatrixMultiplicationExpression.html#colSds():Array[Double]", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colMeans", "link" : "smile\/math\/MatrixMultiplicationExpression.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSums", "link" : "smile\/math\/MatrixMultiplicationExpression.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSds", "link" : "smile\/math\/MatrixMultiplicationExpression.html#rowSds():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowMeans", "link" : "smile\/math\/MatrixMultiplicationExpression.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSums", "link" : "smile\/math\/MatrixMultiplicationExpression.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.matrixExpression2Array.xax", "link" : "smile\/math\/MatrixMultiplicationExpression.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normFro", "link" : "smile\/math\/MatrixMultiplicationExpression.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normInf", "link" : "smile\/math\/MatrixMultiplicationExpression.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm", "link" : "smile\/math\/MatrixMultiplicationExpression.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm2", "link" : "smile\/math\/MatrixMultiplicationExpression.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm1", "link" : "smile\/math\/MatrixMultiplicationExpression.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/MatrixMultiplicationExpression.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/MatrixMultiplicationExpression.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(arg0: Array[Double], arg1: Array[Double]): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/MatrixMultiplicationExpression.html#scale(x$1:Array[Double],x$2:Array[Double]):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/MatrixMultiplicationExpression.html#scale():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/MatrixMultiplicationExpression.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixMultiplicationExpression.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixMultiplicationExpression.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/MatrixMultiplicationExpression.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/MatrixMultiplicationExpression.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/MatrixMultiplicationExpression.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "submat", "tail" : "(arg0: Int, arg1: Int, arg2: Int, arg3: Int): DenseMatrix", "member" : "smile.math.matrixExpression2Array.submat", "link" : "smile\/math\/MatrixMultiplicationExpression.html#submat(x$1:Int,x$2:Int,x$3:Int,x$4:Int):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.update", "link" : "smile\/math\/MatrixMultiplicationExpression.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.matrixExpression2Array.ld", "link" : "smile\/math\/MatrixMultiplicationExpression.html#ld():Int", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixMultiplicationExpression.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixMultiplicationExpression.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixMultiplicationExpression.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixMultiplicationExpression.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/MatrixMultiplicationExpression.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/MatrixMultiplicationExpression.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atx", "link" : "smile\/math\/MatrixMultiplicationExpression.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/MatrixMultiplicationExpression.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/MatrixMultiplicationExpression.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.trace", "link" : "smile\/math\/MatrixMultiplicationExpression.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.diag", "link" : "smile\/math\/MatrixMultiplicationExpression.html#diag():Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.matrixExpression2Array.get", "link" : "smile\/math\/MatrixMultiplicationExpression.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/MatrixMultiplicationExpression.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/MatrixMultiplicationExpression.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixMultiplicationExpression.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixMultiplicationExpression.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixMultiplicationExpression.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixMultiplicationExpression.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.aat", "link" : "smile\/math\/MatrixMultiplicationExpression.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.ata", "link" : "smile\/math\/MatrixMultiplicationExpression.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.transpose", "link" : "smile\/math\/MatrixMultiplicationExpression.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/MatrixMultiplicationExpression.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixMultiplicationExpression.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixMultiplicationExpression.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/MatrixMultiplicationExpression.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/MatrixMultiplicationExpression.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/MatrixMultiplicationExpression.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.set", "link" : "smile\/math\/MatrixMultiplicationExpression.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "fill", "tail" : "(arg0: Double): Unit", "member" : "smile.math.matrixExpression2Array.fill", "link" : "smile\/math\/MatrixMultiplicationExpression.html#fill(x$1:Double):Unit", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.data", "link" : "smile\/math\/MatrixMultiplicationExpression.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbtmm", "link" : "smile\/math\/MatrixMultiplicationExpression.html#atbtmm(x$1:B):A", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbmm", "link" : "smile\/math\/MatrixMultiplicationExpression.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abtmm", "link" : "smile\/math\/MatrixMultiplicationExpression.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abmm", "link" : "smile\/math\/MatrixMultiplicationExpression.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.ax", "link" : "smile\/math\/MatrixMultiplicationExpression.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/MatrixMultiplicationExpression.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixMultiplicationExpression) => Boolean, msg: => Any): MatrixMultiplicationExpression", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixMultiplicationExpression.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixMultiplicationExpression) => Boolean): MatrixMultiplicationExpression", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixMultiplicationExpression.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): MatrixMultiplicationExpression", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixMultiplicationExpression.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): MatrixMultiplicationExpression", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixMultiplicationExpression.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (MatrixMultiplicationExpression, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/MatrixMultiplicationExpression.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (MatrixMultiplicationExpression, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/MatrixMultiplicationExpression.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "%*%", "tail" : "(C: MatrixExpression): MatrixMultiplicationChain", "member" : "smile.math.MatrixMultiplicationExpression.%*%", "link" : "smile\/math\/MatrixMultiplicationExpression.html#%*%(C:smile.math.MatrixExpression):smile.math.MatrixMultiplicationChain", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.MatrixMultiplicationExpression.toMatrix", "link" : "smile\/math\/MatrixMultiplicationExpression.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.MatrixMultiplicationExpression.apply", "link" : "smile\/math\/MatrixMultiplicationExpression.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.MatrixMultiplicationExpression.ncols", "link" : "smile\/math\/MatrixMultiplicationExpression.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.MatrixMultiplicationExpression.nrows", "link" : "smile\/math\/MatrixMultiplicationExpression.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.MatrixMultiplicationExpression#<init>", "error" : "unsupported entity"}, {"label" : "B", "tail" : ": MatrixExpression", "member" : "smile.math.MatrixMultiplicationExpression.B", "link" : "smile\/math\/MatrixMultiplicationExpression.html#B:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.MatrixMultiplicationExpression.A", "link" : "smile\/math\/MatrixMultiplicationExpression.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/MatrixMultiplicationExpression.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/MatrixMultiplicationExpression.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixMultiplicationExpression.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/MatrixMultiplicationExpression.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/MatrixMultiplicationExpression.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixMultiplicationExpression.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/MatrixMultiplicationExpression.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/MatrixMultiplicationExpression.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixMultiplicationExpression.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/MatrixMultiplicationExpression.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/MatrixMultiplicationExpression.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/MatrixMultiplicationExpression.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/MatrixMultiplicationExpression.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/MatrixMultiplicationExpression.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/MatrixMultiplicationExpression.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/MatrixMultiplicationExpression.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/MatrixMultiplicationExpression.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/MatrixMultiplicationExpression.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/MatrixMultiplicationExpression.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixMultiplicationExpression.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixMultiplicationExpression.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixMultiplicationExpression.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/MatrixMultiplicationExpression.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/MatrixMultiplicationExpression.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/MatrixMultiplicationExpression.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/MatrixMultiplicationExpression.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/MatrixMultiplicationExpression.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/MatrixMultiplicationExpression.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/MatrixMultiplicationExpression.html", "kind" : "case class"}, {"name" : "smile.math.MatrixMulValue", "shortDescription" : "", "members_case class" : [{"label" : "toArray", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.matrixExpression2Array.toArray", "link" : "smile\/math\/MatrixMulValue.html#toArray():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.sum", "link" : "smile\/math\/MatrixMulValue.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/MatrixMulValue.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixMulValue.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixMulValue.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixMulValue.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixMulValue.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixMulValue.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixMulValue.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixMulValue.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixMulValue.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixMulValue.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixMulValue.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixMulValue.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixMulValue.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixMulValue.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixMulValue.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixMulValue.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixMulValue.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSds", "link" : "smile\/math\/MatrixMulValue.html#colSds():Array[Double]", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colMeans", "link" : "smile\/math\/MatrixMulValue.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSums", "link" : "smile\/math\/MatrixMulValue.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSds", "link" : "smile\/math\/MatrixMulValue.html#rowSds():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowMeans", "link" : "smile\/math\/MatrixMulValue.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSums", "link" : "smile\/math\/MatrixMulValue.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.matrixExpression2Array.xax", "link" : "smile\/math\/MatrixMulValue.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normFro", "link" : "smile\/math\/MatrixMulValue.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normInf", "link" : "smile\/math\/MatrixMulValue.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm", "link" : "smile\/math\/MatrixMulValue.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm2", "link" : "smile\/math\/MatrixMulValue.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm1", "link" : "smile\/math\/MatrixMulValue.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/MatrixMulValue.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/MatrixMulValue.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(arg0: Array[Double], arg1: Array[Double]): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/MatrixMulValue.html#scale(x$1:Array[Double],x$2:Array[Double]):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/MatrixMulValue.html#scale():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/MatrixMulValue.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixMulValue.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixMulValue.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/MatrixMulValue.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/MatrixMulValue.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/MatrixMulValue.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "submat", "tail" : "(arg0: Int, arg1: Int, arg2: Int, arg3: Int): DenseMatrix", "member" : "smile.math.matrixExpression2Array.submat", "link" : "smile\/math\/MatrixMulValue.html#submat(x$1:Int,x$2:Int,x$3:Int,x$4:Int):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.update", "link" : "smile\/math\/MatrixMulValue.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.matrixExpression2Array.ld", "link" : "smile\/math\/MatrixMulValue.html#ld():Int", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixMulValue.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixMulValue.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixMulValue.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixMulValue.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/MatrixMulValue.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/MatrixMulValue.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atx", "link" : "smile\/math\/MatrixMulValue.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/MatrixMulValue.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/MatrixMulValue.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.trace", "link" : "smile\/math\/MatrixMulValue.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.diag", "link" : "smile\/math\/MatrixMulValue.html#diag():Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.matrixExpression2Array.get", "link" : "smile\/math\/MatrixMulValue.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/MatrixMulValue.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/MatrixMulValue.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixMulValue.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixMulValue.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixMulValue.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixMulValue.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.aat", "link" : "smile\/math\/MatrixMulValue.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.ata", "link" : "smile\/math\/MatrixMulValue.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.transpose", "link" : "smile\/math\/MatrixMulValue.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/MatrixMulValue.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixMulValue.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixMulValue.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/MatrixMulValue.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/MatrixMulValue.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/MatrixMulValue.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.set", "link" : "smile\/math\/MatrixMulValue.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "fill", "tail" : "(arg0: Double): Unit", "member" : "smile.math.matrixExpression2Array.fill", "link" : "smile\/math\/MatrixMulValue.html#fill(x$1:Double):Unit", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.data", "link" : "smile\/math\/MatrixMulValue.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbtmm", "link" : "smile\/math\/MatrixMulValue.html#atbtmm(x$1:B):A", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbmm", "link" : "smile\/math\/MatrixMulValue.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abtmm", "link" : "smile\/math\/MatrixMulValue.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abmm", "link" : "smile\/math\/MatrixMulValue.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.ax", "link" : "smile\/math\/MatrixMulValue.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/MatrixMulValue.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixMulValue) => Boolean, msg: => Any): MatrixMulValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixMulValue.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixMulValue) => Boolean): MatrixMulValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixMulValue.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): MatrixMulValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixMulValue.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): MatrixMulValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixMulValue.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (MatrixMulValue, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/MatrixMulValue.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (MatrixMulValue, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/MatrixMulValue.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.MatrixMulValue.toMatrix", "link" : "smile\/math\/MatrixMulValue.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.MatrixMulValue.apply", "link" : "smile\/math\/MatrixMulValue.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.MatrixMulValue.ncols", "link" : "smile\/math\/MatrixMulValue.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.MatrixMulValue.nrows", "link" : "smile\/math\/MatrixMulValue.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.MatrixMulValue#<init>", "error" : "unsupported entity"}, {"label" : "y", "tail" : ": Double", "member" : "smile.math.MatrixMulValue.y", "link" : "smile\/math\/MatrixMulValue.html#y:Double", "kind" : "val"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.MatrixMulValue.A", "link" : "smile\/math\/MatrixMulValue.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/MatrixMulValue.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/MatrixMulValue.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixMulValue.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/MatrixMulValue.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/MatrixMulValue.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/MatrixMulValue.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixMulValue.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/MatrixMulValue.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/MatrixMulValue.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixMulValue.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/MatrixMulValue.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/MatrixMulValue.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/MatrixMulValue.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/MatrixMulValue.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/MatrixMulValue.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/MatrixMulValue.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/MatrixMulValue.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/MatrixMulValue.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/MatrixMulValue.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/MatrixMulValue.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixMulValue.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixMulValue.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixMulValue.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/MatrixMulValue.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/MatrixMulValue.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/MatrixMulValue.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/MatrixMulValue.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/MatrixMulValue.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/MatrixMulValue.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/MatrixMulValue.html", "kind" : "case class"}, {"name" : "smile.math.MatrixOrderOptimization", "shortDescription" : "Optimizes the order of matrix multiplication chain.", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "smile\/math\/MatrixOrderOptimization.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/MatrixOrderOptimization.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixOrderOptimization) => Boolean, msg: => Any): MatrixOrderOptimization", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixOrderOptimization.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixOrderOptimization) => Boolean): MatrixOrderOptimization", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixOrderOptimization.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): MatrixOrderOptimization", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixOrderOptimization.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): MatrixOrderOptimization", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixOrderOptimization.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (MatrixOrderOptimization, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/MatrixOrderOptimization.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (MatrixOrderOptimization, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/MatrixOrderOptimization.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixOrderOptimization.toString", "link" : "smile\/math\/MatrixOrderOptimization.html#toString():String", "kind" : "def"}, {"label" : "s", "tail" : ": Array[Array[Int]]", "member" : "smile.math.MatrixOrderOptimization.s", "link" : "smile\/math\/MatrixOrderOptimization.html#s:Array[Array[Int]]", "kind" : "val"}, {"label" : "m", "tail" : ": Array[Array[Int]]", "member" : "smile.math.MatrixOrderOptimization.m", "link" : "smile\/math\/MatrixOrderOptimization.html#m:Array[Array[Int]]", "kind" : "val"}, {"label" : "n", "tail" : ": Int", "member" : "smile.math.MatrixOrderOptimization.n", "link" : "smile\/math\/MatrixOrderOptimization.html#n:Int", "kind" : "val"}, {"member" : "smile.math.MatrixOrderOptimization#<init>", "error" : "unsupported entity"}, {"label" : "logger", "tail" : ": Logger", "member" : "com.typesafe.scalalogging.LazyLogging.logger", "link" : "smile\/math\/MatrixOrderOptimization.html#logger:com.typesafe.scalalogging.Logger", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/MatrixOrderOptimization.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/MatrixOrderOptimization.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/MatrixOrderOptimization.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/MatrixOrderOptimization.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/MatrixOrderOptimization.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/MatrixOrderOptimization.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/MatrixOrderOptimization.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixOrderOptimization.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixOrderOptimization.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixOrderOptimization.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/MatrixOrderOptimization.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/MatrixOrderOptimization.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/MatrixOrderOptimization.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/math\/MatrixOrderOptimization.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/math\/MatrixOrderOptimization.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/MatrixOrderOptimization.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/MatrixOrderOptimization.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/MatrixOrderOptimization.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "smile\/math\/MatrixOrderOptimization.html", "kind" : "class"}, {"name" : "smile.math.MatrixSubMatrix", "shortDescription" : "", "members_case class" : [{"label" : "toArray", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.matrixExpression2Array.toArray", "link" : "smile\/math\/MatrixSubMatrix.html#toArray():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.sum", "link" : "smile\/math\/MatrixSubMatrix.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/MatrixSubMatrix.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixSubMatrix.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixSubMatrix.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixSubMatrix.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixSubMatrix.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixSubMatrix.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixSubMatrix.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixSubMatrix.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixSubMatrix.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixSubMatrix.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixSubMatrix.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixSubMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixSubMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixSubMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixSubMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixSubMatrix.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixSubMatrix.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSds", "link" : "smile\/math\/MatrixSubMatrix.html#colSds():Array[Double]", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colMeans", "link" : "smile\/math\/MatrixSubMatrix.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSums", "link" : "smile\/math\/MatrixSubMatrix.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSds", "link" : "smile\/math\/MatrixSubMatrix.html#rowSds():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowMeans", "link" : "smile\/math\/MatrixSubMatrix.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSums", "link" : "smile\/math\/MatrixSubMatrix.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.matrixExpression2Array.xax", "link" : "smile\/math\/MatrixSubMatrix.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normFro", "link" : "smile\/math\/MatrixSubMatrix.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normInf", "link" : "smile\/math\/MatrixSubMatrix.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm", "link" : "smile\/math\/MatrixSubMatrix.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm2", "link" : "smile\/math\/MatrixSubMatrix.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm1", "link" : "smile\/math\/MatrixSubMatrix.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/MatrixSubMatrix.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/MatrixSubMatrix.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(arg0: Array[Double], arg1: Array[Double]): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/MatrixSubMatrix.html#scale(x$1:Array[Double],x$2:Array[Double]):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/MatrixSubMatrix.html#scale():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/MatrixSubMatrix.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixSubMatrix.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixSubMatrix.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/MatrixSubMatrix.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/MatrixSubMatrix.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/MatrixSubMatrix.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "submat", "tail" : "(arg0: Int, arg1: Int, arg2: Int, arg3: Int): DenseMatrix", "member" : "smile.math.matrixExpression2Array.submat", "link" : "smile\/math\/MatrixSubMatrix.html#submat(x$1:Int,x$2:Int,x$3:Int,x$4:Int):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.update", "link" : "smile\/math\/MatrixSubMatrix.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.matrixExpression2Array.ld", "link" : "smile\/math\/MatrixSubMatrix.html#ld():Int", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixSubMatrix.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixSubMatrix.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixSubMatrix.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixSubMatrix.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/MatrixSubMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/MatrixSubMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atx", "link" : "smile\/math\/MatrixSubMatrix.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/MatrixSubMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/MatrixSubMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.trace", "link" : "smile\/math\/MatrixSubMatrix.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.diag", "link" : "smile\/math\/MatrixSubMatrix.html#diag():Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.matrixExpression2Array.get", "link" : "smile\/math\/MatrixSubMatrix.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/MatrixSubMatrix.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/MatrixSubMatrix.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixSubMatrix.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixSubMatrix.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixSubMatrix.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixSubMatrix.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.aat", "link" : "smile\/math\/MatrixSubMatrix.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.ata", "link" : "smile\/math\/MatrixSubMatrix.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.transpose", "link" : "smile\/math\/MatrixSubMatrix.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/MatrixSubMatrix.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixSubMatrix.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixSubMatrix.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/MatrixSubMatrix.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/MatrixSubMatrix.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/MatrixSubMatrix.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.set", "link" : "smile\/math\/MatrixSubMatrix.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "fill", "tail" : "(arg0: Double): Unit", "member" : "smile.math.matrixExpression2Array.fill", "link" : "smile\/math\/MatrixSubMatrix.html#fill(x$1:Double):Unit", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.data", "link" : "smile\/math\/MatrixSubMatrix.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbtmm", "link" : "smile\/math\/MatrixSubMatrix.html#atbtmm(x$1:B):A", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbmm", "link" : "smile\/math\/MatrixSubMatrix.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abtmm", "link" : "smile\/math\/MatrixSubMatrix.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abmm", "link" : "smile\/math\/MatrixSubMatrix.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.ax", "link" : "smile\/math\/MatrixSubMatrix.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/MatrixSubMatrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixSubMatrix) => Boolean, msg: => Any): MatrixSubMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixSubMatrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixSubMatrix) => Boolean): MatrixSubMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixSubMatrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): MatrixSubMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixSubMatrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): MatrixSubMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixSubMatrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (MatrixSubMatrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/MatrixSubMatrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (MatrixSubMatrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/MatrixSubMatrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.MatrixSubMatrix.toMatrix", "link" : "smile\/math\/MatrixSubMatrix.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.MatrixSubMatrix.apply", "link" : "smile\/math\/MatrixSubMatrix.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.MatrixSubMatrix.ncols", "link" : "smile\/math\/MatrixSubMatrix.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.MatrixSubMatrix.nrows", "link" : "smile\/math\/MatrixSubMatrix.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.MatrixSubMatrix#<init>", "error" : "unsupported entity"}, {"label" : "B", "tail" : ": MatrixExpression", "member" : "smile.math.MatrixSubMatrix.B", "link" : "smile\/math\/MatrixSubMatrix.html#B:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.MatrixSubMatrix.A", "link" : "smile\/math\/MatrixSubMatrix.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/MatrixSubMatrix.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/MatrixSubMatrix.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixSubMatrix.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/MatrixSubMatrix.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/MatrixSubMatrix.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/MatrixSubMatrix.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixSubMatrix.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/MatrixSubMatrix.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/MatrixSubMatrix.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixSubMatrix.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/MatrixSubMatrix.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/MatrixSubMatrix.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/MatrixSubMatrix.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/MatrixSubMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/MatrixSubMatrix.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/MatrixSubMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/MatrixSubMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/MatrixSubMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/MatrixSubMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/MatrixSubMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixSubMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixSubMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixSubMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/MatrixSubMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/MatrixSubMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/MatrixSubMatrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/MatrixSubMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/MatrixSubMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/MatrixSubMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/MatrixSubMatrix.html", "kind" : "case class"}, {"name" : "smile.math.MatrixSubValue", "shortDescription" : "", "members_case class" : [{"label" : "toArray", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.matrixExpression2Array.toArray", "link" : "smile\/math\/MatrixSubValue.html#toArray():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.sum", "link" : "smile\/math\/MatrixSubValue.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/MatrixSubValue.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixSubValue.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixSubValue.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixSubValue.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixSubValue.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixSubValue.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixSubValue.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixSubValue.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixSubValue.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixSubValue.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixSubValue.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixSubValue.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixSubValue.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixSubValue.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixSubValue.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixSubValue.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixSubValue.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSds", "link" : "smile\/math\/MatrixSubValue.html#colSds():Array[Double]", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colMeans", "link" : "smile\/math\/MatrixSubValue.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSums", "link" : "smile\/math\/MatrixSubValue.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSds", "link" : "smile\/math\/MatrixSubValue.html#rowSds():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowMeans", "link" : "smile\/math\/MatrixSubValue.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSums", "link" : "smile\/math\/MatrixSubValue.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.matrixExpression2Array.xax", "link" : "smile\/math\/MatrixSubValue.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normFro", "link" : "smile\/math\/MatrixSubValue.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normInf", "link" : "smile\/math\/MatrixSubValue.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm", "link" : "smile\/math\/MatrixSubValue.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm2", "link" : "smile\/math\/MatrixSubValue.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm1", "link" : "smile\/math\/MatrixSubValue.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/MatrixSubValue.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/MatrixSubValue.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(arg0: Array[Double], arg1: Array[Double]): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/MatrixSubValue.html#scale(x$1:Array[Double],x$2:Array[Double]):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/MatrixSubValue.html#scale():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/MatrixSubValue.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixSubValue.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixSubValue.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/MatrixSubValue.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/MatrixSubValue.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/MatrixSubValue.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "submat", "tail" : "(arg0: Int, arg1: Int, arg2: Int, arg3: Int): DenseMatrix", "member" : "smile.math.matrixExpression2Array.submat", "link" : "smile\/math\/MatrixSubValue.html#submat(x$1:Int,x$2:Int,x$3:Int,x$4:Int):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.update", "link" : "smile\/math\/MatrixSubValue.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.matrixExpression2Array.ld", "link" : "smile\/math\/MatrixSubValue.html#ld():Int", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixSubValue.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixSubValue.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixSubValue.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixSubValue.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/MatrixSubValue.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/MatrixSubValue.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atx", "link" : "smile\/math\/MatrixSubValue.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/MatrixSubValue.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/MatrixSubValue.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.trace", "link" : "smile\/math\/MatrixSubValue.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.diag", "link" : "smile\/math\/MatrixSubValue.html#diag():Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.matrixExpression2Array.get", "link" : "smile\/math\/MatrixSubValue.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/MatrixSubValue.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/MatrixSubValue.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixSubValue.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixSubValue.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixSubValue.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixSubValue.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.aat", "link" : "smile\/math\/MatrixSubValue.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.ata", "link" : "smile\/math\/MatrixSubValue.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.transpose", "link" : "smile\/math\/MatrixSubValue.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/MatrixSubValue.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixSubValue.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixSubValue.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/MatrixSubValue.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/MatrixSubValue.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/MatrixSubValue.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.set", "link" : "smile\/math\/MatrixSubValue.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "fill", "tail" : "(arg0: Double): Unit", "member" : "smile.math.matrixExpression2Array.fill", "link" : "smile\/math\/MatrixSubValue.html#fill(x$1:Double):Unit", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.data", "link" : "smile\/math\/MatrixSubValue.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbtmm", "link" : "smile\/math\/MatrixSubValue.html#atbtmm(x$1:B):A", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbmm", "link" : "smile\/math\/MatrixSubValue.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abtmm", "link" : "smile\/math\/MatrixSubValue.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abmm", "link" : "smile\/math\/MatrixSubValue.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.ax", "link" : "smile\/math\/MatrixSubValue.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/MatrixSubValue.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixSubValue) => Boolean, msg: => Any): MatrixSubValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixSubValue.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixSubValue) => Boolean): MatrixSubValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixSubValue.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): MatrixSubValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixSubValue.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): MatrixSubValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixSubValue.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (MatrixSubValue, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/MatrixSubValue.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (MatrixSubValue, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/MatrixSubValue.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.MatrixSubValue.toMatrix", "link" : "smile\/math\/MatrixSubValue.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.MatrixSubValue.apply", "link" : "smile\/math\/MatrixSubValue.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.MatrixSubValue.ncols", "link" : "smile\/math\/MatrixSubValue.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.MatrixSubValue.nrows", "link" : "smile\/math\/MatrixSubValue.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.MatrixSubValue#<init>", "error" : "unsupported entity"}, {"label" : "y", "tail" : ": Double", "member" : "smile.math.MatrixSubValue.y", "link" : "smile\/math\/MatrixSubValue.html#y:Double", "kind" : "val"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.MatrixSubValue.A", "link" : "smile\/math\/MatrixSubValue.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/MatrixSubValue.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/MatrixSubValue.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixSubValue.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/MatrixSubValue.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/MatrixSubValue.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/MatrixSubValue.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixSubValue.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/MatrixSubValue.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/MatrixSubValue.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixSubValue.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/MatrixSubValue.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/MatrixSubValue.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/MatrixSubValue.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/MatrixSubValue.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/MatrixSubValue.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/MatrixSubValue.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/MatrixSubValue.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/MatrixSubValue.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/MatrixSubValue.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/MatrixSubValue.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixSubValue.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixSubValue.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixSubValue.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/MatrixSubValue.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/MatrixSubValue.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/MatrixSubValue.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/MatrixSubValue.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/MatrixSubValue.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/MatrixSubValue.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/MatrixSubValue.html", "kind" : "case class"}, {"name" : "smile.math.MatrixTranspose", "shortDescription" : "", "members_case class" : [{"label" : "toArray", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.matrixExpression2Array.toArray", "link" : "smile\/math\/MatrixTranspose.html#toArray():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.sum", "link" : "smile\/math\/MatrixTranspose.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/MatrixTranspose.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixTranspose.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixTranspose.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixTranspose.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixTranspose.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixTranspose.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixTranspose.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixTranspose.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixTranspose.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixTranspose.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixTranspose.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixTranspose.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixTranspose.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixTranspose.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixTranspose.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixTranspose.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixTranspose.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSds", "link" : "smile\/math\/MatrixTranspose.html#colSds():Array[Double]", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colMeans", "link" : "smile\/math\/MatrixTranspose.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSums", "link" : "smile\/math\/MatrixTranspose.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSds", "link" : "smile\/math\/MatrixTranspose.html#rowSds():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowMeans", "link" : "smile\/math\/MatrixTranspose.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSums", "link" : "smile\/math\/MatrixTranspose.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.matrixExpression2Array.xax", "link" : "smile\/math\/MatrixTranspose.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normFro", "link" : "smile\/math\/MatrixTranspose.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normInf", "link" : "smile\/math\/MatrixTranspose.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm", "link" : "smile\/math\/MatrixTranspose.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm2", "link" : "smile\/math\/MatrixTranspose.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm1", "link" : "smile\/math\/MatrixTranspose.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/MatrixTranspose.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/MatrixTranspose.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(arg0: Array[Double], arg1: Array[Double]): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/MatrixTranspose.html#scale(x$1:Array[Double],x$2:Array[Double]):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/MatrixTranspose.html#scale():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/MatrixTranspose.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixTranspose.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixTranspose.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/MatrixTranspose.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/MatrixTranspose.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/MatrixTranspose.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "submat", "tail" : "(arg0: Int, arg1: Int, arg2: Int, arg3: Int): DenseMatrix", "member" : "smile.math.matrixExpression2Array.submat", "link" : "smile\/math\/MatrixTranspose.html#submat(x$1:Int,x$2:Int,x$3:Int,x$4:Int):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.update", "link" : "smile\/math\/MatrixTranspose.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.matrixExpression2Array.ld", "link" : "smile\/math\/MatrixTranspose.html#ld():Int", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixTranspose.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixTranspose.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixTranspose.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixTranspose.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/MatrixTranspose.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/MatrixTranspose.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atx", "link" : "smile\/math\/MatrixTranspose.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/MatrixTranspose.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/MatrixTranspose.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.trace", "link" : "smile\/math\/MatrixTranspose.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.diag", "link" : "smile\/math\/MatrixTranspose.html#diag():Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.matrixExpression2Array.get", "link" : "smile\/math\/MatrixTranspose.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/MatrixTranspose.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/MatrixTranspose.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/MatrixTranspose.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/MatrixTranspose.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/MatrixTranspose.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/MatrixTranspose.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.aat", "link" : "smile\/math\/MatrixTranspose.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.ata", "link" : "smile\/math\/MatrixTranspose.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.transpose", "link" : "smile\/math\/MatrixTranspose.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/MatrixTranspose.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/MatrixTranspose.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/MatrixTranspose.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/MatrixTranspose.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/MatrixTranspose.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/MatrixTranspose.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.set", "link" : "smile\/math\/MatrixTranspose.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "fill", "tail" : "(arg0: Double): Unit", "member" : "smile.math.matrixExpression2Array.fill", "link" : "smile\/math\/MatrixTranspose.html#fill(x$1:Double):Unit", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.data", "link" : "smile\/math\/MatrixTranspose.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbtmm", "link" : "smile\/math\/MatrixTranspose.html#atbtmm(x$1:B):A", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbmm", "link" : "smile\/math\/MatrixTranspose.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abtmm", "link" : "smile\/math\/MatrixTranspose.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abmm", "link" : "smile\/math\/MatrixTranspose.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.ax", "link" : "smile\/math\/MatrixTranspose.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/MatrixTranspose.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixTranspose) => Boolean, msg: => Any): MatrixTranspose", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixTranspose.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixTranspose) => Boolean): MatrixTranspose", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixTranspose.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): MatrixTranspose", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixTranspose.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): MatrixTranspose", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/MatrixTranspose.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (MatrixTranspose, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/MatrixTranspose.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (MatrixTranspose, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/MatrixTranspose.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : "(): DenseMatrix", "member" : "smile.math.MatrixTranspose.toMatrix", "link" : "smile\/math\/MatrixTranspose.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.MatrixTranspose.apply", "link" : "smile\/math\/MatrixTranspose.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.MatrixTranspose.ncols", "link" : "smile\/math\/MatrixTranspose.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.MatrixTranspose.nrows", "link" : "smile\/math\/MatrixTranspose.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.MatrixTranspose#<init>", "error" : "unsupported entity"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.MatrixTranspose.A", "link" : "smile\/math\/MatrixTranspose.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/MatrixTranspose.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/MatrixTranspose.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixTranspose.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/MatrixTranspose.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/MatrixTranspose.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/MatrixTranspose.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixTranspose.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/MatrixTranspose.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/MatrixTranspose.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/MatrixTranspose.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/MatrixTranspose.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/MatrixTranspose.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/MatrixTranspose.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/MatrixTranspose.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/MatrixTranspose.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/MatrixTranspose.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/MatrixTranspose.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/MatrixTranspose.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/MatrixTranspose.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/MatrixTranspose.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixTranspose.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixTranspose.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/MatrixTranspose.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/MatrixTranspose.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/MatrixTranspose.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/MatrixTranspose.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/MatrixTranspose.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/MatrixTranspose.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/MatrixTranspose.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/MatrixTranspose.html", "kind" : "case class"}, {"name" : "smile.math.RoundMatrix", "shortDescription" : "", "members_case class" : [{"label" : "toArray", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.matrixExpression2Array.toArray", "link" : "smile\/math\/RoundMatrix.html#toArray():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.sum", "link" : "smile\/math\/RoundMatrix.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/RoundMatrix.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/RoundMatrix.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/RoundMatrix.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/RoundMatrix.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/RoundMatrix.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/RoundMatrix.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/RoundMatrix.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/RoundMatrix.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/RoundMatrix.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/RoundMatrix.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/RoundMatrix.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/RoundMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/RoundMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/RoundMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/RoundMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/RoundMatrix.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/RoundMatrix.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSds", "link" : "smile\/math\/RoundMatrix.html#colSds():Array[Double]", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colMeans", "link" : "smile\/math\/RoundMatrix.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSums", "link" : "smile\/math\/RoundMatrix.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSds", "link" : "smile\/math\/RoundMatrix.html#rowSds():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowMeans", "link" : "smile\/math\/RoundMatrix.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSums", "link" : "smile\/math\/RoundMatrix.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.matrixExpression2Array.xax", "link" : "smile\/math\/RoundMatrix.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normFro", "link" : "smile\/math\/RoundMatrix.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normInf", "link" : "smile\/math\/RoundMatrix.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm", "link" : "smile\/math\/RoundMatrix.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm2", "link" : "smile\/math\/RoundMatrix.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm1", "link" : "smile\/math\/RoundMatrix.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/RoundMatrix.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/RoundMatrix.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(arg0: Array[Double], arg1: Array[Double]): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/RoundMatrix.html#scale(x$1:Array[Double],x$2:Array[Double]):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/RoundMatrix.html#scale():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/RoundMatrix.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/RoundMatrix.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/RoundMatrix.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/RoundMatrix.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/RoundMatrix.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/RoundMatrix.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "submat", "tail" : "(arg0: Int, arg1: Int, arg2: Int, arg3: Int): DenseMatrix", "member" : "smile.math.matrixExpression2Array.submat", "link" : "smile\/math\/RoundMatrix.html#submat(x$1:Int,x$2:Int,x$3:Int,x$4:Int):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.update", "link" : "smile\/math\/RoundMatrix.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.matrixExpression2Array.ld", "link" : "smile\/math\/RoundMatrix.html#ld():Int", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/RoundMatrix.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/RoundMatrix.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/RoundMatrix.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/RoundMatrix.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/RoundMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/RoundMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atx", "link" : "smile\/math\/RoundMatrix.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/RoundMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/RoundMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.trace", "link" : "smile\/math\/RoundMatrix.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.diag", "link" : "smile\/math\/RoundMatrix.html#diag():Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.matrixExpression2Array.get", "link" : "smile\/math\/RoundMatrix.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/RoundMatrix.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/RoundMatrix.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/RoundMatrix.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/RoundMatrix.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/RoundMatrix.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/RoundMatrix.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.aat", "link" : "smile\/math\/RoundMatrix.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.ata", "link" : "smile\/math\/RoundMatrix.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.transpose", "link" : "smile\/math\/RoundMatrix.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/RoundMatrix.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/RoundMatrix.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/RoundMatrix.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/RoundMatrix.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/RoundMatrix.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/RoundMatrix.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.set", "link" : "smile\/math\/RoundMatrix.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "fill", "tail" : "(arg0: Double): Unit", "member" : "smile.math.matrixExpression2Array.fill", "link" : "smile\/math\/RoundMatrix.html#fill(x$1:Double):Unit", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.data", "link" : "smile\/math\/RoundMatrix.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbtmm", "link" : "smile\/math\/RoundMatrix.html#atbtmm(x$1:B):A", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbmm", "link" : "smile\/math\/RoundMatrix.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abtmm", "link" : "smile\/math\/RoundMatrix.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abmm", "link" : "smile\/math\/RoundMatrix.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.ax", "link" : "smile\/math\/RoundMatrix.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/RoundMatrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (RoundMatrix) => Boolean, msg: => Any): RoundMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/RoundMatrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (RoundMatrix) => Boolean): RoundMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/RoundMatrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): RoundMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/RoundMatrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): RoundMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/RoundMatrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (RoundMatrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/RoundMatrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (RoundMatrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/RoundMatrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.RoundMatrix.toMatrix", "link" : "smile\/math\/RoundMatrix.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.RoundMatrix.apply", "link" : "smile\/math\/RoundMatrix.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.RoundMatrix.ncols", "link" : "smile\/math\/RoundMatrix.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.RoundMatrix.nrows", "link" : "smile\/math\/RoundMatrix.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.RoundMatrix#<init>", "error" : "unsupported entity"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.RoundMatrix.A", "link" : "smile\/math\/RoundMatrix.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/RoundMatrix.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/RoundMatrix.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/RoundMatrix.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/RoundMatrix.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/RoundMatrix.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/RoundMatrix.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/RoundMatrix.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/RoundMatrix.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/RoundMatrix.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/RoundMatrix.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/RoundMatrix.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/RoundMatrix.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/RoundMatrix.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/RoundMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/RoundMatrix.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/RoundMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/RoundMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/RoundMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/RoundMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/RoundMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/RoundMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/RoundMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/RoundMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/RoundMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/RoundMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/RoundMatrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/RoundMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/RoundMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/RoundMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/RoundMatrix.html", "kind" : "case class"}, {"name" : "smile.math.RoundVector", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.vectorExpression2Array.update", "link" : "smile\/math\/RoundVector.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/RoundVector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (RoundVector) => Boolean, msg: => Any): RoundVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/RoundVector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (RoundVector) => Boolean): RoundVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/RoundVector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): RoundVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/RoundVector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): RoundVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/RoundVector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (RoundVector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/RoundVector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (RoundVector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/RoundVector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.RoundVector.toArray", "link" : "smile\/math\/RoundVector.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.RoundVector.apply", "link" : "smile\/math\/RoundVector.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.RoundVector.length", "link" : "smile\/math\/RoundVector.html#length:Int", "kind" : "def"}, {"member" : "smile.math.RoundVector#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.RoundVector.x", "link" : "smile\/math\/RoundVector.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/RoundVector.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/RoundVector.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/RoundVector.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/RoundVector.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/RoundVector.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/RoundVector.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/RoundVector.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/RoundVector.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/RoundVector.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/RoundVector.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/RoundVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/RoundVector.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/RoundVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/RoundVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/RoundVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/RoundVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/RoundVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/RoundVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/RoundVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/RoundVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/RoundVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/RoundVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/RoundVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/RoundVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/RoundVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/RoundVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/RoundVector.html", "kind" : "case class"}, {"name" : "smile.math.SinMatrix", "shortDescription" : "", "members_case class" : [{"label" : "toArray", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.matrixExpression2Array.toArray", "link" : "smile\/math\/SinMatrix.html#toArray():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.sum", "link" : "smile\/math\/SinMatrix.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/SinMatrix.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/SinMatrix.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/SinMatrix.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/SinMatrix.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/SinMatrix.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/SinMatrix.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/SinMatrix.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/SinMatrix.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/SinMatrix.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/SinMatrix.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/SinMatrix.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/SinMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/SinMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/SinMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/SinMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/SinMatrix.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/SinMatrix.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSds", "link" : "smile\/math\/SinMatrix.html#colSds():Array[Double]", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colMeans", "link" : "smile\/math\/SinMatrix.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSums", "link" : "smile\/math\/SinMatrix.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSds", "link" : "smile\/math\/SinMatrix.html#rowSds():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowMeans", "link" : "smile\/math\/SinMatrix.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSums", "link" : "smile\/math\/SinMatrix.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.matrixExpression2Array.xax", "link" : "smile\/math\/SinMatrix.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normFro", "link" : "smile\/math\/SinMatrix.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normInf", "link" : "smile\/math\/SinMatrix.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm", "link" : "smile\/math\/SinMatrix.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm2", "link" : "smile\/math\/SinMatrix.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm1", "link" : "smile\/math\/SinMatrix.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/SinMatrix.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/SinMatrix.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(arg0: Array[Double], arg1: Array[Double]): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/SinMatrix.html#scale(x$1:Array[Double],x$2:Array[Double]):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/SinMatrix.html#scale():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/SinMatrix.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/SinMatrix.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/SinMatrix.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/SinMatrix.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/SinMatrix.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/SinMatrix.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "submat", "tail" : "(arg0: Int, arg1: Int, arg2: Int, arg3: Int): DenseMatrix", "member" : "smile.math.matrixExpression2Array.submat", "link" : "smile\/math\/SinMatrix.html#submat(x$1:Int,x$2:Int,x$3:Int,x$4:Int):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.update", "link" : "smile\/math\/SinMatrix.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.matrixExpression2Array.ld", "link" : "smile\/math\/SinMatrix.html#ld():Int", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/SinMatrix.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/SinMatrix.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/SinMatrix.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/SinMatrix.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/SinMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/SinMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atx", "link" : "smile\/math\/SinMatrix.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/SinMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/SinMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.trace", "link" : "smile\/math\/SinMatrix.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.diag", "link" : "smile\/math\/SinMatrix.html#diag():Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.matrixExpression2Array.get", "link" : "smile\/math\/SinMatrix.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/SinMatrix.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/SinMatrix.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/SinMatrix.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/SinMatrix.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/SinMatrix.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/SinMatrix.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.aat", "link" : "smile\/math\/SinMatrix.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.ata", "link" : "smile\/math\/SinMatrix.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.transpose", "link" : "smile\/math\/SinMatrix.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/SinMatrix.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/SinMatrix.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/SinMatrix.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/SinMatrix.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/SinMatrix.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/SinMatrix.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.set", "link" : "smile\/math\/SinMatrix.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "fill", "tail" : "(arg0: Double): Unit", "member" : "smile.math.matrixExpression2Array.fill", "link" : "smile\/math\/SinMatrix.html#fill(x$1:Double):Unit", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.data", "link" : "smile\/math\/SinMatrix.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbtmm", "link" : "smile\/math\/SinMatrix.html#atbtmm(x$1:B):A", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbmm", "link" : "smile\/math\/SinMatrix.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abtmm", "link" : "smile\/math\/SinMatrix.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abmm", "link" : "smile\/math\/SinMatrix.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.ax", "link" : "smile\/math\/SinMatrix.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/SinMatrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SinMatrix) => Boolean, msg: => Any): SinMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/SinMatrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SinMatrix) => Boolean): SinMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/SinMatrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): SinMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/SinMatrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): SinMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/SinMatrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (SinMatrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/SinMatrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (SinMatrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/SinMatrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.SinMatrix.toMatrix", "link" : "smile\/math\/SinMatrix.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.SinMatrix.apply", "link" : "smile\/math\/SinMatrix.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.SinMatrix.ncols", "link" : "smile\/math\/SinMatrix.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.SinMatrix.nrows", "link" : "smile\/math\/SinMatrix.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.SinMatrix#<init>", "error" : "unsupported entity"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.SinMatrix.A", "link" : "smile\/math\/SinMatrix.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/SinMatrix.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/SinMatrix.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/SinMatrix.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/SinMatrix.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/SinMatrix.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/SinMatrix.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/SinMatrix.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/SinMatrix.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/SinMatrix.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/SinMatrix.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/SinMatrix.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/SinMatrix.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/SinMatrix.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/SinMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/SinMatrix.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/SinMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/SinMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/SinMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/SinMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/SinMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/SinMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/SinMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/SinMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/SinMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/SinMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/SinMatrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/SinMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/SinMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/SinMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/SinMatrix.html", "kind" : "case class"}, {"name" : "smile.math.SinVector", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.vectorExpression2Array.update", "link" : "smile\/math\/SinVector.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/SinVector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SinVector) => Boolean, msg: => Any): SinVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/SinVector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SinVector) => Boolean): SinVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/SinVector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): SinVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/SinVector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): SinVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/SinVector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (SinVector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/SinVector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (SinVector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/SinVector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.SinVector.toArray", "link" : "smile\/math\/SinVector.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.SinVector.apply", "link" : "smile\/math\/SinVector.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.SinVector.length", "link" : "smile\/math\/SinVector.html#length:Int", "kind" : "def"}, {"member" : "smile.math.SinVector#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.SinVector.x", "link" : "smile\/math\/SinVector.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/SinVector.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/SinVector.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/SinVector.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/SinVector.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/SinVector.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/SinVector.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/SinVector.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/SinVector.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/SinVector.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/SinVector.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/SinVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/SinVector.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/SinVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/SinVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/SinVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/SinVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/SinVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/SinVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/SinVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/SinVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/SinVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/SinVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/SinVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/SinVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/SinVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/SinVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/SinVector.html", "kind" : "case class"}, {"name" : "smile.math.SqrtMatrix", "shortDescription" : "", "members_case class" : [{"label" : "toArray", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.matrixExpression2Array.toArray", "link" : "smile\/math\/SqrtMatrix.html#toArray():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.sum", "link" : "smile\/math\/SqrtMatrix.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/SqrtMatrix.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/SqrtMatrix.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/SqrtMatrix.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/SqrtMatrix.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/SqrtMatrix.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/SqrtMatrix.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/SqrtMatrix.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/SqrtMatrix.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/SqrtMatrix.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/SqrtMatrix.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/SqrtMatrix.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/SqrtMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/SqrtMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/SqrtMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/SqrtMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/SqrtMatrix.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/SqrtMatrix.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSds", "link" : "smile\/math\/SqrtMatrix.html#colSds():Array[Double]", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colMeans", "link" : "smile\/math\/SqrtMatrix.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSums", "link" : "smile\/math\/SqrtMatrix.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSds", "link" : "smile\/math\/SqrtMatrix.html#rowSds():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowMeans", "link" : "smile\/math\/SqrtMatrix.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSums", "link" : "smile\/math\/SqrtMatrix.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.matrixExpression2Array.xax", "link" : "smile\/math\/SqrtMatrix.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normFro", "link" : "smile\/math\/SqrtMatrix.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normInf", "link" : "smile\/math\/SqrtMatrix.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm", "link" : "smile\/math\/SqrtMatrix.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm2", "link" : "smile\/math\/SqrtMatrix.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm1", "link" : "smile\/math\/SqrtMatrix.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/SqrtMatrix.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/SqrtMatrix.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(arg0: Array[Double], arg1: Array[Double]): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/SqrtMatrix.html#scale(x$1:Array[Double],x$2:Array[Double]):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/SqrtMatrix.html#scale():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/SqrtMatrix.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/SqrtMatrix.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/SqrtMatrix.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/SqrtMatrix.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/SqrtMatrix.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/SqrtMatrix.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "submat", "tail" : "(arg0: Int, arg1: Int, arg2: Int, arg3: Int): DenseMatrix", "member" : "smile.math.matrixExpression2Array.submat", "link" : "smile\/math\/SqrtMatrix.html#submat(x$1:Int,x$2:Int,x$3:Int,x$4:Int):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.update", "link" : "smile\/math\/SqrtMatrix.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.matrixExpression2Array.ld", "link" : "smile\/math\/SqrtMatrix.html#ld():Int", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/SqrtMatrix.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/SqrtMatrix.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/SqrtMatrix.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/SqrtMatrix.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/SqrtMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/SqrtMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atx", "link" : "smile\/math\/SqrtMatrix.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/SqrtMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/SqrtMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.trace", "link" : "smile\/math\/SqrtMatrix.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.diag", "link" : "smile\/math\/SqrtMatrix.html#diag():Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.matrixExpression2Array.get", "link" : "smile\/math\/SqrtMatrix.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/SqrtMatrix.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/SqrtMatrix.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/SqrtMatrix.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/SqrtMatrix.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/SqrtMatrix.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/SqrtMatrix.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.aat", "link" : "smile\/math\/SqrtMatrix.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.ata", "link" : "smile\/math\/SqrtMatrix.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.transpose", "link" : "smile\/math\/SqrtMatrix.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/SqrtMatrix.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/SqrtMatrix.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/SqrtMatrix.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/SqrtMatrix.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/SqrtMatrix.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/SqrtMatrix.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.set", "link" : "smile\/math\/SqrtMatrix.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "fill", "tail" : "(arg0: Double): Unit", "member" : "smile.math.matrixExpression2Array.fill", "link" : "smile\/math\/SqrtMatrix.html#fill(x$1:Double):Unit", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.data", "link" : "smile\/math\/SqrtMatrix.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbtmm", "link" : "smile\/math\/SqrtMatrix.html#atbtmm(x$1:B):A", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbmm", "link" : "smile\/math\/SqrtMatrix.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abtmm", "link" : "smile\/math\/SqrtMatrix.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abmm", "link" : "smile\/math\/SqrtMatrix.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.ax", "link" : "smile\/math\/SqrtMatrix.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/SqrtMatrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SqrtMatrix) => Boolean, msg: => Any): SqrtMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/SqrtMatrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SqrtMatrix) => Boolean): SqrtMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/SqrtMatrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): SqrtMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/SqrtMatrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): SqrtMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/SqrtMatrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (SqrtMatrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/SqrtMatrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (SqrtMatrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/SqrtMatrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.SqrtMatrix.toMatrix", "link" : "smile\/math\/SqrtMatrix.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.SqrtMatrix.apply", "link" : "smile\/math\/SqrtMatrix.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.SqrtMatrix.ncols", "link" : "smile\/math\/SqrtMatrix.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.SqrtMatrix.nrows", "link" : "smile\/math\/SqrtMatrix.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.SqrtMatrix#<init>", "error" : "unsupported entity"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.SqrtMatrix.A", "link" : "smile\/math\/SqrtMatrix.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/SqrtMatrix.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/SqrtMatrix.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/SqrtMatrix.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/SqrtMatrix.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/SqrtMatrix.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/SqrtMatrix.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/SqrtMatrix.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/SqrtMatrix.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/SqrtMatrix.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/SqrtMatrix.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/SqrtMatrix.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/SqrtMatrix.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/SqrtMatrix.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/SqrtMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/SqrtMatrix.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/SqrtMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/SqrtMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/SqrtMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/SqrtMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/SqrtMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/SqrtMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/SqrtMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/SqrtMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/SqrtMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/SqrtMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/SqrtMatrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/SqrtMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/SqrtMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/SqrtMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/SqrtMatrix.html", "kind" : "case class"}, {"name" : "smile.math.SqrtVector", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.vectorExpression2Array.update", "link" : "smile\/math\/SqrtVector.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/SqrtVector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SqrtVector) => Boolean, msg: => Any): SqrtVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/SqrtVector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SqrtVector) => Boolean): SqrtVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/SqrtVector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): SqrtVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/SqrtVector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): SqrtVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/SqrtVector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (SqrtVector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/SqrtVector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (SqrtVector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/SqrtVector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.SqrtVector.toArray", "link" : "smile\/math\/SqrtVector.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.SqrtVector.apply", "link" : "smile\/math\/SqrtVector.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.SqrtVector.length", "link" : "smile\/math\/SqrtVector.html#length:Int", "kind" : "def"}, {"member" : "smile.math.SqrtVector#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.SqrtVector.x", "link" : "smile\/math\/SqrtVector.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/SqrtVector.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/SqrtVector.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/SqrtVector.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/SqrtVector.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/SqrtVector.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/SqrtVector.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/SqrtVector.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/SqrtVector.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/SqrtVector.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/SqrtVector.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/SqrtVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/SqrtVector.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/SqrtVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/SqrtVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/SqrtVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/SqrtVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/SqrtVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/SqrtVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/SqrtVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/SqrtVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/SqrtVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/SqrtVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/SqrtVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/SqrtVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/SqrtVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/SqrtVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/SqrtVector.html", "kind" : "case class"}, {"name" : "smile.math.TanhMatrix", "shortDescription" : "", "members_case class" : [{"label" : "toArray", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.matrixExpression2Array.toArray", "link" : "smile\/math\/TanhMatrix.html#toArray():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.sum", "link" : "smile\/math\/TanhMatrix.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/TanhMatrix.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/TanhMatrix.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/TanhMatrix.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/TanhMatrix.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/TanhMatrix.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/TanhMatrix.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/TanhMatrix.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/TanhMatrix.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/TanhMatrix.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/TanhMatrix.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/TanhMatrix.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/TanhMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/TanhMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/TanhMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/TanhMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/TanhMatrix.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/TanhMatrix.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSds", "link" : "smile\/math\/TanhMatrix.html#colSds():Array[Double]", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colMeans", "link" : "smile\/math\/TanhMatrix.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSums", "link" : "smile\/math\/TanhMatrix.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSds", "link" : "smile\/math\/TanhMatrix.html#rowSds():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowMeans", "link" : "smile\/math\/TanhMatrix.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSums", "link" : "smile\/math\/TanhMatrix.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.matrixExpression2Array.xax", "link" : "smile\/math\/TanhMatrix.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normFro", "link" : "smile\/math\/TanhMatrix.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normInf", "link" : "smile\/math\/TanhMatrix.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm", "link" : "smile\/math\/TanhMatrix.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm2", "link" : "smile\/math\/TanhMatrix.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm1", "link" : "smile\/math\/TanhMatrix.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/TanhMatrix.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/TanhMatrix.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(arg0: Array[Double], arg1: Array[Double]): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/TanhMatrix.html#scale(x$1:Array[Double],x$2:Array[Double]):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/TanhMatrix.html#scale():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/TanhMatrix.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/TanhMatrix.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/TanhMatrix.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/TanhMatrix.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/TanhMatrix.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/TanhMatrix.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "submat", "tail" : "(arg0: Int, arg1: Int, arg2: Int, arg3: Int): DenseMatrix", "member" : "smile.math.matrixExpression2Array.submat", "link" : "smile\/math\/TanhMatrix.html#submat(x$1:Int,x$2:Int,x$3:Int,x$4:Int):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.update", "link" : "smile\/math\/TanhMatrix.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.matrixExpression2Array.ld", "link" : "smile\/math\/TanhMatrix.html#ld():Int", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/TanhMatrix.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/TanhMatrix.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/TanhMatrix.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/TanhMatrix.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/TanhMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/TanhMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atx", "link" : "smile\/math\/TanhMatrix.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/TanhMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/TanhMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.trace", "link" : "smile\/math\/TanhMatrix.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.diag", "link" : "smile\/math\/TanhMatrix.html#diag():Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.matrixExpression2Array.get", "link" : "smile\/math\/TanhMatrix.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/TanhMatrix.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/TanhMatrix.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/TanhMatrix.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/TanhMatrix.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/TanhMatrix.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/TanhMatrix.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.aat", "link" : "smile\/math\/TanhMatrix.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.ata", "link" : "smile\/math\/TanhMatrix.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.transpose", "link" : "smile\/math\/TanhMatrix.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/TanhMatrix.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/TanhMatrix.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/TanhMatrix.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/TanhMatrix.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/TanhMatrix.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/TanhMatrix.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.set", "link" : "smile\/math\/TanhMatrix.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "fill", "tail" : "(arg0: Double): Unit", "member" : "smile.math.matrixExpression2Array.fill", "link" : "smile\/math\/TanhMatrix.html#fill(x$1:Double):Unit", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.data", "link" : "smile\/math\/TanhMatrix.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbtmm", "link" : "smile\/math\/TanhMatrix.html#atbtmm(x$1:B):A", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbmm", "link" : "smile\/math\/TanhMatrix.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abtmm", "link" : "smile\/math\/TanhMatrix.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abmm", "link" : "smile\/math\/TanhMatrix.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.ax", "link" : "smile\/math\/TanhMatrix.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/TanhMatrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TanhMatrix) => Boolean, msg: => Any): TanhMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/TanhMatrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TanhMatrix) => Boolean): TanhMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/TanhMatrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): TanhMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/TanhMatrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): TanhMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/TanhMatrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (TanhMatrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/TanhMatrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (TanhMatrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/TanhMatrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.TanhMatrix.toMatrix", "link" : "smile\/math\/TanhMatrix.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.TanhMatrix.apply", "link" : "smile\/math\/TanhMatrix.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.TanhMatrix.ncols", "link" : "smile\/math\/TanhMatrix.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.TanhMatrix.nrows", "link" : "smile\/math\/TanhMatrix.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.TanhMatrix#<init>", "error" : "unsupported entity"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.TanhMatrix.A", "link" : "smile\/math\/TanhMatrix.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/TanhMatrix.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/TanhMatrix.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/TanhMatrix.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/TanhMatrix.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/TanhMatrix.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/TanhMatrix.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/TanhMatrix.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/TanhMatrix.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/TanhMatrix.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/TanhMatrix.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/TanhMatrix.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/TanhMatrix.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/TanhMatrix.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/TanhMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/TanhMatrix.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/TanhMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/TanhMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/TanhMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/TanhMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/TanhMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/TanhMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/TanhMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/TanhMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/TanhMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/TanhMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/TanhMatrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/TanhMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/TanhMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/TanhMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/TanhMatrix.html", "kind" : "case class"}, {"name" : "smile.math.TanhVector", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.vectorExpression2Array.update", "link" : "smile\/math\/TanhVector.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/TanhVector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TanhVector) => Boolean, msg: => Any): TanhVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/TanhVector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TanhVector) => Boolean): TanhVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/TanhVector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): TanhVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/TanhVector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): TanhVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/TanhVector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (TanhVector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/TanhVector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (TanhVector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/TanhVector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.TanhVector.toArray", "link" : "smile\/math\/TanhVector.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.TanhVector.apply", "link" : "smile\/math\/TanhVector.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.TanhVector.length", "link" : "smile\/math\/TanhVector.html#length:Int", "kind" : "def"}, {"member" : "smile.math.TanhVector#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.TanhVector.x", "link" : "smile\/math\/TanhVector.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/TanhVector.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/TanhVector.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/TanhVector.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/TanhVector.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/TanhVector.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/TanhVector.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/TanhVector.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/TanhVector.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/TanhVector.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/TanhVector.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/TanhVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/TanhVector.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/TanhVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/TanhVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/TanhVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/TanhVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/TanhVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/TanhVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/TanhVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/TanhVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/TanhVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/TanhVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/TanhVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/TanhVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/TanhVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/TanhVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/TanhVector.html", "kind" : "case class"}, {"name" : "smile.math.TanMatrix", "shortDescription" : "", "members_case class" : [{"label" : "toArray", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.matrixExpression2Array.toArray", "link" : "smile\/math\/TanMatrix.html#toArray():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.sum", "link" : "smile\/math\/TanMatrix.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/TanMatrix.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/TanMatrix.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/TanMatrix.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/TanMatrix.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/TanMatrix.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/TanMatrix.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/TanMatrix.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/TanMatrix.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/TanMatrix.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/TanMatrix.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/TanMatrix.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/TanMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/TanMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/TanMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/TanMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/TanMatrix.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/TanMatrix.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSds", "link" : "smile\/math\/TanMatrix.html#colSds():Array[Double]", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colMeans", "link" : "smile\/math\/TanMatrix.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSums", "link" : "smile\/math\/TanMatrix.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSds", "link" : "smile\/math\/TanMatrix.html#rowSds():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowMeans", "link" : "smile\/math\/TanMatrix.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSums", "link" : "smile\/math\/TanMatrix.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.matrixExpression2Array.xax", "link" : "smile\/math\/TanMatrix.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normFro", "link" : "smile\/math\/TanMatrix.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normInf", "link" : "smile\/math\/TanMatrix.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm", "link" : "smile\/math\/TanMatrix.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm2", "link" : "smile\/math\/TanMatrix.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm1", "link" : "smile\/math\/TanMatrix.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/TanMatrix.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/TanMatrix.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(arg0: Array[Double], arg1: Array[Double]): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/TanMatrix.html#scale(x$1:Array[Double],x$2:Array[Double]):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/TanMatrix.html#scale():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/TanMatrix.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/TanMatrix.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/TanMatrix.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/TanMatrix.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/TanMatrix.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/TanMatrix.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "submat", "tail" : "(arg0: Int, arg1: Int, arg2: Int, arg3: Int): DenseMatrix", "member" : "smile.math.matrixExpression2Array.submat", "link" : "smile\/math\/TanMatrix.html#submat(x$1:Int,x$2:Int,x$3:Int,x$4:Int):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.update", "link" : "smile\/math\/TanMatrix.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.matrixExpression2Array.ld", "link" : "smile\/math\/TanMatrix.html#ld():Int", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/TanMatrix.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/TanMatrix.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/TanMatrix.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/TanMatrix.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/TanMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/TanMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atx", "link" : "smile\/math\/TanMatrix.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/TanMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/TanMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.trace", "link" : "smile\/math\/TanMatrix.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.diag", "link" : "smile\/math\/TanMatrix.html#diag():Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.matrixExpression2Array.get", "link" : "smile\/math\/TanMatrix.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/TanMatrix.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/TanMatrix.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/TanMatrix.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/TanMatrix.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/TanMatrix.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/TanMatrix.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.aat", "link" : "smile\/math\/TanMatrix.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.ata", "link" : "smile\/math\/TanMatrix.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.transpose", "link" : "smile\/math\/TanMatrix.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/TanMatrix.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/TanMatrix.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/TanMatrix.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/TanMatrix.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/TanMatrix.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/TanMatrix.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.set", "link" : "smile\/math\/TanMatrix.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "fill", "tail" : "(arg0: Double): Unit", "member" : "smile.math.matrixExpression2Array.fill", "link" : "smile\/math\/TanMatrix.html#fill(x$1:Double):Unit", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.data", "link" : "smile\/math\/TanMatrix.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbtmm", "link" : "smile\/math\/TanMatrix.html#atbtmm(x$1:B):A", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbmm", "link" : "smile\/math\/TanMatrix.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abtmm", "link" : "smile\/math\/TanMatrix.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abmm", "link" : "smile\/math\/TanMatrix.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.ax", "link" : "smile\/math\/TanMatrix.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/TanMatrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TanMatrix) => Boolean, msg: => Any): TanMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/TanMatrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TanMatrix) => Boolean): TanMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/TanMatrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): TanMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/TanMatrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): TanMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/TanMatrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (TanMatrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/TanMatrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (TanMatrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/TanMatrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.TanMatrix.toMatrix", "link" : "smile\/math\/TanMatrix.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.TanMatrix.apply", "link" : "smile\/math\/TanMatrix.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.TanMatrix.ncols", "link" : "smile\/math\/TanMatrix.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.TanMatrix.nrows", "link" : "smile\/math\/TanMatrix.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.TanMatrix#<init>", "error" : "unsupported entity"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.TanMatrix.A", "link" : "smile\/math\/TanMatrix.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/TanMatrix.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/TanMatrix.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/TanMatrix.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/TanMatrix.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/TanMatrix.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/TanMatrix.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/TanMatrix.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/TanMatrix.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/TanMatrix.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/TanMatrix.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/TanMatrix.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/TanMatrix.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/TanMatrix.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/TanMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/TanMatrix.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/TanMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/TanMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/TanMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/TanMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/TanMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/TanMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/TanMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/TanMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/TanMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/TanMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/TanMatrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/TanMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/TanMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/TanMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/TanMatrix.html", "kind" : "case class"}, {"name" : "smile.math.TanVector", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.vectorExpression2Array.update", "link" : "smile\/math\/TanVector.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/TanVector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TanVector) => Boolean, msg: => Any): TanVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/TanVector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TanVector) => Boolean): TanVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/TanVector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): TanVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/TanVector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): TanVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/TanVector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (TanVector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/TanVector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (TanVector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/TanVector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.TanVector.toArray", "link" : "smile\/math\/TanVector.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.TanVector.apply", "link" : "smile\/math\/TanVector.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.TanVector.length", "link" : "smile\/math\/TanVector.html#length:Int", "kind" : "def"}, {"member" : "smile.math.TanVector#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.TanVector.x", "link" : "smile\/math\/TanVector.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/TanVector.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/TanVector.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/TanVector.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/TanVector.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/TanVector.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/TanVector.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/TanVector.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/TanVector.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/TanVector.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/TanVector.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/TanVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/TanVector.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/TanVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/TanVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/TanVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/TanVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/TanVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/TanVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/TanVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/TanVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/TanVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/TanVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/TanVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/TanVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/TanVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/TanVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/TanVector.html", "kind" : "case class"}, {"name" : "smile.math.ValueAddMatrix", "shortDescription" : "", "members_case class" : [{"label" : "toArray", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.matrixExpression2Array.toArray", "link" : "smile\/math\/ValueAddMatrix.html#toArray():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.sum", "link" : "smile\/math\/ValueAddMatrix.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/ValueAddMatrix.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/ValueAddMatrix.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/ValueAddMatrix.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/ValueAddMatrix.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/ValueAddMatrix.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/ValueAddMatrix.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/ValueAddMatrix.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/ValueAddMatrix.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/ValueAddMatrix.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/ValueAddMatrix.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/ValueAddMatrix.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/ValueAddMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/ValueAddMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/ValueAddMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/ValueAddMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/ValueAddMatrix.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/ValueAddMatrix.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSds", "link" : "smile\/math\/ValueAddMatrix.html#colSds():Array[Double]", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colMeans", "link" : "smile\/math\/ValueAddMatrix.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSums", "link" : "smile\/math\/ValueAddMatrix.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSds", "link" : "smile\/math\/ValueAddMatrix.html#rowSds():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowMeans", "link" : "smile\/math\/ValueAddMatrix.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSums", "link" : "smile\/math\/ValueAddMatrix.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.matrixExpression2Array.xax", "link" : "smile\/math\/ValueAddMatrix.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normFro", "link" : "smile\/math\/ValueAddMatrix.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normInf", "link" : "smile\/math\/ValueAddMatrix.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm", "link" : "smile\/math\/ValueAddMatrix.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm2", "link" : "smile\/math\/ValueAddMatrix.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm1", "link" : "smile\/math\/ValueAddMatrix.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/ValueAddMatrix.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/ValueAddMatrix.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(arg0: Array[Double], arg1: Array[Double]): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/ValueAddMatrix.html#scale(x$1:Array[Double],x$2:Array[Double]):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/ValueAddMatrix.html#scale():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/ValueAddMatrix.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/ValueAddMatrix.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/ValueAddMatrix.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/ValueAddMatrix.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/ValueAddMatrix.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/ValueAddMatrix.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "submat", "tail" : "(arg0: Int, arg1: Int, arg2: Int, arg3: Int): DenseMatrix", "member" : "smile.math.matrixExpression2Array.submat", "link" : "smile\/math\/ValueAddMatrix.html#submat(x$1:Int,x$2:Int,x$3:Int,x$4:Int):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.update", "link" : "smile\/math\/ValueAddMatrix.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.matrixExpression2Array.ld", "link" : "smile\/math\/ValueAddMatrix.html#ld():Int", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/ValueAddMatrix.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/ValueAddMatrix.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/ValueAddMatrix.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/ValueAddMatrix.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/ValueAddMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/ValueAddMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atx", "link" : "smile\/math\/ValueAddMatrix.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/ValueAddMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/ValueAddMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.trace", "link" : "smile\/math\/ValueAddMatrix.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.diag", "link" : "smile\/math\/ValueAddMatrix.html#diag():Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.matrixExpression2Array.get", "link" : "smile\/math\/ValueAddMatrix.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/ValueAddMatrix.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/ValueAddMatrix.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/ValueAddMatrix.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/ValueAddMatrix.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/ValueAddMatrix.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/ValueAddMatrix.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.aat", "link" : "smile\/math\/ValueAddMatrix.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.ata", "link" : "smile\/math\/ValueAddMatrix.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.transpose", "link" : "smile\/math\/ValueAddMatrix.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/ValueAddMatrix.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/ValueAddMatrix.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/ValueAddMatrix.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/ValueAddMatrix.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/ValueAddMatrix.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/ValueAddMatrix.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.set", "link" : "smile\/math\/ValueAddMatrix.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "fill", "tail" : "(arg0: Double): Unit", "member" : "smile.math.matrixExpression2Array.fill", "link" : "smile\/math\/ValueAddMatrix.html#fill(x$1:Double):Unit", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.data", "link" : "smile\/math\/ValueAddMatrix.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbtmm", "link" : "smile\/math\/ValueAddMatrix.html#atbtmm(x$1:B):A", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbmm", "link" : "smile\/math\/ValueAddMatrix.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abtmm", "link" : "smile\/math\/ValueAddMatrix.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abmm", "link" : "smile\/math\/ValueAddMatrix.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.ax", "link" : "smile\/math\/ValueAddMatrix.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/ValueAddMatrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ValueAddMatrix) => Boolean, msg: => Any): ValueAddMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueAddMatrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ValueAddMatrix) => Boolean): ValueAddMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueAddMatrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): ValueAddMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueAddMatrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ValueAddMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueAddMatrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ValueAddMatrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/ValueAddMatrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ValueAddMatrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/ValueAddMatrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.ValueAddMatrix.toMatrix", "link" : "smile\/math\/ValueAddMatrix.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.ValueAddMatrix.apply", "link" : "smile\/math\/ValueAddMatrix.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.ValueAddMatrix.ncols", "link" : "smile\/math\/ValueAddMatrix.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.ValueAddMatrix.nrows", "link" : "smile\/math\/ValueAddMatrix.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.ValueAddMatrix#<init>", "error" : "unsupported entity"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.ValueAddMatrix.A", "link" : "smile\/math\/ValueAddMatrix.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "y", "tail" : ": Double", "member" : "smile.math.ValueAddMatrix.y", "link" : "smile\/math\/ValueAddMatrix.html#y:Double", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/ValueAddMatrix.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/ValueAddMatrix.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/ValueAddMatrix.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/ValueAddMatrix.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/ValueAddMatrix.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/ValueAddMatrix.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/ValueAddMatrix.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/ValueAddMatrix.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/ValueAddMatrix.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/ValueAddMatrix.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/ValueAddMatrix.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/ValueAddMatrix.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/ValueAddMatrix.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/ValueAddMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/ValueAddMatrix.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/ValueAddMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/ValueAddMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/ValueAddMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/ValueAddMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/ValueAddMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ValueAddMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ValueAddMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ValueAddMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/ValueAddMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/ValueAddMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/ValueAddMatrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/ValueAddMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/ValueAddMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/ValueAddMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/ValueAddMatrix.html", "kind" : "case class"}, {"name" : "smile.math.ValueAddVector", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.vectorExpression2Array.update", "link" : "smile\/math\/ValueAddVector.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/ValueAddVector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ValueAddVector) => Boolean, msg: => Any): ValueAddVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueAddVector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ValueAddVector) => Boolean): ValueAddVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueAddVector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): ValueAddVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueAddVector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ValueAddVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueAddVector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ValueAddVector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/ValueAddVector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ValueAddVector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/ValueAddVector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.ValueAddVector.toArray", "link" : "smile\/math\/ValueAddVector.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.ValueAddVector.apply", "link" : "smile\/math\/ValueAddVector.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.ValueAddVector.length", "link" : "smile\/math\/ValueAddVector.html#length:Int", "kind" : "def"}, {"member" : "smile.math.ValueAddVector#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.ValueAddVector.x", "link" : "smile\/math\/ValueAddVector.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "y", "tail" : ": Double", "member" : "smile.math.ValueAddVector.y", "link" : "smile\/math\/ValueAddVector.html#y:Double", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/ValueAddVector.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/ValueAddVector.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/ValueAddVector.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/ValueAddVector.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/ValueAddVector.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/ValueAddVector.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/ValueAddVector.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/ValueAddVector.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/ValueAddVector.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/ValueAddVector.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/ValueAddVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/ValueAddVector.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/ValueAddVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/ValueAddVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/ValueAddVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/ValueAddVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/ValueAddVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ValueAddVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ValueAddVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ValueAddVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/ValueAddVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/ValueAddVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/ValueAddVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/ValueAddVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/ValueAddVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/ValueAddVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/ValueAddVector.html", "kind" : "case class"}, {"name" : "smile.math.ValueDivMatrix", "shortDescription" : "", "members_case class" : [{"label" : "toArray", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.matrixExpression2Array.toArray", "link" : "smile\/math\/ValueDivMatrix.html#toArray():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.sum", "link" : "smile\/math\/ValueDivMatrix.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/ValueDivMatrix.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/ValueDivMatrix.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/ValueDivMatrix.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/ValueDivMatrix.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/ValueDivMatrix.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/ValueDivMatrix.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/ValueDivMatrix.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/ValueDivMatrix.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/ValueDivMatrix.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/ValueDivMatrix.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/ValueDivMatrix.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/ValueDivMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/ValueDivMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/ValueDivMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/ValueDivMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/ValueDivMatrix.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/ValueDivMatrix.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSds", "link" : "smile\/math\/ValueDivMatrix.html#colSds():Array[Double]", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colMeans", "link" : "smile\/math\/ValueDivMatrix.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSums", "link" : "smile\/math\/ValueDivMatrix.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSds", "link" : "smile\/math\/ValueDivMatrix.html#rowSds():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowMeans", "link" : "smile\/math\/ValueDivMatrix.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSums", "link" : "smile\/math\/ValueDivMatrix.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.matrixExpression2Array.xax", "link" : "smile\/math\/ValueDivMatrix.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normFro", "link" : "smile\/math\/ValueDivMatrix.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normInf", "link" : "smile\/math\/ValueDivMatrix.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm", "link" : "smile\/math\/ValueDivMatrix.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm2", "link" : "smile\/math\/ValueDivMatrix.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm1", "link" : "smile\/math\/ValueDivMatrix.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/ValueDivMatrix.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/ValueDivMatrix.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(arg0: Array[Double], arg1: Array[Double]): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/ValueDivMatrix.html#scale(x$1:Array[Double],x$2:Array[Double]):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/ValueDivMatrix.html#scale():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/ValueDivMatrix.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/ValueDivMatrix.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/ValueDivMatrix.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/ValueDivMatrix.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/ValueDivMatrix.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/ValueDivMatrix.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "submat", "tail" : "(arg0: Int, arg1: Int, arg2: Int, arg3: Int): DenseMatrix", "member" : "smile.math.matrixExpression2Array.submat", "link" : "smile\/math\/ValueDivMatrix.html#submat(x$1:Int,x$2:Int,x$3:Int,x$4:Int):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.update", "link" : "smile\/math\/ValueDivMatrix.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.matrixExpression2Array.ld", "link" : "smile\/math\/ValueDivMatrix.html#ld():Int", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/ValueDivMatrix.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/ValueDivMatrix.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/ValueDivMatrix.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/ValueDivMatrix.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/ValueDivMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/ValueDivMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atx", "link" : "smile\/math\/ValueDivMatrix.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/ValueDivMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/ValueDivMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.trace", "link" : "smile\/math\/ValueDivMatrix.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.diag", "link" : "smile\/math\/ValueDivMatrix.html#diag():Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.matrixExpression2Array.get", "link" : "smile\/math\/ValueDivMatrix.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/ValueDivMatrix.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/ValueDivMatrix.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/ValueDivMatrix.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/ValueDivMatrix.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/ValueDivMatrix.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/ValueDivMatrix.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.aat", "link" : "smile\/math\/ValueDivMatrix.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.ata", "link" : "smile\/math\/ValueDivMatrix.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.transpose", "link" : "smile\/math\/ValueDivMatrix.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/ValueDivMatrix.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/ValueDivMatrix.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/ValueDivMatrix.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/ValueDivMatrix.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/ValueDivMatrix.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/ValueDivMatrix.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.set", "link" : "smile\/math\/ValueDivMatrix.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "fill", "tail" : "(arg0: Double): Unit", "member" : "smile.math.matrixExpression2Array.fill", "link" : "smile\/math\/ValueDivMatrix.html#fill(x$1:Double):Unit", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.data", "link" : "smile\/math\/ValueDivMatrix.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbtmm", "link" : "smile\/math\/ValueDivMatrix.html#atbtmm(x$1:B):A", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbmm", "link" : "smile\/math\/ValueDivMatrix.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abtmm", "link" : "smile\/math\/ValueDivMatrix.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abmm", "link" : "smile\/math\/ValueDivMatrix.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.ax", "link" : "smile\/math\/ValueDivMatrix.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/ValueDivMatrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ValueDivMatrix) => Boolean, msg: => Any): ValueDivMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueDivMatrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ValueDivMatrix) => Boolean): ValueDivMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueDivMatrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): ValueDivMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueDivMatrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ValueDivMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueDivMatrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ValueDivMatrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/ValueDivMatrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ValueDivMatrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/ValueDivMatrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.ValueDivMatrix.toMatrix", "link" : "smile\/math\/ValueDivMatrix.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.ValueDivMatrix.apply", "link" : "smile\/math\/ValueDivMatrix.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.ValueDivMatrix.ncols", "link" : "smile\/math\/ValueDivMatrix.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.ValueDivMatrix.nrows", "link" : "smile\/math\/ValueDivMatrix.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.ValueDivMatrix#<init>", "error" : "unsupported entity"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.ValueDivMatrix.A", "link" : "smile\/math\/ValueDivMatrix.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "y", "tail" : ": Double", "member" : "smile.math.ValueDivMatrix.y", "link" : "smile\/math\/ValueDivMatrix.html#y:Double", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/ValueDivMatrix.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/ValueDivMatrix.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/ValueDivMatrix.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/ValueDivMatrix.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/ValueDivMatrix.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/ValueDivMatrix.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/ValueDivMatrix.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/ValueDivMatrix.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/ValueDivMatrix.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/ValueDivMatrix.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/ValueDivMatrix.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/ValueDivMatrix.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/ValueDivMatrix.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/ValueDivMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/ValueDivMatrix.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/ValueDivMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/ValueDivMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/ValueDivMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/ValueDivMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/ValueDivMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ValueDivMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ValueDivMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ValueDivMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/ValueDivMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/ValueDivMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/ValueDivMatrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/ValueDivMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/ValueDivMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/ValueDivMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/ValueDivMatrix.html", "kind" : "case class"}, {"name" : "smile.math.ValueDivVector", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.vectorExpression2Array.update", "link" : "smile\/math\/ValueDivVector.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/ValueDivVector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ValueDivVector) => Boolean, msg: => Any): ValueDivVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueDivVector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ValueDivVector) => Boolean): ValueDivVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueDivVector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): ValueDivVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueDivVector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ValueDivVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueDivVector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ValueDivVector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/ValueDivVector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ValueDivVector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/ValueDivVector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.ValueDivVector.toArray", "link" : "smile\/math\/ValueDivVector.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.ValueDivVector.apply", "link" : "smile\/math\/ValueDivVector.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.ValueDivVector.length", "link" : "smile\/math\/ValueDivVector.html#length:Int", "kind" : "def"}, {"member" : "smile.math.ValueDivVector#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.ValueDivVector.x", "link" : "smile\/math\/ValueDivVector.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "y", "tail" : ": Double", "member" : "smile.math.ValueDivVector.y", "link" : "smile\/math\/ValueDivVector.html#y:Double", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/ValueDivVector.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/ValueDivVector.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/ValueDivVector.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/ValueDivVector.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/ValueDivVector.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/ValueDivVector.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/ValueDivVector.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/ValueDivVector.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/ValueDivVector.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/ValueDivVector.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/ValueDivVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/ValueDivVector.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/ValueDivVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/ValueDivVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/ValueDivVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/ValueDivVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/ValueDivVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ValueDivVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ValueDivVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ValueDivVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/ValueDivVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/ValueDivVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/ValueDivVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/ValueDivVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/ValueDivVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/ValueDivVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/ValueDivVector.html", "kind" : "case class"}, {"name" : "smile.math.ValueMulMatrix", "shortDescription" : "", "members_case class" : [{"label" : "toArray", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.matrixExpression2Array.toArray", "link" : "smile\/math\/ValueMulMatrix.html#toArray():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.sum", "link" : "smile\/math\/ValueMulMatrix.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/ValueMulMatrix.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/ValueMulMatrix.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/ValueMulMatrix.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/ValueMulMatrix.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/ValueMulMatrix.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/ValueMulMatrix.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/ValueMulMatrix.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/ValueMulMatrix.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/ValueMulMatrix.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/ValueMulMatrix.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/ValueMulMatrix.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/ValueMulMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/ValueMulMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/ValueMulMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/ValueMulMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/ValueMulMatrix.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/ValueMulMatrix.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSds", "link" : "smile\/math\/ValueMulMatrix.html#colSds():Array[Double]", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colMeans", "link" : "smile\/math\/ValueMulMatrix.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSums", "link" : "smile\/math\/ValueMulMatrix.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSds", "link" : "smile\/math\/ValueMulMatrix.html#rowSds():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowMeans", "link" : "smile\/math\/ValueMulMatrix.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSums", "link" : "smile\/math\/ValueMulMatrix.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.matrixExpression2Array.xax", "link" : "smile\/math\/ValueMulMatrix.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normFro", "link" : "smile\/math\/ValueMulMatrix.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normInf", "link" : "smile\/math\/ValueMulMatrix.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm", "link" : "smile\/math\/ValueMulMatrix.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm2", "link" : "smile\/math\/ValueMulMatrix.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm1", "link" : "smile\/math\/ValueMulMatrix.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/ValueMulMatrix.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/ValueMulMatrix.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(arg0: Array[Double], arg1: Array[Double]): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/ValueMulMatrix.html#scale(x$1:Array[Double],x$2:Array[Double]):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/ValueMulMatrix.html#scale():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/ValueMulMatrix.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/ValueMulMatrix.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/ValueMulMatrix.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/ValueMulMatrix.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/ValueMulMatrix.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/ValueMulMatrix.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "submat", "tail" : "(arg0: Int, arg1: Int, arg2: Int, arg3: Int): DenseMatrix", "member" : "smile.math.matrixExpression2Array.submat", "link" : "smile\/math\/ValueMulMatrix.html#submat(x$1:Int,x$2:Int,x$3:Int,x$4:Int):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.update", "link" : "smile\/math\/ValueMulMatrix.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.matrixExpression2Array.ld", "link" : "smile\/math\/ValueMulMatrix.html#ld():Int", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/ValueMulMatrix.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/ValueMulMatrix.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/ValueMulMatrix.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/ValueMulMatrix.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/ValueMulMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/ValueMulMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atx", "link" : "smile\/math\/ValueMulMatrix.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/ValueMulMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/ValueMulMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.trace", "link" : "smile\/math\/ValueMulMatrix.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.diag", "link" : "smile\/math\/ValueMulMatrix.html#diag():Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.matrixExpression2Array.get", "link" : "smile\/math\/ValueMulMatrix.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/ValueMulMatrix.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/ValueMulMatrix.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/ValueMulMatrix.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/ValueMulMatrix.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/ValueMulMatrix.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/ValueMulMatrix.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.aat", "link" : "smile\/math\/ValueMulMatrix.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.ata", "link" : "smile\/math\/ValueMulMatrix.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.transpose", "link" : "smile\/math\/ValueMulMatrix.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/ValueMulMatrix.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/ValueMulMatrix.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/ValueMulMatrix.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/ValueMulMatrix.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/ValueMulMatrix.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/ValueMulMatrix.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.set", "link" : "smile\/math\/ValueMulMatrix.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "fill", "tail" : "(arg0: Double): Unit", "member" : "smile.math.matrixExpression2Array.fill", "link" : "smile\/math\/ValueMulMatrix.html#fill(x$1:Double):Unit", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.data", "link" : "smile\/math\/ValueMulMatrix.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbtmm", "link" : "smile\/math\/ValueMulMatrix.html#atbtmm(x$1:B):A", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbmm", "link" : "smile\/math\/ValueMulMatrix.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abtmm", "link" : "smile\/math\/ValueMulMatrix.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abmm", "link" : "smile\/math\/ValueMulMatrix.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.ax", "link" : "smile\/math\/ValueMulMatrix.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/ValueMulMatrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ValueMulMatrix) => Boolean, msg: => Any): ValueMulMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueMulMatrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ValueMulMatrix) => Boolean): ValueMulMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueMulMatrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): ValueMulMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueMulMatrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ValueMulMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueMulMatrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ValueMulMatrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/ValueMulMatrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ValueMulMatrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/ValueMulMatrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.ValueMulMatrix.toMatrix", "link" : "smile\/math\/ValueMulMatrix.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.ValueMulMatrix.apply", "link" : "smile\/math\/ValueMulMatrix.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.ValueMulMatrix.ncols", "link" : "smile\/math\/ValueMulMatrix.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.ValueMulMatrix.nrows", "link" : "smile\/math\/ValueMulMatrix.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.ValueMulMatrix#<init>", "error" : "unsupported entity"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.ValueMulMatrix.A", "link" : "smile\/math\/ValueMulMatrix.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "y", "tail" : ": Double", "member" : "smile.math.ValueMulMatrix.y", "link" : "smile\/math\/ValueMulMatrix.html#y:Double", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/ValueMulMatrix.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/ValueMulMatrix.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/ValueMulMatrix.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/ValueMulMatrix.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/ValueMulMatrix.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/ValueMulMatrix.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/ValueMulMatrix.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/ValueMulMatrix.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/ValueMulMatrix.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/ValueMulMatrix.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/ValueMulMatrix.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/ValueMulMatrix.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/ValueMulMatrix.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/ValueMulMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/ValueMulMatrix.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/ValueMulMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/ValueMulMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/ValueMulMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/ValueMulMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/ValueMulMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ValueMulMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ValueMulMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ValueMulMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/ValueMulMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/ValueMulMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/ValueMulMatrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/ValueMulMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/ValueMulMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/ValueMulMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/ValueMulMatrix.html", "kind" : "case class"}, {"name" : "smile.math.ValueMulVector", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.vectorExpression2Array.update", "link" : "smile\/math\/ValueMulVector.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/ValueMulVector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ValueMulVector) => Boolean, msg: => Any): ValueMulVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueMulVector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ValueMulVector) => Boolean): ValueMulVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueMulVector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): ValueMulVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueMulVector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ValueMulVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueMulVector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ValueMulVector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/ValueMulVector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ValueMulVector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/ValueMulVector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.ValueMulVector.toArray", "link" : "smile\/math\/ValueMulVector.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.ValueMulVector.apply", "link" : "smile\/math\/ValueMulVector.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.ValueMulVector.length", "link" : "smile\/math\/ValueMulVector.html#length:Int", "kind" : "def"}, {"member" : "smile.math.ValueMulVector#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.ValueMulVector.x", "link" : "smile\/math\/ValueMulVector.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "y", "tail" : ": Double", "member" : "smile.math.ValueMulVector.y", "link" : "smile\/math\/ValueMulVector.html#y:Double", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/ValueMulVector.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/ValueMulVector.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/ValueMulVector.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/ValueMulVector.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/ValueMulVector.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/ValueMulVector.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/ValueMulVector.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/ValueMulVector.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/ValueMulVector.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/ValueMulVector.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/ValueMulVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/ValueMulVector.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/ValueMulVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/ValueMulVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/ValueMulVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/ValueMulVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/ValueMulVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ValueMulVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ValueMulVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ValueMulVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/ValueMulVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/ValueMulVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/ValueMulVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/ValueMulVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/ValueMulVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/ValueMulVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/ValueMulVector.html", "kind" : "case class"}, {"name" : "smile.math.ValueSubMatrix", "shortDescription" : "", "members_case class" : [{"label" : "toArray", "tail" : "(): Array[Array[Double]]", "member" : "smile.math.matrixExpression2Array.toArray", "link" : "smile\/math\/ValueSubMatrix.html#toArray():Array[Array[Double]]", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.sum", "link" : "smile\/math\/ValueSubMatrix.html#sum():Double", "kind" : "def"}, {"label" : "replaceNaN", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.replaceNaN", "link" : "smile\/math\/ValueSubMatrix.html#replaceNaN(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/ValueSubMatrix.html#div(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/ValueSubMatrix.html#div(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/ValueSubMatrix.html#mul(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/ValueSubMatrix.html#mul(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/ValueSubMatrix.html#sub(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/ValueSubMatrix.html#sub(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/ValueSubMatrix.html#add(x$1:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Double, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/ValueSubMatrix.html#add(x$1:Double,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/ValueSubMatrix.html#div(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/ValueSubMatrix.html#div(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/ValueSubMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/ValueSubMatrix.html#mul(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/ValueSubMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/ValueSubMatrix.html#sub(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/ValueSubMatrix.html#add(x$1:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: DenseMatrix, arg1: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/ValueSubMatrix.html#add(x$1:smile.math.matrix.DenseMatrix,x$2:smile.math.matrix.DenseMatrix):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "colSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSds", "link" : "smile\/math\/ValueSubMatrix.html#colSds():Array[Double]", "kind" : "def"}, {"label" : "colMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colMeans", "link" : "smile\/math\/ValueSubMatrix.html#colMeans():Array[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.colSums", "link" : "smile\/math\/ValueSubMatrix.html#colSums():Array[Double]", "kind" : "def"}, {"label" : "rowSds", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSds", "link" : "smile\/math\/ValueSubMatrix.html#rowSds():Array[Double]", "kind" : "def"}, {"label" : "rowMeans", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowMeans", "link" : "smile\/math\/ValueSubMatrix.html#rowMeans():Array[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.rowSums", "link" : "smile\/math\/ValueSubMatrix.html#rowSums():Array[Double]", "kind" : "def"}, {"label" : "xax", "tail" : "(arg0: Array[Double]): Double", "member" : "smile.math.matrixExpression2Array.xax", "link" : "smile\/math\/ValueSubMatrix.html#xax(x$1:Array[Double]):Double", "kind" : "def"}, {"label" : "normFro", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normFro", "link" : "smile\/math\/ValueSubMatrix.html#normFro():Double", "kind" : "def"}, {"label" : "normInf", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.normInf", "link" : "smile\/math\/ValueSubMatrix.html#normInf():Double", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm", "link" : "smile\/math\/ValueSubMatrix.html#norm():Double", "kind" : "def"}, {"label" : "norm2", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm2", "link" : "smile\/math\/ValueSubMatrix.html#norm2():Double", "kind" : "def"}, {"label" : "norm1", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.norm1", "link" : "smile\/math\/ValueSubMatrix.html#norm1():Double", "kind" : "def"}, {"label" : "inverse", "tail" : "(arg0: Boolean): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/ValueSubMatrix.html#inverse(x$1:Boolean):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "inverse", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.inverse", "link" : "smile\/math\/ValueSubMatrix.html#inverse():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(arg0: Array[Double], arg1: Array[Double]): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/ValueSubMatrix.html#scale(x$1:Array[Double],x$2:Array[Double]):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "scale", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.scale", "link" : "smile\/math\/ValueSubMatrix.html#scale():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(arg0: Boolean): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/ValueSubMatrix.html#eig(x$1:Boolean):Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Boolean): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/ValueSubMatrix.html#eigen(x$1:Boolean):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Boolean): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/ValueSubMatrix.html#svd(x$1:Boolean):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(arg0: Boolean): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/ValueSubMatrix.html#qr(x$1:Boolean):smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(arg0: Boolean): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/ValueSubMatrix.html#cholesky(x$1:Boolean):smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(arg0: Boolean): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/ValueSubMatrix.html#lu(x$1:Boolean):smile.math.matrix.LU", "kind" : "def"}, {"label" : "submat", "tail" : "(arg0: Int, arg1: Int, arg2: Int, arg3: Int): DenseMatrix", "member" : "smile.math.matrixExpression2Array.submat", "link" : "smile\/math\/ValueSubMatrix.html#submat(x$1:Int,x$2:Int,x$3:Int,x$4:Int):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "update", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.update", "link" : "smile\/math\/ValueSubMatrix.html#update(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "ld", "tail" : "(): Int", "member" : "smile.math.matrixExpression2Array.ld", "link" : "smile\/math\/ValueSubMatrix.html#ld():Int", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int, arg1: Double, arg2: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/ValueSubMatrix.html#svd(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "svd", "tail" : "(arg0: Int): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/ValueSubMatrix.html#svd(x$1:Int):smile.math.matrix.SVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int, arg1: Double, arg2: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/ValueSubMatrix.html#eigen(x$1:Int,x$2:Double,x$3:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "eigen", "tail" : "(arg0: Int): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/ValueSubMatrix.html#eigen(x$1:Int):smile.math.matrix.EVD", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/ValueSubMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "atxpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atxpy", "link" : "smile\/math\/ValueSubMatrix.html#atxpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "atx", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.atx", "link" : "smile\/math\/ValueSubMatrix.html#atx(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double], arg2: Double): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/ValueSubMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double],x$3:Double):Array[Double]", "kind" : "def"}, {"label" : "axpy", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.axpy", "link" : "smile\/math\/ValueSubMatrix.html#axpy(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "smile.math.matrixExpression2Array.trace", "link" : "smile\/math\/ValueSubMatrix.html#trace():Double", "kind" : "def"}, {"label" : "diag", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.diag", "link" : "smile\/math\/ValueSubMatrix.html#diag():Array[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "smile.math.matrixExpression2Array.get", "link" : "smile\/math\/ValueSubMatrix.html#get(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "setSymmetric", "tail" : "(arg0: Boolean): Unit", "member" : "smile.math.matrixExpression2Array.setSymmetric", "link" : "smile\/math\/ValueSubMatrix.html#setSymmetric(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "isSymmetric", "tail" : "(): Boolean", "member" : "smile.math.matrixExpression2Array.isSymmetric", "link" : "smile\/math\/ValueSubMatrix.html#isSymmetric():Boolean", "kind" : "def"}, {"label" : "div", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.div", "link" : "smile\/math\/ValueSubMatrix.html#div(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "mul", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.mul", "link" : "smile\/math\/ValueSubMatrix.html#mul(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "sub", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.sub", "link" : "smile\/math\/ValueSubMatrix.html#sub(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "add", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.add", "link" : "smile\/math\/ValueSubMatrix.html#add(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "aat", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.aat", "link" : "smile\/math\/ValueSubMatrix.html#aat():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "ata", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.ata", "link" : "smile\/math\/ValueSubMatrix.html#ata():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "transpose", "tail" : "(): DenseMatrix", "member" : "smile.math.matrixExpression2Array.transpose", "link" : "smile\/math\/ValueSubMatrix.html#transpose():smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "eig", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.eig", "link" : "smile\/math\/ValueSubMatrix.html#eig():Array[Double]", "kind" : "def"}, {"label" : "eigen", "tail" : "(): EVD", "member" : "smile.math.matrixExpression2Array.eigen", "link" : "smile\/math\/ValueSubMatrix.html#eigen():smile.math.matrix.EVD", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVD", "member" : "smile.math.matrixExpression2Array.svd", "link" : "smile\/math\/ValueSubMatrix.html#svd():smile.math.matrix.SVD", "kind" : "def"}, {"label" : "qr", "tail" : "(): QR", "member" : "smile.math.matrixExpression2Array.qr", "link" : "smile\/math\/ValueSubMatrix.html#qr():smile.math.matrix.QR", "kind" : "def"}, {"label" : "cholesky", "tail" : "(): Cholesky", "member" : "smile.math.matrixExpression2Array.cholesky", "link" : "smile\/math\/ValueSubMatrix.html#cholesky():smile.math.matrix.Cholesky", "kind" : "def"}, {"label" : "lu", "tail" : "(): LU", "member" : "smile.math.matrixExpression2Array.lu", "link" : "smile\/math\/ValueSubMatrix.html#lu():smile.math.matrix.LU", "kind" : "def"}, {"label" : "set", "tail" : "(arg0: Int, arg1: Int, arg2: Double): Double", "member" : "smile.math.matrixExpression2Array.set", "link" : "smile\/math\/ValueSubMatrix.html#set(x$1:Int,x$2:Int,x$3:Double):Double", "kind" : "def"}, {"label" : "fill", "tail" : "(arg0: Double): Unit", "member" : "smile.math.matrixExpression2Array.fill", "link" : "smile\/math\/ValueSubMatrix.html#fill(x$1:Double):Unit", "kind" : "def"}, {"label" : "data", "tail" : "(): Array[Double]", "member" : "smile.math.matrixExpression2Array.data", "link" : "smile\/math\/ValueSubMatrix.html#data():Array[Double]", "kind" : "def"}, {"label" : "atbtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbtmm", "link" : "smile\/math\/ValueSubMatrix.html#atbtmm(x$1:B):A", "kind" : "def"}, {"label" : "atbmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.atbmm", "link" : "smile\/math\/ValueSubMatrix.html#atbmm(x$1:B):A", "kind" : "def"}, {"label" : "abtmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abtmm", "link" : "smile\/math\/ValueSubMatrix.html#abtmm(x$1:B):A", "kind" : "def"}, {"label" : "abmm", "tail" : "(arg0: DenseMatrix): DenseMatrix", "member" : "smile.math.matrixExpression2Array.abmm", "link" : "smile\/math\/ValueSubMatrix.html#abmm(x$1:B):A", "kind" : "def"}, {"label" : "ax", "tail" : "(arg0: Array[Double], arg1: Array[Double]): Array[Double]", "member" : "smile.math.matrixExpression2Array.ax", "link" : "smile\/math\/ValueSubMatrix.html#ax(x$1:Array[Double],x$2:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/ValueSubMatrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ValueSubMatrix) => Boolean, msg: => Any): ValueSubMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueSubMatrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ValueSubMatrix) => Boolean): ValueSubMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueSubMatrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): ValueSubMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueSubMatrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ValueSubMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueSubMatrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ValueSubMatrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/ValueSubMatrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ValueSubMatrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/ValueSubMatrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toMatrix", "tail" : ": DenseMatrix", "member" : "smile.math.ValueSubMatrix.toMatrix", "link" : "smile\/math\/ValueSubMatrix.html#toMatrix:smile.math.matrix.DenseMatrix", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int, j: Int): Double", "member" : "smile.math.ValueSubMatrix.apply", "link" : "smile\/math\/ValueSubMatrix.html#apply(i:Int,j:Int):Double", "kind" : "def"}, {"label" : "ncols", "tail" : "(): Int", "member" : "smile.math.ValueSubMatrix.ncols", "link" : "smile\/math\/ValueSubMatrix.html#ncols:Int", "kind" : "def"}, {"label" : "nrows", "tail" : "(): Int", "member" : "smile.math.ValueSubMatrix.nrows", "link" : "smile\/math\/ValueSubMatrix.html#nrows:Int", "kind" : "def"}, {"member" : "smile.math.ValueSubMatrix#<init>", "error" : "unsupported entity"}, {"label" : "A", "tail" : ": MatrixExpression", "member" : "smile.math.ValueSubMatrix.A", "link" : "smile\/math\/ValueSubMatrix.html#A:smile.math.MatrixExpression", "kind" : "val"}, {"label" : "y", "tail" : ": Double", "member" : "smile.math.ValueSubMatrix.y", "link" : "smile\/math\/ValueSubMatrix.html#y:Double", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/ValueSubMatrix.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): MatrixDivValue", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/ValueSubMatrix.html#\/(b:Double):smile.math.MatrixDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): MatrixMulValue", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/ValueSubMatrix.html#*(b:Double):smile.math.MatrixMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): MatrixSubValue", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/ValueSubMatrix.html#-(b:Double):smile.math.MatrixSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): MatrixAddValue", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/ValueSubMatrix.html#+(b:Double):smile.math.MatrixAddValue", "kind" : "def"}, {"label" : "%*%", "tail" : "(b: MatrixExpression): MatrixExpression", "member" : "smile.math.MatrixExpression.%*%", "link" : "smile\/math\/ValueSubMatrix.html#%*%(b:smile.math.MatrixExpression):smile.math.MatrixExpression", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): Ax", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/ValueSubMatrix.html#*(b:smile.math.VectorExpression):smile.math.Ax", "kind" : "def"}, {"label" : "t", "tail" : "(): MatrixTranspose", "member" : "smile.math.MatrixExpression.t", "link" : "smile\/math\/ValueSubMatrix.html#t:smile.math.MatrixTranspose", "kind" : "def"}, {"label" : "\/", "tail" : "(b: MatrixExpression): MatrixDivMatrix", "member" : "smile.math.MatrixExpression.\/", "link" : "smile\/math\/ValueSubMatrix.html#\/(b:smile.math.MatrixExpression):smile.math.MatrixDivMatrix", "kind" : "def"}, {"label" : "*", "tail" : "(b: MatrixExpression): MatrixMulMatrix", "member" : "smile.math.MatrixExpression.*", "link" : "smile\/math\/ValueSubMatrix.html#*(b:smile.math.MatrixExpression):smile.math.MatrixMulMatrix", "kind" : "def"}, {"label" : "-", "tail" : "(b: MatrixExpression): MatrixSubMatrix", "member" : "smile.math.MatrixExpression.-", "link" : "smile\/math\/ValueSubMatrix.html#-(b:smile.math.MatrixExpression):smile.math.MatrixSubMatrix", "kind" : "def"}, {"label" : "+", "tail" : "(b: MatrixExpression): MatrixAddMatrix", "member" : "smile.math.MatrixExpression.+", "link" : "smile\/math\/ValueSubMatrix.html#+(b:smile.math.MatrixExpression):smile.math.MatrixAddMatrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.MatrixExpression.toString", "link" : "smile\/math\/ValueSubMatrix.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/ValueSubMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/ValueSubMatrix.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/ValueSubMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/ValueSubMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/ValueSubMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/ValueSubMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/ValueSubMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ValueSubMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ValueSubMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ValueSubMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/ValueSubMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/ValueSubMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/ValueSubMatrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/ValueSubMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/ValueSubMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/ValueSubMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/ValueSubMatrix.html", "kind" : "case class"}, {"name" : "smile.math.ValueSubVector", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.vectorExpression2Array.update", "link" : "smile\/math\/ValueSubVector.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/ValueSubVector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ValueSubVector) => Boolean, msg: => Any): ValueSubVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueSubVector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ValueSubVector) => Boolean): ValueSubVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueSubVector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): ValueSubVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueSubVector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ValueSubVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/ValueSubVector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ValueSubVector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/ValueSubVector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ValueSubVector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/ValueSubVector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.ValueSubVector.toArray", "link" : "smile\/math\/ValueSubVector.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.ValueSubVector.apply", "link" : "smile\/math\/ValueSubVector.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.ValueSubVector.length", "link" : "smile\/math\/ValueSubVector.html#length:Int", "kind" : "def"}, {"member" : "smile.math.ValueSubVector#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.ValueSubVector.x", "link" : "smile\/math\/ValueSubVector.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "y", "tail" : ": Double", "member" : "smile.math.ValueSubVector.y", "link" : "smile\/math\/ValueSubVector.html#y:Double", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/ValueSubVector.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/ValueSubVector.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/ValueSubVector.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/ValueSubVector.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/ValueSubVector.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/ValueSubVector.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/ValueSubVector.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/ValueSubVector.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/ValueSubVector.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/ValueSubVector.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/ValueSubVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/ValueSubVector.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/ValueSubVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/ValueSubVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/ValueSubVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/ValueSubVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/ValueSubVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ValueSubVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ValueSubVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/ValueSubVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/ValueSubVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/ValueSubVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/ValueSubVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/ValueSubVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/ValueSubVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/ValueSubVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/ValueSubVector.html", "kind" : "case class"}, {"name" : "smile.math.VectorAddValue", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.vectorExpression2Array.update", "link" : "smile\/math\/VectorAddValue.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/VectorAddValue.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (VectorAddValue) => Boolean, msg: => Any): VectorAddValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorAddValue.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (VectorAddValue) => Boolean): VectorAddValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorAddValue.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): VectorAddValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorAddValue.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): VectorAddValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorAddValue.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (VectorAddValue, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/VectorAddValue.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (VectorAddValue, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/VectorAddValue.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.VectorAddValue.toArray", "link" : "smile\/math\/VectorAddValue.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.VectorAddValue.apply", "link" : "smile\/math\/VectorAddValue.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.VectorAddValue.length", "link" : "smile\/math\/VectorAddValue.html#length:Int", "kind" : "def"}, {"member" : "smile.math.VectorAddValue#<init>", "error" : "unsupported entity"}, {"label" : "y", "tail" : ": Double", "member" : "smile.math.VectorAddValue.y", "link" : "smile\/math\/VectorAddValue.html#y:Double", "kind" : "val"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.VectorAddValue.x", "link" : "smile\/math\/VectorAddValue.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/VectorAddValue.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/VectorAddValue.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/VectorAddValue.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/VectorAddValue.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/VectorAddValue.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/VectorAddValue.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/VectorAddValue.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/VectorAddValue.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/VectorAddValue.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/VectorAddValue.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/VectorAddValue.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/VectorAddValue.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/VectorAddValue.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/VectorAddValue.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/VectorAddValue.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/VectorAddValue.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/VectorAddValue.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorAddValue.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorAddValue.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorAddValue.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/VectorAddValue.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/VectorAddValue.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/VectorAddValue.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/VectorAddValue.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/VectorAddValue.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/VectorAddValue.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/VectorAddValue.html", "kind" : "case class"}, {"name" : "smile.math.VectorAddVector", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.vectorExpression2Array.update", "link" : "smile\/math\/VectorAddVector.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/VectorAddVector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (VectorAddVector) => Boolean, msg: => Any): VectorAddVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorAddVector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (VectorAddVector) => Boolean): VectorAddVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorAddVector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): VectorAddVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorAddVector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): VectorAddVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorAddVector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (VectorAddVector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/VectorAddVector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (VectorAddVector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/VectorAddVector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.VectorAddVector.toArray", "link" : "smile\/math\/VectorAddVector.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.VectorAddVector.apply", "link" : "smile\/math\/VectorAddVector.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.VectorAddVector.length", "link" : "smile\/math\/VectorAddVector.html#length:Int", "kind" : "def"}, {"member" : "smile.math.VectorAddVector#<init>", "error" : "unsupported entity"}, {"label" : "y", "tail" : ": VectorExpression", "member" : "smile.math.VectorAddVector.y", "link" : "smile\/math\/VectorAddVector.html#y:smile.math.VectorExpression", "kind" : "val"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.VectorAddVector.x", "link" : "smile\/math\/VectorAddVector.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/VectorAddVector.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/VectorAddVector.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/VectorAddVector.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/VectorAddVector.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/VectorAddVector.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/VectorAddVector.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/VectorAddVector.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/VectorAddVector.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/VectorAddVector.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/VectorAddVector.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/VectorAddVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/VectorAddVector.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/VectorAddVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/VectorAddVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/VectorAddVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/VectorAddVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/VectorAddVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorAddVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorAddVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorAddVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/VectorAddVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/VectorAddVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/VectorAddVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/VectorAddVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/VectorAddVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/VectorAddVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/VectorAddVector.html", "kind" : "case class"}, {"name" : "smile.math.VectorDivValue", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.vectorExpression2Array.update", "link" : "smile\/math\/VectorDivValue.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/VectorDivValue.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (VectorDivValue) => Boolean, msg: => Any): VectorDivValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorDivValue.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (VectorDivValue) => Boolean): VectorDivValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorDivValue.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): VectorDivValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorDivValue.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): VectorDivValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorDivValue.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (VectorDivValue, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/VectorDivValue.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (VectorDivValue, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/VectorDivValue.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.VectorDivValue.toArray", "link" : "smile\/math\/VectorDivValue.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.VectorDivValue.apply", "link" : "smile\/math\/VectorDivValue.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.VectorDivValue.length", "link" : "smile\/math\/VectorDivValue.html#length:Int", "kind" : "def"}, {"member" : "smile.math.VectorDivValue#<init>", "error" : "unsupported entity"}, {"label" : "y", "tail" : ": Double", "member" : "smile.math.VectorDivValue.y", "link" : "smile\/math\/VectorDivValue.html#y:Double", "kind" : "val"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.VectorDivValue.x", "link" : "smile\/math\/VectorDivValue.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/VectorDivValue.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/VectorDivValue.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/VectorDivValue.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/VectorDivValue.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/VectorDivValue.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/VectorDivValue.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/VectorDivValue.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/VectorDivValue.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/VectorDivValue.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/VectorDivValue.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/VectorDivValue.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/VectorDivValue.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/VectorDivValue.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/VectorDivValue.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/VectorDivValue.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/VectorDivValue.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/VectorDivValue.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorDivValue.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorDivValue.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorDivValue.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/VectorDivValue.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/VectorDivValue.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/VectorDivValue.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/VectorDivValue.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/VectorDivValue.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/VectorDivValue.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/VectorDivValue.html", "kind" : "case class"}, {"name" : "smile.math.VectorDivVector", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.vectorExpression2Array.update", "link" : "smile\/math\/VectorDivVector.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/VectorDivVector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (VectorDivVector) => Boolean, msg: => Any): VectorDivVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorDivVector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (VectorDivVector) => Boolean): VectorDivVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorDivVector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): VectorDivVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorDivVector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): VectorDivVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorDivVector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (VectorDivVector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/VectorDivVector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (VectorDivVector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/VectorDivVector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.VectorDivVector.toArray", "link" : "smile\/math\/VectorDivVector.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.VectorDivVector.apply", "link" : "smile\/math\/VectorDivVector.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.VectorDivVector.length", "link" : "smile\/math\/VectorDivVector.html#length:Int", "kind" : "def"}, {"member" : "smile.math.VectorDivVector#<init>", "error" : "unsupported entity"}, {"label" : "y", "tail" : ": VectorExpression", "member" : "smile.math.VectorDivVector.y", "link" : "smile\/math\/VectorDivVector.html#y:smile.math.VectorExpression", "kind" : "val"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.VectorDivVector.x", "link" : "smile\/math\/VectorDivVector.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/VectorDivVector.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/VectorDivVector.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/VectorDivVector.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/VectorDivVector.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/VectorDivVector.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/VectorDivVector.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/VectorDivVector.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/VectorDivVector.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/VectorDivVector.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/VectorDivVector.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/VectorDivVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/VectorDivVector.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/VectorDivVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/VectorDivVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/VectorDivVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/VectorDivVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/VectorDivVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorDivVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorDivVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorDivVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/VectorDivVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/VectorDivVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/VectorDivVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/VectorDivVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/VectorDivVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/VectorDivVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/VectorDivVector.html", "kind" : "case class"}, {"name" : "smile.math.VectorExpression", "trait" : "smile\/math\/VectorExpression.html", "kind" : "trait", "members_trait" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.vectorExpression2Array.update", "link" : "smile\/math\/VectorExpression.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/VectorExpression.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (VectorExpression) => Boolean, msg: => Any): VectorExpression", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorExpression.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (VectorExpression) => Boolean): VectorExpression", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorExpression.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): VectorExpression", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorExpression.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): VectorExpression", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorExpression.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (VectorExpression, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/VectorExpression.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (VectorExpression, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/VectorExpression.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/VectorExpression.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/VectorExpression.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/VectorExpression.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/VectorExpression.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/VectorExpression.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/VectorExpression.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/VectorExpression.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/VectorExpression.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/VectorExpression.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/VectorExpression.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/VectorExpression.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/VectorExpression.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/VectorExpression.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/VectorExpression.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/VectorExpression.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/VectorExpression.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorExpression.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorExpression.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorExpression.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/VectorExpression.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/VectorExpression.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/VectorExpression.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/math\/VectorExpression.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/math\/VectorExpression.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/VectorExpression.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/VectorExpression.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/VectorExpression.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toArray", "tail" : "(): Array[Double]", "member" : "smile.math.VectorExpression.toArray", "link" : "smile\/math\/VectorExpression.html#toArray:Array[Double]", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.VectorExpression.apply", "link" : "smile\/math\/VectorExpression.html#apply(i:Int):Double", "kind" : "abstract def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.VectorExpression.length", "link" : "smile\/math\/VectorExpression.html#length:Int", "kind" : "abstract def"}], "shortDescription" : "Vector Expression."}, {"name" : "smile.math.VectorLift", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.vectorExpression2Array.update", "link" : "smile\/math\/VectorLift.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/VectorLift.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (VectorLift) => Boolean, msg: => Any): VectorLift", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorLift.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (VectorLift) => Boolean): VectorLift", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorLift.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): VectorLift", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorLift.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): VectorLift", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorLift.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (VectorLift, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/VectorLift.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (VectorLift, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/VectorLift.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : "(): Array[Double]", "member" : "smile.math.VectorLift.toArray", "link" : "smile\/math\/VectorLift.html#toArray:Array[Double]", "kind" : "def"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.VectorLift.apply", "link" : "smile\/math\/VectorLift.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.VectorLift.length", "link" : "smile\/math\/VectorLift.html#length:Int", "kind" : "def"}, {"member" : "smile.math.VectorLift#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": Array[Double]", "member" : "smile.math.VectorLift.x", "link" : "smile\/math\/VectorLift.html#x:Array[Double]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/VectorLift.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/VectorLift.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/VectorLift.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/VectorLift.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/VectorLift.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/VectorLift.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/VectorLift.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/VectorLift.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/VectorLift.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/VectorLift.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/VectorLift.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/VectorLift.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/VectorLift.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/VectorLift.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/VectorLift.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/VectorLift.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/VectorLift.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorLift.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorLift.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorLift.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/VectorLift.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/VectorLift.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/VectorLift.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/VectorLift.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/VectorLift.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/VectorLift.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/VectorLift.html", "kind" : "case class"}, {"name" : "smile.math.VectorMulValue", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.vectorExpression2Array.update", "link" : "smile\/math\/VectorMulValue.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/VectorMulValue.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (VectorMulValue) => Boolean, msg: => Any): VectorMulValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorMulValue.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (VectorMulValue) => Boolean): VectorMulValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorMulValue.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): VectorMulValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorMulValue.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): VectorMulValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorMulValue.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (VectorMulValue, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/VectorMulValue.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (VectorMulValue, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/VectorMulValue.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.VectorMulValue.toArray", "link" : "smile\/math\/VectorMulValue.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.VectorMulValue.apply", "link" : "smile\/math\/VectorMulValue.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.VectorMulValue.length", "link" : "smile\/math\/VectorMulValue.html#length:Int", "kind" : "def"}, {"member" : "smile.math.VectorMulValue#<init>", "error" : "unsupported entity"}, {"label" : "y", "tail" : ": Double", "member" : "smile.math.VectorMulValue.y", "link" : "smile\/math\/VectorMulValue.html#y:Double", "kind" : "val"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.VectorMulValue.x", "link" : "smile\/math\/VectorMulValue.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/VectorMulValue.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/VectorMulValue.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/VectorMulValue.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/VectorMulValue.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/VectorMulValue.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/VectorMulValue.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/VectorMulValue.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/VectorMulValue.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/VectorMulValue.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/VectorMulValue.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/VectorMulValue.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/VectorMulValue.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/VectorMulValue.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/VectorMulValue.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/VectorMulValue.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/VectorMulValue.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/VectorMulValue.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorMulValue.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorMulValue.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorMulValue.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/VectorMulValue.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/VectorMulValue.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/VectorMulValue.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/VectorMulValue.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/VectorMulValue.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/VectorMulValue.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/VectorMulValue.html", "kind" : "case class"}, {"name" : "smile.math.VectorMulVector", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.vectorExpression2Array.update", "link" : "smile\/math\/VectorMulVector.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/VectorMulVector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (VectorMulVector) => Boolean, msg: => Any): VectorMulVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorMulVector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (VectorMulVector) => Boolean): VectorMulVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorMulVector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): VectorMulVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorMulVector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): VectorMulVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorMulVector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (VectorMulVector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/VectorMulVector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (VectorMulVector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/VectorMulVector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.VectorMulVector.toArray", "link" : "smile\/math\/VectorMulVector.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.VectorMulVector.apply", "link" : "smile\/math\/VectorMulVector.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.VectorMulVector.length", "link" : "smile\/math\/VectorMulVector.html#length:Int", "kind" : "def"}, {"member" : "smile.math.VectorMulVector#<init>", "error" : "unsupported entity"}, {"label" : "y", "tail" : ": VectorExpression", "member" : "smile.math.VectorMulVector.y", "link" : "smile\/math\/VectorMulVector.html#y:smile.math.VectorExpression", "kind" : "val"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.VectorMulVector.x", "link" : "smile\/math\/VectorMulVector.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/VectorMulVector.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/VectorMulVector.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/VectorMulVector.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/VectorMulVector.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/VectorMulVector.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/VectorMulVector.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/VectorMulVector.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/VectorMulVector.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/VectorMulVector.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/VectorMulVector.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/VectorMulVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/VectorMulVector.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/VectorMulVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/VectorMulVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/VectorMulVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/VectorMulVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/VectorMulVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorMulVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorMulVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorMulVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/VectorMulVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/VectorMulVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/VectorMulVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/VectorMulVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/VectorMulVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/VectorMulVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/VectorMulVector.html", "kind" : "case class"}, {"name" : "smile.math.VectorSubValue", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.vectorExpression2Array.update", "link" : "smile\/math\/VectorSubValue.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/VectorSubValue.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (VectorSubValue) => Boolean, msg: => Any): VectorSubValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorSubValue.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (VectorSubValue) => Boolean): VectorSubValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorSubValue.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): VectorSubValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorSubValue.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): VectorSubValue", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorSubValue.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (VectorSubValue, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/VectorSubValue.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (VectorSubValue, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/VectorSubValue.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.VectorSubValue.toArray", "link" : "smile\/math\/VectorSubValue.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.VectorSubValue.apply", "link" : "smile\/math\/VectorSubValue.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.VectorSubValue.length", "link" : "smile\/math\/VectorSubValue.html#length:Int", "kind" : "def"}, {"member" : "smile.math.VectorSubValue#<init>", "error" : "unsupported entity"}, {"label" : "y", "tail" : ": Double", "member" : "smile.math.VectorSubValue.y", "link" : "smile\/math\/VectorSubValue.html#y:Double", "kind" : "val"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.VectorSubValue.x", "link" : "smile\/math\/VectorSubValue.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/VectorSubValue.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/VectorSubValue.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/VectorSubValue.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/VectorSubValue.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/VectorSubValue.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/VectorSubValue.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/VectorSubValue.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/VectorSubValue.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/VectorSubValue.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/VectorSubValue.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/VectorSubValue.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/VectorSubValue.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/VectorSubValue.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/VectorSubValue.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/VectorSubValue.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/VectorSubValue.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/VectorSubValue.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorSubValue.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorSubValue.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorSubValue.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/VectorSubValue.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/VectorSubValue.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/VectorSubValue.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/VectorSubValue.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/VectorSubValue.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/VectorSubValue.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/VectorSubValue.html", "kind" : "case class"}, {"name" : "smile.math.VectorSubVector", "shortDescription" : "", "members_case class" : [{"label" : "update", "tail" : "(i: Int, x: Double): Unit", "member" : "smile.math.vectorExpression2Array.update", "link" : "smile\/math\/VectorSubVector.html#update(i:Int,x:T):Unit", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/math\/VectorSubVector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (VectorSubVector) => Boolean, msg: => Any): VectorSubVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorSubVector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (VectorSubVector) => Boolean): VectorSubVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorSubVector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): VectorSubVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorSubVector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): VectorSubVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/math\/VectorSubVector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (VectorSubVector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/math\/VectorSubVector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (VectorSubVector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/math\/VectorSubVector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toArray", "tail" : ": Array[Double]", "member" : "smile.math.VectorSubVector.toArray", "link" : "smile\/math\/VectorSubVector.html#toArray:Array[Double]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(i: Int): Double", "member" : "smile.math.VectorSubVector.apply", "link" : "smile\/math\/VectorSubVector.html#apply(i:Int):Double", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "smile.math.VectorSubVector.length", "link" : "smile\/math\/VectorSubVector.html#length:Int", "kind" : "def"}, {"member" : "smile.math.VectorSubVector#<init>", "error" : "unsupported entity"}, {"label" : "y", "tail" : ": VectorExpression", "member" : "smile.math.VectorSubVector.y", "link" : "smile\/math\/VectorSubVector.html#y:smile.math.VectorExpression", "kind" : "val"}, {"label" : "x", "tail" : ": VectorExpression", "member" : "smile.math.VectorSubVector.x", "link" : "smile\/math\/VectorSubVector.html#x:smile.math.VectorExpression", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/math\/VectorSubVector.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "\/", "tail" : "(b: Double): VectorDivValue", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/VectorSubVector.html#\/(b:Double):smile.math.VectorDivValue", "kind" : "def"}, {"label" : "*", "tail" : "(b: Double): VectorMulValue", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/VectorSubVector.html#*(b:Double):smile.math.VectorMulValue", "kind" : "def"}, {"label" : "-", "tail" : "(b: Double): VectorSubValue", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/VectorSubVector.html#-(b:Double):smile.math.VectorSubValue", "kind" : "def"}, {"label" : "+", "tail" : "(b: Double): VectorAddValue", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/VectorSubVector.html#+(b:Double):smile.math.VectorAddValue", "kind" : "def"}, {"label" : "\/", "tail" : "(b: VectorExpression): VectorDivVector", "member" : "smile.math.VectorExpression.\/", "link" : "smile\/math\/VectorSubVector.html#\/(b:smile.math.VectorExpression):smile.math.VectorDivVector", "kind" : "def"}, {"label" : "*", "tail" : "(b: VectorExpression): VectorMulVector", "member" : "smile.math.VectorExpression.*", "link" : "smile\/math\/VectorSubVector.html#*(b:smile.math.VectorExpression):smile.math.VectorMulVector", "kind" : "def"}, {"label" : "-", "tail" : "(b: VectorExpression): VectorSubVector", "member" : "smile.math.VectorExpression.-", "link" : "smile\/math\/VectorSubVector.html#-(b:smile.math.VectorExpression):smile.math.VectorSubVector", "kind" : "def"}, {"label" : "+", "tail" : "(b: VectorExpression): VectorAddVector", "member" : "smile.math.VectorExpression.+", "link" : "smile\/math\/VectorSubVector.html#+(b:smile.math.VectorExpression):smile.math.VectorAddVector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.math.VectorExpression.toString", "link" : "smile\/math\/VectorSubVector.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/VectorSubVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/VectorSubVector.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/VectorSubVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/VectorSubVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/VectorSubVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/VectorSubVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/VectorSubVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorSubVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorSubVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/VectorSubVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/VectorSubVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/VectorSubVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/VectorSubVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/VectorSubVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/VectorSubVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/VectorSubVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/math\/VectorSubVector.html", "kind" : "case class"}], "smile.cas" : [{"name" : "smile.cas.Abs", "shortDescription" : "abs(x)", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/Abs.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Abs) => Boolean, msg: => Any): Abs", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Abs.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Abs) => Boolean): Abs", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Abs.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Abs", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Abs.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Abs", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Abs.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Abs, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/Abs.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Abs, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/Abs.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "simplify", "tail" : "(): Scalar", "member" : "smile.cas.Abs.simplify", "link" : "smile\/cas\/Abs.html#simplify:smile.cas.Scalar", "kind" : "def"}, {"label" : "d", "tail" : "(dx: VectorVar): Vector", "member" : "smile.cas.Abs.d", "link" : "smile\/cas\/Abs.html#d(dx:smile.cas.VectorVar):smile.cas.Vector", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var): Scalar", "member" : "smile.cas.Abs.d", "link" : "smile\/cas\/Abs.html#d(dx:smile.cas.Var):smile.cas.Scalar", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): Scalar", "member" : "smile.cas.Abs.apply", "link" : "smile\/cas\/Abs.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.Scalar", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.Abs.toString", "link" : "smile\/cas\/Abs.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.Abs#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": Scalar", "member" : "smile.cas.Abs.x", "link" : "smile\/cas\/Abs.html#x:smile.cas.Scalar", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/Abs.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "*", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/Abs.html#*(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/Abs.html#*(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Scalar", "member" : "smile.cas.Scalar.unary_-", "link" : "smile\/cas\/Abs.html#unary_-:smile.cas.Scalar", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): Scalar", "member" : "smile.cas.Scalar.unary_+", "link" : "smile\/cas\/Abs.html#unary_+:smile.cas.Scalar", "kind" : "def"}, {"label" : "**", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.**", "link" : "smile\/cas\/Abs.html#**(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "\/", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.\/", "link" : "smile\/cas\/Abs.html#\/(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "*", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/Abs.html#*(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "-", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.-", "link" : "smile\/cas\/Abs.html#-(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "+", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.+", "link" : "smile\/cas\/Abs.html#+(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var*): Vector", "member" : "smile.cas.Scalar.d", "link" : "smile\/cas\/Abs.html#d(dx:smile.cas.Var*):smile.cas.Vector", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): Scalar", "member" : "smile.cas.Scalar.apply", "link" : "smile\/cas\/Abs.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.Scalar", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.Scalar.shape", "link" : "smile\/cas\/Abs.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.Scalar.rank", "link" : "smile\/cas\/Abs.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/Abs.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/Abs.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/Abs.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/Abs.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/Abs.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/Abs.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/Abs.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Abs.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Abs.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Abs.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/Abs.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/Abs.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/Abs.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/Abs.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/Abs.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/Abs.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/Abs.html", "kind" : "case class"}, {"name" : "smile.cas.Add", "shortDescription" : "x + y", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/Add.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Add) => Boolean, msg: => Any): Add", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Add.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Add) => Boolean): Add", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Add.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Add", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Add.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Add", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Add.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Add, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/Add.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Add, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/Add.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "simplify", "tail" : "(): Scalar", "member" : "smile.cas.Add.simplify", "link" : "smile\/cas\/Add.html#simplify:smile.cas.Scalar", "kind" : "def"}, {"label" : "d", "tail" : "(dx: VectorVar): Vector", "member" : "smile.cas.Add.d", "link" : "smile\/cas\/Add.html#d(dx:smile.cas.VectorVar):smile.cas.Vector", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var): Scalar", "member" : "smile.cas.Add.d", "link" : "smile\/cas\/Add.html#d(dx:smile.cas.Var):smile.cas.Scalar", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): Scalar", "member" : "smile.cas.Add.apply", "link" : "smile\/cas\/Add.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.Scalar", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "smile.cas.Add.equals", "link" : "smile\/cas\/Add.html#equals(o:Any):Boolean", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.Add.toString", "link" : "smile\/cas\/Add.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.Add#<init>", "error" : "unsupported entity"}, {"label" : "y", "tail" : ": Scalar", "member" : "smile.cas.Add.y", "link" : "smile\/cas\/Add.html#y:smile.cas.Scalar", "kind" : "val"}, {"label" : "x", "tail" : ": Scalar", "member" : "smile.cas.Add.x", "link" : "smile\/cas\/Add.html#x:smile.cas.Scalar", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/Add.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "*", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/Add.html#*(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/Add.html#*(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Scalar", "member" : "smile.cas.Scalar.unary_-", "link" : "smile\/cas\/Add.html#unary_-:smile.cas.Scalar", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): Scalar", "member" : "smile.cas.Scalar.unary_+", "link" : "smile\/cas\/Add.html#unary_+:smile.cas.Scalar", "kind" : "def"}, {"label" : "**", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.**", "link" : "smile\/cas\/Add.html#**(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "\/", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.\/", "link" : "smile\/cas\/Add.html#\/(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "*", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/Add.html#*(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "-", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.-", "link" : "smile\/cas\/Add.html#-(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "+", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.+", "link" : "smile\/cas\/Add.html#+(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var*): Vector", "member" : "smile.cas.Scalar.d", "link" : "smile\/cas\/Add.html#d(dx:smile.cas.Var*):smile.cas.Vector", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): Scalar", "member" : "smile.cas.Scalar.apply", "link" : "smile\/cas\/Add.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.Scalar", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.Scalar.shape", "link" : "smile\/cas\/Add.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.Scalar.rank", "link" : "smile\/cas\/Add.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/Add.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/Add.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/Add.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/Add.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/Add.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/Add.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/Add.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Add.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Add.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Add.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/Add.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/Add.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/Add.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/Add.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/Add.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/Add.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/Add.html", "kind" : "case class"}, {"name" : "smile.cas.AddMatrix", "shortDescription" : "A + B", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/AddMatrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AddMatrix) => Boolean, msg: => Any): AddMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/AddMatrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AddMatrix) => Boolean): AddMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/AddMatrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): AddMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/AddMatrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): AddMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/AddMatrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (AddMatrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/AddMatrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (AddMatrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/AddMatrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "simplify", "tail" : "(): Matrix", "member" : "smile.cas.AddMatrix.simplify", "link" : "smile\/cas\/AddMatrix.html#simplify:smile.cas.Matrix", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var): Matrix", "member" : "smile.cas.AddMatrix.d", "link" : "smile\/cas\/AddMatrix.html#d(dx:smile.cas.Var):smile.cas.Matrix", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): Matrix", "member" : "smile.cas.AddMatrix.apply", "link" : "smile\/cas\/AddMatrix.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.Matrix", "kind" : "def"}, {"label" : "size", "tail" : "(): (IntScalar, IntScalar)", "member" : "smile.cas.AddMatrix.size", "link" : "smile\/cas\/AddMatrix.html#size:(smile.cas.IntScalar,smile.cas.IntScalar)", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "smile.cas.AddMatrix.equals", "link" : "smile\/cas\/AddMatrix.html#equals(o:Any):Boolean", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.AddMatrix.toString", "link" : "smile\/cas\/AddMatrix.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.AddMatrix#<init>", "error" : "unsupported entity"}, {"label" : "B", "tail" : ": Matrix", "member" : "smile.cas.AddMatrix.B", "link" : "smile\/cas\/AddMatrix.html#B:smile.cas.Matrix", "kind" : "val"}, {"label" : "A", "tail" : ": Matrix", "member" : "smile.cas.AddMatrix.A", "link" : "smile\/cas\/AddMatrix.html#A:smile.cas.Matrix", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/AddMatrix.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "inv", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.inv", "link" : "smile\/cas\/AddMatrix.html#inv:smile.cas.Matrix", "kind" : "def"}, {"label" : "t", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.t", "link" : "smile\/cas\/AddMatrix.html#t:smile.cas.Matrix", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.unary_-", "link" : "smile\/cas\/AddMatrix.html#unary_-:smile.cas.Matrix", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.unary_+", "link" : "smile\/cas\/AddMatrix.html#unary_+:smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Matrix.*", "link" : "smile\/cas\/AddMatrix.html#*(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Matrix.*", "link" : "smile\/cas\/AddMatrix.html#*(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "*", "tail" : "(y: Scalar): Matrix", "member" : "smile.cas.Matrix.*", "link" : "smile\/cas\/AddMatrix.html#*(y:smile.cas.Scalar):smile.cas.Matrix", "kind" : "def"}, {"label" : "-", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Matrix.-", "link" : "smile\/cas\/AddMatrix.html#-(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "+", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Matrix.+", "link" : "smile\/cas\/AddMatrix.html#+(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): Matrix", "member" : "smile.cas.Matrix.apply", "link" : "smile\/cas\/AddMatrix.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.Matrix", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.Matrix.shape", "link" : "smile\/cas\/AddMatrix.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.Matrix.rank", "link" : "smile\/cas\/AddMatrix.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/AddMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/AddMatrix.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/AddMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/AddMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/AddMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/AddMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/AddMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/AddMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/AddMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/AddMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/AddMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/AddMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/AddMatrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/AddMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/AddMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/AddMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/AddMatrix.html", "kind" : "case class"}, {"name" : "smile.cas.AddVector", "shortDescription" : "x + y", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/AddVector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AddVector) => Boolean, msg: => Any): AddVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/AddVector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AddVector) => Boolean): AddVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/AddVector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): AddVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/AddVector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): AddVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/AddVector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (AddVector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/AddVector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (AddVector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/AddVector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "simplify", "tail" : "(): Vector", "member" : "smile.cas.AddVector.simplify", "link" : "smile\/cas\/AddVector.html#simplify:smile.cas.Vector", "kind" : "def"}, {"label" : "d", "tail" : "(dx: VectorVar): Matrix", "member" : "smile.cas.AddVector.d", "link" : "smile\/cas\/AddVector.html#d(dx:smile.cas.VectorVar):smile.cas.Matrix", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var): Vector", "member" : "smile.cas.AddVector.d", "link" : "smile\/cas\/AddVector.html#d(dx:smile.cas.Var):smile.cas.Vector", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): Vector", "member" : "smile.cas.AddVector.apply", "link" : "smile\/cas\/AddVector.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.Vector", "kind" : "def"}, {"label" : "size", "tail" : "(): IntScalar", "member" : "smile.cas.AddVector.size", "link" : "smile\/cas\/AddVector.html#size:smile.cas.IntScalar", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "smile.cas.AddVector.equals", "link" : "smile\/cas\/AddVector.html#equals(o:Any):Boolean", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.AddVector.toString", "link" : "smile\/cas\/AddVector.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.AddVector#<init>", "error" : "unsupported entity"}, {"label" : "y", "tail" : ": Vector", "member" : "smile.cas.AddVector.y", "link" : "smile\/cas\/AddVector.html#y:smile.cas.Vector", "kind" : "val"}, {"label" : "x", "tail" : ": Vector", "member" : "smile.cas.AddVector.x", "link" : "smile\/cas\/AddVector.html#x:smile.cas.Vector", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/AddVector.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Vector", "member" : "smile.cas.Vector.unary_-", "link" : "smile\/cas\/AddVector.html#unary_-:smile.cas.Vector", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): Vector", "member" : "smile.cas.Vector.unary_+", "link" : "smile\/cas\/AddVector.html#unary_+:smile.cas.Vector", "kind" : "def"}, {"label" : "*~", "tail" : "(y: Vector): Matrix", "member" : "smile.cas.Vector.*~", "link" : "smile\/cas\/AddVector.html#*~(y:smile.cas.Vector):smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Vector): Scalar", "member" : "smile.cas.Vector.*", "link" : "smile\/cas\/AddVector.html#*(y:smile.cas.Vector):smile.cas.Scalar", "kind" : "def"}, {"label" : "\/", "tail" : "(y: Scalar): Vector", "member" : "smile.cas.Vector.\/", "link" : "smile\/cas\/AddVector.html#\/(y:smile.cas.Scalar):smile.cas.Vector", "kind" : "def"}, {"label" : "*", "tail" : "(y: Scalar): Vector", "member" : "smile.cas.Vector.*", "link" : "smile\/cas\/AddVector.html#*(y:smile.cas.Scalar):smile.cas.Vector", "kind" : "def"}, {"label" : "-", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Vector.-", "link" : "smile\/cas\/AddVector.html#-(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "+", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Vector.+", "link" : "smile\/cas\/AddVector.html#+(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): Vector", "member" : "smile.cas.Vector.apply", "link" : "smile\/cas\/AddVector.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.Vector", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.Vector.shape", "link" : "smile\/cas\/AddVector.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.Vector.rank", "link" : "smile\/cas\/AddVector.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/AddVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/AddVector.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/AddVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/AddVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/AddVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/AddVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/AddVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/AddVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/AddVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/AddVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/AddVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/AddVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/AddVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/AddVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/AddVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/AddVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/AddVector.html", "kind" : "case class"}, {"name" : "smile.cas.ArcCos", "shortDescription" : "acos(x)", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/ArcCos.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ArcCos) => Boolean, msg: => Any): ArcCos", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/ArcCos.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ArcCos) => Boolean): ArcCos", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/ArcCos.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): ArcCos", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/ArcCos.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ArcCos", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/ArcCos.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ArcCos, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/ArcCos.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ArcCos, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/ArcCos.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "simplify", "tail" : "(): Scalar", "member" : "smile.cas.ArcCos.simplify", "link" : "smile\/cas\/ArcCos.html#simplify:smile.cas.Scalar", "kind" : "def"}, {"label" : "d", "tail" : "(dx: VectorVar): Vector", "member" : "smile.cas.ArcCos.d", "link" : "smile\/cas\/ArcCos.html#d(dx:smile.cas.VectorVar):smile.cas.Vector", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var): Scalar", "member" : "smile.cas.ArcCos.d", "link" : "smile\/cas\/ArcCos.html#d(dx:smile.cas.Var):smile.cas.Scalar", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): Scalar", "member" : "smile.cas.ArcCos.apply", "link" : "smile\/cas\/ArcCos.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.Scalar", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.ArcCos.toString", "link" : "smile\/cas\/ArcCos.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.ArcCos#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": Scalar", "member" : "smile.cas.ArcCos.x", "link" : "smile\/cas\/ArcCos.html#x:smile.cas.Scalar", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/ArcCos.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "*", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/ArcCos.html#*(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/ArcCos.html#*(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Scalar", "member" : "smile.cas.Scalar.unary_-", "link" : "smile\/cas\/ArcCos.html#unary_-:smile.cas.Scalar", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): Scalar", "member" : "smile.cas.Scalar.unary_+", "link" : "smile\/cas\/ArcCos.html#unary_+:smile.cas.Scalar", "kind" : "def"}, {"label" : "**", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.**", "link" : "smile\/cas\/ArcCos.html#**(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "\/", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.\/", "link" : "smile\/cas\/ArcCos.html#\/(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "*", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/ArcCos.html#*(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "-", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.-", "link" : "smile\/cas\/ArcCos.html#-(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "+", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.+", "link" : "smile\/cas\/ArcCos.html#+(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var*): Vector", "member" : "smile.cas.Scalar.d", "link" : "smile\/cas\/ArcCos.html#d(dx:smile.cas.Var*):smile.cas.Vector", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): Scalar", "member" : "smile.cas.Scalar.apply", "link" : "smile\/cas\/ArcCos.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.Scalar", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.Scalar.shape", "link" : "smile\/cas\/ArcCos.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.Scalar.rank", "link" : "smile\/cas\/ArcCos.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/ArcCos.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/ArcCos.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/ArcCos.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/ArcCos.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/ArcCos.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/ArcCos.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/ArcCos.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/ArcCos.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/ArcCos.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/ArcCos.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/ArcCos.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/ArcCos.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/ArcCos.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/ArcCos.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/ArcCos.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/ArcCos.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/ArcCos.html", "kind" : "case class"}, {"name" : "smile.cas.ArcCot", "shortDescription" : "acot(x)", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/ArcCot.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ArcCot) => Boolean, msg: => Any): ArcCot", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/ArcCot.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ArcCot) => Boolean): ArcCot", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/ArcCot.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): ArcCot", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/ArcCot.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ArcCot", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/ArcCot.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ArcCot, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/ArcCot.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ArcCot, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/ArcCot.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "simplify", "tail" : "(): Scalar", "member" : "smile.cas.ArcCot.simplify", "link" : "smile\/cas\/ArcCot.html#simplify:smile.cas.Scalar", "kind" : "def"}, {"label" : "d", "tail" : "(dx: VectorVar): Vector", "member" : "smile.cas.ArcCot.d", "link" : "smile\/cas\/ArcCot.html#d(dx:smile.cas.VectorVar):smile.cas.Vector", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var): Scalar", "member" : "smile.cas.ArcCot.d", "link" : "smile\/cas\/ArcCot.html#d(dx:smile.cas.Var):smile.cas.Scalar", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): Scalar", "member" : "smile.cas.ArcCot.apply", "link" : "smile\/cas\/ArcCot.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.Scalar", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.ArcCot.toString", "link" : "smile\/cas\/ArcCot.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.ArcCot#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": Scalar", "member" : "smile.cas.ArcCot.x", "link" : "smile\/cas\/ArcCot.html#x:smile.cas.Scalar", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/ArcCot.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "*", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/ArcCot.html#*(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/ArcCot.html#*(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Scalar", "member" : "smile.cas.Scalar.unary_-", "link" : "smile\/cas\/ArcCot.html#unary_-:smile.cas.Scalar", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): Scalar", "member" : "smile.cas.Scalar.unary_+", "link" : "smile\/cas\/ArcCot.html#unary_+:smile.cas.Scalar", "kind" : "def"}, {"label" : "**", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.**", "link" : "smile\/cas\/ArcCot.html#**(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "\/", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.\/", "link" : "smile\/cas\/ArcCot.html#\/(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "*", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/ArcCot.html#*(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "-", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.-", "link" : "smile\/cas\/ArcCot.html#-(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "+", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.+", "link" : "smile\/cas\/ArcCot.html#+(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var*): Vector", "member" : "smile.cas.Scalar.d", "link" : "smile\/cas\/ArcCot.html#d(dx:smile.cas.Var*):smile.cas.Vector", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): Scalar", "member" : "smile.cas.Scalar.apply", "link" : "smile\/cas\/ArcCot.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.Scalar", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.Scalar.shape", "link" : "smile\/cas\/ArcCot.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.Scalar.rank", "link" : "smile\/cas\/ArcCot.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/ArcCot.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/ArcCot.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/ArcCot.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/ArcCot.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/ArcCot.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/ArcCot.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/ArcCot.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/ArcCot.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/ArcCot.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/ArcCot.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/ArcCot.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/ArcCot.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/ArcCot.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/ArcCot.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/ArcCot.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/ArcCot.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/ArcCot.html", "kind" : "case class"}, {"name" : "smile.cas.ArcSin", "shortDescription" : "asin(x)", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/ArcSin.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ArcSin) => Boolean, msg: => Any): ArcSin", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/ArcSin.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ArcSin) => Boolean): ArcSin", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/ArcSin.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): ArcSin", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/ArcSin.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ArcSin", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/ArcSin.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ArcSin, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/ArcSin.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ArcSin, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/ArcSin.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "simplify", "tail" : "(): Scalar", "member" : "smile.cas.ArcSin.simplify", "link" : "smile\/cas\/ArcSin.html#simplify:smile.cas.Scalar", "kind" : "def"}, {"label" : "d", "tail" : "(dx: VectorVar): Vector", "member" : "smile.cas.ArcSin.d", "link" : "smile\/cas\/ArcSin.html#d(dx:smile.cas.VectorVar):smile.cas.Vector", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var): Scalar", "member" : "smile.cas.ArcSin.d", "link" : "smile\/cas\/ArcSin.html#d(dx:smile.cas.Var):smile.cas.Scalar", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): Scalar", "member" : "smile.cas.ArcSin.apply", "link" : "smile\/cas\/ArcSin.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.Scalar", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.ArcSin.toString", "link" : "smile\/cas\/ArcSin.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.ArcSin#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": Scalar", "member" : "smile.cas.ArcSin.x", "link" : "smile\/cas\/ArcSin.html#x:smile.cas.Scalar", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/ArcSin.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "*", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/ArcSin.html#*(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/ArcSin.html#*(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Scalar", "member" : "smile.cas.Scalar.unary_-", "link" : "smile\/cas\/ArcSin.html#unary_-:smile.cas.Scalar", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): Scalar", "member" : "smile.cas.Scalar.unary_+", "link" : "smile\/cas\/ArcSin.html#unary_+:smile.cas.Scalar", "kind" : "def"}, {"label" : "**", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.**", "link" : "smile\/cas\/ArcSin.html#**(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "\/", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.\/", "link" : "smile\/cas\/ArcSin.html#\/(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "*", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/ArcSin.html#*(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "-", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.-", "link" : "smile\/cas\/ArcSin.html#-(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "+", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.+", "link" : "smile\/cas\/ArcSin.html#+(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var*): Vector", "member" : "smile.cas.Scalar.d", "link" : "smile\/cas\/ArcSin.html#d(dx:smile.cas.Var*):smile.cas.Vector", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): Scalar", "member" : "smile.cas.Scalar.apply", "link" : "smile\/cas\/ArcSin.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.Scalar", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.Scalar.shape", "link" : "smile\/cas\/ArcSin.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.Scalar.rank", "link" : "smile\/cas\/ArcSin.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/ArcSin.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/ArcSin.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/ArcSin.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/ArcSin.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/ArcSin.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/ArcSin.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/ArcSin.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/ArcSin.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/ArcSin.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/ArcSin.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/ArcSin.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/ArcSin.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/ArcSin.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/ArcSin.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/ArcSin.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/ArcSin.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/ArcSin.html", "kind" : "case class"}, {"name" : "smile.cas.ArcTan", "shortDescription" : "atan(x)", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/ArcTan.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ArcTan) => Boolean, msg: => Any): ArcTan", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/ArcTan.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ArcTan) => Boolean): ArcTan", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/ArcTan.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): ArcTan", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/ArcTan.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ArcTan", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/ArcTan.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ArcTan, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/ArcTan.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ArcTan, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/ArcTan.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "simplify", "tail" : "(): Scalar", "member" : "smile.cas.ArcTan.simplify", "link" : "smile\/cas\/ArcTan.html#simplify:smile.cas.Scalar", "kind" : "def"}, {"label" : "d", "tail" : "(dx: VectorVar): Vector", "member" : "smile.cas.ArcTan.d", "link" : "smile\/cas\/ArcTan.html#d(dx:smile.cas.VectorVar):smile.cas.Vector", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var): Scalar", "member" : "smile.cas.ArcTan.d", "link" : "smile\/cas\/ArcTan.html#d(dx:smile.cas.Var):smile.cas.Scalar", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): Scalar", "member" : "smile.cas.ArcTan.apply", "link" : "smile\/cas\/ArcTan.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.Scalar", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.ArcTan.toString", "link" : "smile\/cas\/ArcTan.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.ArcTan#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": Scalar", "member" : "smile.cas.ArcTan.x", "link" : "smile\/cas\/ArcTan.html#x:smile.cas.Scalar", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/ArcTan.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "*", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/ArcTan.html#*(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/ArcTan.html#*(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Scalar", "member" : "smile.cas.Scalar.unary_-", "link" : "smile\/cas\/ArcTan.html#unary_-:smile.cas.Scalar", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): Scalar", "member" : "smile.cas.Scalar.unary_+", "link" : "smile\/cas\/ArcTan.html#unary_+:smile.cas.Scalar", "kind" : "def"}, {"label" : "**", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.**", "link" : "smile\/cas\/ArcTan.html#**(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "\/", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.\/", "link" : "smile\/cas\/ArcTan.html#\/(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "*", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/ArcTan.html#*(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "-", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.-", "link" : "smile\/cas\/ArcTan.html#-(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "+", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.+", "link" : "smile\/cas\/ArcTan.html#+(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var*): Vector", "member" : "smile.cas.Scalar.d", "link" : "smile\/cas\/ArcTan.html#d(dx:smile.cas.Var*):smile.cas.Vector", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): Scalar", "member" : "smile.cas.Scalar.apply", "link" : "smile\/cas\/ArcTan.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.Scalar", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.Scalar.shape", "link" : "smile\/cas\/ArcTan.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.Scalar.rank", "link" : "smile\/cas\/ArcTan.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/ArcTan.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/ArcTan.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/ArcTan.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/ArcTan.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/ArcTan.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/ArcTan.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/ArcTan.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/ArcTan.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/ArcTan.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/ArcTan.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/ArcTan.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/ArcTan.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/ArcTan.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/ArcTan.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/ArcTan.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/ArcTan.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/ArcTan.html", "kind" : "case class"}, {"name" : "smile.cas.Ceil", "shortDescription" : "ceil(x)", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/Ceil.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Ceil) => Boolean, msg: => Any): Ceil", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Ceil.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Ceil) => Boolean): Ceil", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Ceil.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Ceil", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Ceil.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Ceil", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Ceil.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Ceil, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/Ceil.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Ceil, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/Ceil.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "simplify", "tail" : "(): IntScalar", "member" : "smile.cas.Ceil.simplify", "link" : "smile\/cas\/Ceil.html#simplify:smile.cas.IntScalar", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): IntScalar", "member" : "smile.cas.Ceil.apply", "link" : "smile\/cas\/Ceil.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.IntScalar", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.Ceil.toString", "link" : "smile\/cas\/Ceil.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.Ceil#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": Scalar", "member" : "smile.cas.Ceil.x", "link" : "smile\/cas\/Ceil.html#x:smile.cas.Scalar", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/Ceil.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): IntScalar", "member" : "smile.cas.IntScalar.unary_-", "link" : "smile\/cas\/Ceil.html#unary_-:smile.cas.IntScalar", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): IntScalar", "member" : "smile.cas.IntScalar.unary_+", "link" : "smile\/cas\/Ceil.html#unary_+:smile.cas.IntScalar", "kind" : "def"}, {"label" : "**", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.**", "link" : "smile\/cas\/Ceil.html#**(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "%", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.%", "link" : "smile\/cas\/Ceil.html#%(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "\/", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.\/", "link" : "smile\/cas\/Ceil.html#\/(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "*", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.*", "link" : "smile\/cas\/Ceil.html#*(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "-", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.-", "link" : "smile\/cas\/Ceil.html#-(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "+", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.+", "link" : "smile\/cas\/Ceil.html#+(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): IntScalar", "member" : "smile.cas.IntScalar.apply", "link" : "smile\/cas\/Ceil.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.IntScalar", "kind" : "def"}, {"label" : "toScalar", "tail" : "(): Scalar", "member" : "smile.cas.IntScalar.toScalar", "link" : "smile\/cas\/Ceil.html#toScalar:smile.cas.Scalar", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.IntScalar.shape", "link" : "smile\/cas\/Ceil.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.IntScalar.rank", "link" : "smile\/cas\/Ceil.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/Ceil.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/Ceil.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/Ceil.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/Ceil.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/Ceil.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/Ceil.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/Ceil.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Ceil.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Ceil.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Ceil.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/Ceil.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/Ceil.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/Ceil.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/Ceil.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/Ceil.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/Ceil.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/Ceil.html", "kind" : "case class"}, {"name" : "smile.cas.Const", "shortDescription" : "Constant value.", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/Const.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Const) => Boolean, msg: => Any): Const", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Const.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Const) => Boolean): Const", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Const.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Const", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Const.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Const", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Const.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Const, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/Const.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Const, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/Const.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "d", "tail" : "(dx: VectorVar): Vector", "member" : "smile.cas.Const.d", "link" : "smile\/cas\/Const.html#d(dx:smile.cas.VectorVar):smile.cas.Vector", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var): Scalar", "member" : "smile.cas.Const.d", "link" : "smile\/cas\/Const.html#d(dx:smile.cas.Var):smile.cas.Scalar", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): Scalar", "member" : "smile.cas.Const.apply", "link" : "smile\/cas\/Const.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.Scalar", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.Const.toString", "link" : "smile\/cas\/Const.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.Const#<init>", "error" : "unsupported entity"}, {"label" : "symbol", "tail" : ": String", "member" : "smile.cas.Const.symbol", "link" : "smile\/cas\/Const.html#symbol:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/Const.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "*", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/Const.html#*(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/Const.html#*(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Scalar", "member" : "smile.cas.Scalar.unary_-", "link" : "smile\/cas\/Const.html#unary_-:smile.cas.Scalar", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): Scalar", "member" : "smile.cas.Scalar.unary_+", "link" : "smile\/cas\/Const.html#unary_+:smile.cas.Scalar", "kind" : "def"}, {"label" : "**", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.**", "link" : "smile\/cas\/Const.html#**(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "\/", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.\/", "link" : "smile\/cas\/Const.html#\/(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "*", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/Const.html#*(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "-", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.-", "link" : "smile\/cas\/Const.html#-(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "+", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.+", "link" : "smile\/cas\/Const.html#+(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var*): Vector", "member" : "smile.cas.Scalar.d", "link" : "smile\/cas\/Const.html#d(dx:smile.cas.Var*):smile.cas.Vector", "kind" : "def"}, {"label" : "simplify", "tail" : "(): Scalar", "member" : "smile.cas.Scalar.simplify", "link" : "smile\/cas\/Const.html#simplify:smile.cas.Scalar", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): Scalar", "member" : "smile.cas.Scalar.apply", "link" : "smile\/cas\/Const.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.Scalar", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.Scalar.shape", "link" : "smile\/cas\/Const.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.Scalar.rank", "link" : "smile\/cas\/Const.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/Const.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/Const.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/Const.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/Const.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/Const.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/Const.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/Const.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Const.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Const.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Const.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/Const.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/Const.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/Const.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/Const.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/Const.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/Const.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/Const.html", "kind" : "case class"}, {"name" : "smile.cas.ConstMatrix", "shortDescription" : "Constant matrix.", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/ConstMatrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ConstMatrix) => Boolean, msg: => Any): ConstMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/ConstMatrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ConstMatrix) => Boolean): ConstMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/ConstMatrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): ConstMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/ConstMatrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ConstMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/ConstMatrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ConstMatrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/ConstMatrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ConstMatrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/ConstMatrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): Matrix", "member" : "smile.cas.ConstMatrix.apply", "link" : "smile\/cas\/ConstMatrix.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.Matrix", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var): Matrix", "member" : "smile.cas.ConstMatrix.d", "link" : "smile\/cas\/ConstMatrix.html#d(dx:smile.cas.Var):smile.cas.Matrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.ConstMatrix.toString", "link" : "smile\/cas\/ConstMatrix.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.ConstMatrix#<init>", "error" : "unsupported entity"}, {"label" : "size", "tail" : ": (IntScalar, IntScalar)", "member" : "smile.cas.ConstMatrix.size", "link" : "smile\/cas\/ConstMatrix.html#size:(smile.cas.IntScalar,smile.cas.IntScalar)", "kind" : "val"}, {"label" : "symbol", "tail" : ": String", "member" : "smile.cas.ConstMatrix.symbol", "link" : "smile\/cas\/ConstMatrix.html#symbol:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/ConstMatrix.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "inv", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.inv", "link" : "smile\/cas\/ConstMatrix.html#inv:smile.cas.Matrix", "kind" : "def"}, {"label" : "t", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.t", "link" : "smile\/cas\/ConstMatrix.html#t:smile.cas.Matrix", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.unary_-", "link" : "smile\/cas\/ConstMatrix.html#unary_-:smile.cas.Matrix", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.unary_+", "link" : "smile\/cas\/ConstMatrix.html#unary_+:smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Matrix.*", "link" : "smile\/cas\/ConstMatrix.html#*(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Matrix.*", "link" : "smile\/cas\/ConstMatrix.html#*(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "*", "tail" : "(y: Scalar): Matrix", "member" : "smile.cas.Matrix.*", "link" : "smile\/cas\/ConstMatrix.html#*(y:smile.cas.Scalar):smile.cas.Matrix", "kind" : "def"}, {"label" : "-", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Matrix.-", "link" : "smile\/cas\/ConstMatrix.html#-(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "+", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Matrix.+", "link" : "smile\/cas\/ConstMatrix.html#+(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "simplify", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.simplify", "link" : "smile\/cas\/ConstMatrix.html#simplify:smile.cas.Matrix", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): Matrix", "member" : "smile.cas.Matrix.apply", "link" : "smile\/cas\/ConstMatrix.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.Matrix", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.Matrix.shape", "link" : "smile\/cas\/ConstMatrix.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.Matrix.rank", "link" : "smile\/cas\/ConstMatrix.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/ConstMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/ConstMatrix.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/ConstMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/ConstMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/ConstMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/ConstMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/ConstMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/ConstMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/ConstMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/ConstMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/ConstMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/ConstMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/ConstMatrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/ConstMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/ConstMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/ConstMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/ConstMatrix.html", "kind" : "case class"}, {"name" : "smile.cas.ConstVector", "shortDescription" : "Constant vector.", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/ConstVector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ConstVector) => Boolean, msg: => Any): ConstVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/ConstVector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ConstVector) => Boolean): ConstVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/ConstVector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): ConstVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/ConstVector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ConstVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/ConstVector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ConstVector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/ConstVector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ConstVector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/ConstVector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): Vector", "member" : "smile.cas.ConstVector.apply", "link" : "smile\/cas\/ConstVector.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.Vector", "kind" : "def"}, {"label" : "d", "tail" : "(dx: VectorVar): Matrix", "member" : "smile.cas.ConstVector.d", "link" : "smile\/cas\/ConstVector.html#d(dx:smile.cas.VectorVar):smile.cas.Matrix", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var): Vector", "member" : "smile.cas.ConstVector.d", "link" : "smile\/cas\/ConstVector.html#d(dx:smile.cas.Var):smile.cas.Vector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.ConstVector.toString", "link" : "smile\/cas\/ConstVector.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.ConstVector#<init>", "error" : "unsupported entity"}, {"label" : "size", "tail" : ": IntScalar", "member" : "smile.cas.ConstVector.size", "link" : "smile\/cas\/ConstVector.html#size:smile.cas.IntScalar", "kind" : "val"}, {"label" : "symbol", "tail" : ": String", "member" : "smile.cas.ConstVector.symbol", "link" : "smile\/cas\/ConstVector.html#symbol:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/ConstVector.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Vector", "member" : "smile.cas.Vector.unary_-", "link" : "smile\/cas\/ConstVector.html#unary_-:smile.cas.Vector", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): Vector", "member" : "smile.cas.Vector.unary_+", "link" : "smile\/cas\/ConstVector.html#unary_+:smile.cas.Vector", "kind" : "def"}, {"label" : "*~", "tail" : "(y: Vector): Matrix", "member" : "smile.cas.Vector.*~", "link" : "smile\/cas\/ConstVector.html#*~(y:smile.cas.Vector):smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Vector): Scalar", "member" : "smile.cas.Vector.*", "link" : "smile\/cas\/ConstVector.html#*(y:smile.cas.Vector):smile.cas.Scalar", "kind" : "def"}, {"label" : "\/", "tail" : "(y: Scalar): Vector", "member" : "smile.cas.Vector.\/", "link" : "smile\/cas\/ConstVector.html#\/(y:smile.cas.Scalar):smile.cas.Vector", "kind" : "def"}, {"label" : "*", "tail" : "(y: Scalar): Vector", "member" : "smile.cas.Vector.*", "link" : "smile\/cas\/ConstVector.html#*(y:smile.cas.Scalar):smile.cas.Vector", "kind" : "def"}, {"label" : "-", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Vector.-", "link" : "smile\/cas\/ConstVector.html#-(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "+", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Vector.+", "link" : "smile\/cas\/ConstVector.html#+(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "simplify", "tail" : "(): Vector", "member" : "smile.cas.Vector.simplify", "link" : "smile\/cas\/ConstVector.html#simplify:smile.cas.Vector", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): Vector", "member" : "smile.cas.Vector.apply", "link" : "smile\/cas\/ConstVector.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.Vector", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.Vector.shape", "link" : "smile\/cas\/ConstVector.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.Vector.rank", "link" : "smile\/cas\/ConstVector.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/ConstVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/ConstVector.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/ConstVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/ConstVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/ConstVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/ConstVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/ConstVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/ConstVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/ConstVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/ConstVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/ConstVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/ConstVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/ConstVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/ConstVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/ConstVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/ConstVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/ConstVector.html", "kind" : "case class"}, {"name" : "smile.cas.Cos", "shortDescription" : "cos(x)", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/Cos.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Cos) => Boolean, msg: => Any): Cos", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Cos.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Cos) => Boolean): Cos", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Cos.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Cos", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Cos.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Cos", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Cos.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Cos, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/Cos.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Cos, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/Cos.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "simplify", "tail" : "(): Scalar", "member" : "smile.cas.Cos.simplify", "link" : "smile\/cas\/Cos.html#simplify:smile.cas.Scalar", "kind" : "def"}, {"label" : "d", "tail" : "(dx: VectorVar): Vector", "member" : "smile.cas.Cos.d", "link" : "smile\/cas\/Cos.html#d(dx:smile.cas.VectorVar):smile.cas.Vector", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var): Scalar", "member" : "smile.cas.Cos.d", "link" : "smile\/cas\/Cos.html#d(dx:smile.cas.Var):smile.cas.Scalar", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): Scalar", "member" : "smile.cas.Cos.apply", "link" : "smile\/cas\/Cos.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.Scalar", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.Cos.toString", "link" : "smile\/cas\/Cos.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.Cos#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": Scalar", "member" : "smile.cas.Cos.x", "link" : "smile\/cas\/Cos.html#x:smile.cas.Scalar", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/Cos.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "*", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/Cos.html#*(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/Cos.html#*(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Scalar", "member" : "smile.cas.Scalar.unary_-", "link" : "smile\/cas\/Cos.html#unary_-:smile.cas.Scalar", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): Scalar", "member" : "smile.cas.Scalar.unary_+", "link" : "smile\/cas\/Cos.html#unary_+:smile.cas.Scalar", "kind" : "def"}, {"label" : "**", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.**", "link" : "smile\/cas\/Cos.html#**(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "\/", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.\/", "link" : "smile\/cas\/Cos.html#\/(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "*", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/Cos.html#*(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "-", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.-", "link" : "smile\/cas\/Cos.html#-(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "+", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.+", "link" : "smile\/cas\/Cos.html#+(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var*): Vector", "member" : "smile.cas.Scalar.d", "link" : "smile\/cas\/Cos.html#d(dx:smile.cas.Var*):smile.cas.Vector", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): Scalar", "member" : "smile.cas.Scalar.apply", "link" : "smile\/cas\/Cos.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.Scalar", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.Scalar.shape", "link" : "smile\/cas\/Cos.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.Scalar.rank", "link" : "smile\/cas\/Cos.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/Cos.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/Cos.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/Cos.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/Cos.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/Cos.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/Cos.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/Cos.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Cos.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Cos.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Cos.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/Cos.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/Cos.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/Cos.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/Cos.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/Cos.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/Cos.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/Cos.html", "kind" : "case class"}, {"name" : "smile.cas.Cot", "shortDescription" : "cot(x)", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/Cot.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Cot) => Boolean, msg: => Any): Cot", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Cot.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Cot) => Boolean): Cot", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Cot.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Cot", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Cot.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Cot", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Cot.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Cot, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/Cot.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Cot, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/Cot.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "simplify", "tail" : "(): Scalar", "member" : "smile.cas.Cot.simplify", "link" : "smile\/cas\/Cot.html#simplify:smile.cas.Scalar", "kind" : "def"}, {"label" : "d", "tail" : "(dx: VectorVar): Vector", "member" : "smile.cas.Cot.d", "link" : "smile\/cas\/Cot.html#d(dx:smile.cas.VectorVar):smile.cas.Vector", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var): Scalar", "member" : "smile.cas.Cot.d", "link" : "smile\/cas\/Cot.html#d(dx:smile.cas.Var):smile.cas.Scalar", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): Scalar", "member" : "smile.cas.Cot.apply", "link" : "smile\/cas\/Cot.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.Scalar", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.Cot.toString", "link" : "smile\/cas\/Cot.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.Cot#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": Scalar", "member" : "smile.cas.Cot.x", "link" : "smile\/cas\/Cot.html#x:smile.cas.Scalar", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/Cot.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "*", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/Cot.html#*(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/Cot.html#*(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Scalar", "member" : "smile.cas.Scalar.unary_-", "link" : "smile\/cas\/Cot.html#unary_-:smile.cas.Scalar", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): Scalar", "member" : "smile.cas.Scalar.unary_+", "link" : "smile\/cas\/Cot.html#unary_+:smile.cas.Scalar", "kind" : "def"}, {"label" : "**", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.**", "link" : "smile\/cas\/Cot.html#**(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "\/", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.\/", "link" : "smile\/cas\/Cot.html#\/(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "*", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/Cot.html#*(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "-", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.-", "link" : "smile\/cas\/Cot.html#-(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "+", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.+", "link" : "smile\/cas\/Cot.html#+(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var*): Vector", "member" : "smile.cas.Scalar.d", "link" : "smile\/cas\/Cot.html#d(dx:smile.cas.Var*):smile.cas.Vector", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): Scalar", "member" : "smile.cas.Scalar.apply", "link" : "smile\/cas\/Cot.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.Scalar", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.Scalar.shape", "link" : "smile\/cas\/Cot.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.Scalar.rank", "link" : "smile\/cas\/Cot.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/Cot.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/Cot.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/Cot.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/Cot.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/Cot.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/Cot.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/Cot.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Cot.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Cot.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Cot.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/Cot.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/Cot.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/Cot.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/Cot.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/Cot.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/Cot.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/Cot.html", "kind" : "case class"}, {"name" : "smile.cas.DiagonalMatrix", "shortDescription" : "Diagonal matrix", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/DiagonalMatrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (DiagonalMatrix) => Boolean, msg: => Any): DiagonalMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/DiagonalMatrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (DiagonalMatrix) => Boolean): DiagonalMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/DiagonalMatrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): DiagonalMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/DiagonalMatrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): DiagonalMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/DiagonalMatrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (DiagonalMatrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/DiagonalMatrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (DiagonalMatrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/DiagonalMatrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "simplify", "tail" : "(): Matrix", "member" : "smile.cas.DiagonalMatrix.simplify", "link" : "smile\/cas\/DiagonalMatrix.html#simplify:smile.cas.Matrix", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): Matrix", "member" : "smile.cas.DiagonalMatrix.apply", "link" : "smile\/cas\/DiagonalMatrix.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.Matrix", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var): Matrix", "member" : "smile.cas.DiagonalMatrix.d", "link" : "smile\/cas\/DiagonalMatrix.html#d(dx:smile.cas.Var):smile.cas.Matrix", "kind" : "def"}, {"label" : "size", "tail" : "(): (IntScalar, IntScalar)", "member" : "smile.cas.DiagonalMatrix.size", "link" : "smile\/cas\/DiagonalMatrix.html#size:(smile.cas.IntScalar,smile.cas.IntScalar)", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.DiagonalMatrix.toString", "link" : "smile\/cas\/DiagonalMatrix.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.DiagonalMatrix#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": Scalar*", "member" : "smile.cas.DiagonalMatrix.x", "link" : "smile\/cas\/DiagonalMatrix.html#x:smile.cas.Scalar*", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/DiagonalMatrix.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "inv", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.inv", "link" : "smile\/cas\/DiagonalMatrix.html#inv:smile.cas.Matrix", "kind" : "def"}, {"label" : "t", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.t", "link" : "smile\/cas\/DiagonalMatrix.html#t:smile.cas.Matrix", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.unary_-", "link" : "smile\/cas\/DiagonalMatrix.html#unary_-:smile.cas.Matrix", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.unary_+", "link" : "smile\/cas\/DiagonalMatrix.html#unary_+:smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Matrix.*", "link" : "smile\/cas\/DiagonalMatrix.html#*(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Matrix.*", "link" : "smile\/cas\/DiagonalMatrix.html#*(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "*", "tail" : "(y: Scalar): Matrix", "member" : "smile.cas.Matrix.*", "link" : "smile\/cas\/DiagonalMatrix.html#*(y:smile.cas.Scalar):smile.cas.Matrix", "kind" : "def"}, {"label" : "-", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Matrix.-", "link" : "smile\/cas\/DiagonalMatrix.html#-(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "+", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Matrix.+", "link" : "smile\/cas\/DiagonalMatrix.html#+(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): Matrix", "member" : "smile.cas.Matrix.apply", "link" : "smile\/cas\/DiagonalMatrix.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.Matrix", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.Matrix.shape", "link" : "smile\/cas\/DiagonalMatrix.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.Matrix.rank", "link" : "smile\/cas\/DiagonalMatrix.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/DiagonalMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/DiagonalMatrix.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/DiagonalMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/DiagonalMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/DiagonalMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/DiagonalMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/DiagonalMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/DiagonalMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/DiagonalMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/DiagonalMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/DiagonalMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/DiagonalMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/DiagonalMatrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/DiagonalMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/DiagonalMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/DiagonalMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/DiagonalMatrix.html", "kind" : "case class"}, {"name" : "smile.cas.Div", "shortDescription" : "x \/ y", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/Div.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Div) => Boolean, msg: => Any): Div", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Div.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Div) => Boolean): Div", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Div.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Div", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Div.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Div", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Div.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Div, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/Div.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Div, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/Div.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "simplify", "tail" : "(): Scalar", "member" : "smile.cas.Div.simplify", "link" : "smile\/cas\/Div.html#simplify:smile.cas.Scalar", "kind" : "def"}, {"label" : "d", "tail" : "(dx: VectorVar): Vector", "member" : "smile.cas.Div.d", "link" : "smile\/cas\/Div.html#d(dx:smile.cas.VectorVar):smile.cas.Vector", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var): Scalar", "member" : "smile.cas.Div.d", "link" : "smile\/cas\/Div.html#d(dx:smile.cas.Var):smile.cas.Scalar", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): Scalar", "member" : "smile.cas.Div.apply", "link" : "smile\/cas\/Div.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.Scalar", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.Div.toString", "link" : "smile\/cas\/Div.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.Div#<init>", "error" : "unsupported entity"}, {"label" : "y", "tail" : ": Scalar", "member" : "smile.cas.Div.y", "link" : "smile\/cas\/Div.html#y:smile.cas.Scalar", "kind" : "val"}, {"label" : "x", "tail" : ": Scalar", "member" : "smile.cas.Div.x", "link" : "smile\/cas\/Div.html#x:smile.cas.Scalar", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/Div.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "*", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/Div.html#*(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/Div.html#*(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Scalar", "member" : "smile.cas.Scalar.unary_-", "link" : "smile\/cas\/Div.html#unary_-:smile.cas.Scalar", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): Scalar", "member" : "smile.cas.Scalar.unary_+", "link" : "smile\/cas\/Div.html#unary_+:smile.cas.Scalar", "kind" : "def"}, {"label" : "**", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.**", "link" : "smile\/cas\/Div.html#**(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "\/", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.\/", "link" : "smile\/cas\/Div.html#\/(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "*", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/Div.html#*(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "-", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.-", "link" : "smile\/cas\/Div.html#-(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "+", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.+", "link" : "smile\/cas\/Div.html#+(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var*): Vector", "member" : "smile.cas.Scalar.d", "link" : "smile\/cas\/Div.html#d(dx:smile.cas.Var*):smile.cas.Vector", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): Scalar", "member" : "smile.cas.Scalar.apply", "link" : "smile\/cas\/Div.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.Scalar", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.Scalar.shape", "link" : "smile\/cas\/Div.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.Scalar.rank", "link" : "smile\/cas\/Div.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/Div.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/Div.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/Div.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/Div.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/Div.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/Div.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/Div.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Div.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Div.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Div.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/Div.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/Div.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/Div.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/Div.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/Div.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/Div.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/Div.html", "kind" : "case class"}, {"name" : "smile.cas.Exp", "shortDescription" : "exp(x)", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/Exp.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Exp) => Boolean, msg: => Any): Exp", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Exp.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Exp) => Boolean): Exp", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Exp.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Exp", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Exp.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Exp", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Exp.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Exp, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/Exp.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Exp, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/Exp.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "simplify", "tail" : "(): Scalar", "member" : "smile.cas.Exp.simplify", "link" : "smile\/cas\/Exp.html#simplify:smile.cas.Scalar", "kind" : "def"}, {"label" : "d", "tail" : "(dx: VectorVar): Vector", "member" : "smile.cas.Exp.d", "link" : "smile\/cas\/Exp.html#d(dx:smile.cas.VectorVar):smile.cas.Vector", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var): Scalar", "member" : "smile.cas.Exp.d", "link" : "smile\/cas\/Exp.html#d(dx:smile.cas.Var):smile.cas.Scalar", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): Scalar", "member" : "smile.cas.Exp.apply", "link" : "smile\/cas\/Exp.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.Scalar", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.Exp.toString", "link" : "smile\/cas\/Exp.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.Exp#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": Scalar", "member" : "smile.cas.Exp.x", "link" : "smile\/cas\/Exp.html#x:smile.cas.Scalar", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/Exp.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "*", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/Exp.html#*(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/Exp.html#*(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Scalar", "member" : "smile.cas.Scalar.unary_-", "link" : "smile\/cas\/Exp.html#unary_-:smile.cas.Scalar", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): Scalar", "member" : "smile.cas.Scalar.unary_+", "link" : "smile\/cas\/Exp.html#unary_+:smile.cas.Scalar", "kind" : "def"}, {"label" : "**", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.**", "link" : "smile\/cas\/Exp.html#**(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "\/", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.\/", "link" : "smile\/cas\/Exp.html#\/(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "*", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/Exp.html#*(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "-", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.-", "link" : "smile\/cas\/Exp.html#-(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "+", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.+", "link" : "smile\/cas\/Exp.html#+(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var*): Vector", "member" : "smile.cas.Scalar.d", "link" : "smile\/cas\/Exp.html#d(dx:smile.cas.Var*):smile.cas.Vector", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): Scalar", "member" : "smile.cas.Scalar.apply", "link" : "smile\/cas\/Exp.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.Scalar", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.Scalar.shape", "link" : "smile\/cas\/Exp.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.Scalar.rank", "link" : "smile\/cas\/Exp.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/Exp.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/Exp.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/Exp.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/Exp.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/Exp.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/Exp.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/Exp.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Exp.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Exp.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Exp.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/Exp.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/Exp.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/Exp.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/Exp.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/Exp.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/Exp.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/Exp.html", "kind" : "case class"}, {"name" : "smile.cas.Floor", "shortDescription" : "floor(x)", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/Floor.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Floor) => Boolean, msg: => Any): Floor", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Floor.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Floor) => Boolean): Floor", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Floor.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Floor", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Floor.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Floor", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Floor.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Floor, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/Floor.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Floor, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/Floor.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "simplify", "tail" : "(): IntScalar", "member" : "smile.cas.Floor.simplify", "link" : "smile\/cas\/Floor.html#simplify:smile.cas.IntScalar", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): IntScalar", "member" : "smile.cas.Floor.apply", "link" : "smile\/cas\/Floor.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.IntScalar", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.Floor.toString", "link" : "smile\/cas\/Floor.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.Floor#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": Scalar", "member" : "smile.cas.Floor.x", "link" : "smile\/cas\/Floor.html#x:smile.cas.Scalar", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/Floor.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): IntScalar", "member" : "smile.cas.IntScalar.unary_-", "link" : "smile\/cas\/Floor.html#unary_-:smile.cas.IntScalar", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): IntScalar", "member" : "smile.cas.IntScalar.unary_+", "link" : "smile\/cas\/Floor.html#unary_+:smile.cas.IntScalar", "kind" : "def"}, {"label" : "**", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.**", "link" : "smile\/cas\/Floor.html#**(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "%", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.%", "link" : "smile\/cas\/Floor.html#%(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "\/", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.\/", "link" : "smile\/cas\/Floor.html#\/(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "*", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.*", "link" : "smile\/cas\/Floor.html#*(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "-", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.-", "link" : "smile\/cas\/Floor.html#-(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "+", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.+", "link" : "smile\/cas\/Floor.html#+(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): IntScalar", "member" : "smile.cas.IntScalar.apply", "link" : "smile\/cas\/Floor.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.IntScalar", "kind" : "def"}, {"label" : "toScalar", "tail" : "(): Scalar", "member" : "smile.cas.IntScalar.toScalar", "link" : "smile\/cas\/Floor.html#toScalar:smile.cas.Scalar", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.IntScalar.shape", "link" : "smile\/cas\/Floor.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.IntScalar.rank", "link" : "smile\/cas\/Floor.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/Floor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/Floor.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/Floor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/Floor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/Floor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/Floor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/Floor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Floor.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Floor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Floor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/Floor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/Floor.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/Floor.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/Floor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/Floor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/Floor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/Floor.html", "kind" : "case class"}, {"name" : "smile.cas.GradientVector", "shortDescription" : "The derivative of a scalar y with respect to a vector x.", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/GradientVector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (GradientVector) => Boolean, msg: => Any): GradientVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/GradientVector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (GradientVector) => Boolean): GradientVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/GradientVector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): GradientVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/GradientVector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): GradientVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/GradientVector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (GradientVector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/GradientVector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (GradientVector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/GradientVector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): Vector", "member" : "smile.cas.GradientVector.apply", "link" : "smile\/cas\/GradientVector.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.Vector", "kind" : "def"}, {"label" : "d", "tail" : "(dx: VectorVar): Matrix", "member" : "smile.cas.GradientVector.d", "link" : "smile\/cas\/GradientVector.html#d(dx:smile.cas.VectorVar):smile.cas.Matrix", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var): Vector", "member" : "smile.cas.GradientVector.d", "link" : "smile\/cas\/GradientVector.html#d(dx:smile.cas.Var):smile.cas.Vector", "kind" : "def"}, {"label" : "size", "tail" : "(): IntScalar", "member" : "smile.cas.GradientVector.size", "link" : "smile\/cas\/GradientVector.html#size:smile.cas.IntScalar", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.GradientVector.toString", "link" : "smile\/cas\/GradientVector.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.GradientVector#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": VectorVar", "member" : "smile.cas.GradientVector.x", "link" : "smile\/cas\/GradientVector.html#x:smile.cas.VectorVar", "kind" : "val"}, {"label" : "y", "tail" : ": Var", "member" : "smile.cas.GradientVector.y", "link" : "smile\/cas\/GradientVector.html#y:smile.cas.Var", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/GradientVector.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Vector", "member" : "smile.cas.Vector.unary_-", "link" : "smile\/cas\/GradientVector.html#unary_-:smile.cas.Vector", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): Vector", "member" : "smile.cas.Vector.unary_+", "link" : "smile\/cas\/GradientVector.html#unary_+:smile.cas.Vector", "kind" : "def"}, {"label" : "*~", "tail" : "(y: Vector): Matrix", "member" : "smile.cas.Vector.*~", "link" : "smile\/cas\/GradientVector.html#*~(y:smile.cas.Vector):smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Vector): Scalar", "member" : "smile.cas.Vector.*", "link" : "smile\/cas\/GradientVector.html#*(y:smile.cas.Vector):smile.cas.Scalar", "kind" : "def"}, {"label" : "\/", "tail" : "(y: Scalar): Vector", "member" : "smile.cas.Vector.\/", "link" : "smile\/cas\/GradientVector.html#\/(y:smile.cas.Scalar):smile.cas.Vector", "kind" : "def"}, {"label" : "*", "tail" : "(y: Scalar): Vector", "member" : "smile.cas.Vector.*", "link" : "smile\/cas\/GradientVector.html#*(y:smile.cas.Scalar):smile.cas.Vector", "kind" : "def"}, {"label" : "-", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Vector.-", "link" : "smile\/cas\/GradientVector.html#-(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "+", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Vector.+", "link" : "smile\/cas\/GradientVector.html#+(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "simplify", "tail" : "(): Vector", "member" : "smile.cas.Vector.simplify", "link" : "smile\/cas\/GradientVector.html#simplify:smile.cas.Vector", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): Vector", "member" : "smile.cas.Vector.apply", "link" : "smile\/cas\/GradientVector.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.Vector", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.Vector.shape", "link" : "smile\/cas\/GradientVector.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.Vector.rank", "link" : "smile\/cas\/GradientVector.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/GradientVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/GradientVector.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/GradientVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/GradientVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/GradientVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/GradientVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/GradientVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/GradientVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/GradientVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/GradientVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/GradientVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/GradientVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/GradientVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/GradientVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/GradientVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/GradientVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/GradientVector.html", "kind" : "case class"}, {"name" : "smile.cas.IdentityMatrix", "shortDescription" : "Identity matrix", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/IdentityMatrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IdentityMatrix) => Boolean, msg: => Any): IdentityMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/IdentityMatrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IdentityMatrix) => Boolean): IdentityMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/IdentityMatrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): IdentityMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/IdentityMatrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): IdentityMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/IdentityMatrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (IdentityMatrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/IdentityMatrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (IdentityMatrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/IdentityMatrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): Matrix", "member" : "smile.cas.IdentityMatrix.apply", "link" : "smile\/cas\/IdentityMatrix.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.Matrix", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var): Matrix", "member" : "smile.cas.IdentityMatrix.d", "link" : "smile\/cas\/IdentityMatrix.html#d(dx:smile.cas.Var):smile.cas.Matrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.IdentityMatrix.toString", "link" : "smile\/cas\/IdentityMatrix.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.IdentityMatrix#<init>", "error" : "unsupported entity"}, {"label" : "size", "tail" : ": (IntScalar, IntScalar)", "member" : "smile.cas.IdentityMatrix.size", "link" : "smile\/cas\/IdentityMatrix.html#size:(smile.cas.IntScalar,smile.cas.IntScalar)", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/IdentityMatrix.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "inv", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.inv", "link" : "smile\/cas\/IdentityMatrix.html#inv:smile.cas.Matrix", "kind" : "def"}, {"label" : "t", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.t", "link" : "smile\/cas\/IdentityMatrix.html#t:smile.cas.Matrix", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.unary_-", "link" : "smile\/cas\/IdentityMatrix.html#unary_-:smile.cas.Matrix", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.unary_+", "link" : "smile\/cas\/IdentityMatrix.html#unary_+:smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Matrix.*", "link" : "smile\/cas\/IdentityMatrix.html#*(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Matrix.*", "link" : "smile\/cas\/IdentityMatrix.html#*(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "*", "tail" : "(y: Scalar): Matrix", "member" : "smile.cas.Matrix.*", "link" : "smile\/cas\/IdentityMatrix.html#*(y:smile.cas.Scalar):smile.cas.Matrix", "kind" : "def"}, {"label" : "-", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Matrix.-", "link" : "smile\/cas\/IdentityMatrix.html#-(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "+", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Matrix.+", "link" : "smile\/cas\/IdentityMatrix.html#+(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "simplify", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.simplify", "link" : "smile\/cas\/IdentityMatrix.html#simplify:smile.cas.Matrix", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): Matrix", "member" : "smile.cas.Matrix.apply", "link" : "smile\/cas\/IdentityMatrix.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.Matrix", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.Matrix.shape", "link" : "smile\/cas\/IdentityMatrix.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.Matrix.rank", "link" : "smile\/cas\/IdentityMatrix.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/IdentityMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/IdentityMatrix.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/IdentityMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/IdentityMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/IdentityMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/IdentityMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/IdentityMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/IdentityMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/IdentityMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/IdentityMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/IdentityMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/IdentityMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/IdentityMatrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/IdentityMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/IdentityMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/IdentityMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/IdentityMatrix.html", "kind" : "case class"}, {"name" : "smile.cas.InnerProduct", "shortDescription" : "Inner product (x * y)", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/InnerProduct.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (InnerProduct) => Boolean, msg: => Any): InnerProduct", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/InnerProduct.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (InnerProduct) => Boolean): InnerProduct", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/InnerProduct.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): InnerProduct", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/InnerProduct.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): InnerProduct", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/InnerProduct.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (InnerProduct, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/InnerProduct.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (InnerProduct, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/InnerProduct.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "simplify", "tail" : "(): Scalar", "member" : "smile.cas.InnerProduct.simplify", "link" : "smile\/cas\/InnerProduct.html#simplify:smile.cas.Scalar", "kind" : "def"}, {"label" : "d", "tail" : "(dx: VectorVar): Vector", "member" : "smile.cas.InnerProduct.d", "link" : "smile\/cas\/InnerProduct.html#d(dx:smile.cas.VectorVar):smile.cas.Vector", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var): Scalar", "member" : "smile.cas.InnerProduct.d", "link" : "smile\/cas\/InnerProduct.html#d(dx:smile.cas.Var):smile.cas.Scalar", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): Scalar", "member" : "smile.cas.InnerProduct.apply", "link" : "smile\/cas\/InnerProduct.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.Scalar", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.InnerProduct.toString", "link" : "smile\/cas\/InnerProduct.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.InnerProduct#<init>", "error" : "unsupported entity"}, {"label" : "y", "tail" : ": Vector", "member" : "smile.cas.InnerProduct.y", "link" : "smile\/cas\/InnerProduct.html#y:smile.cas.Vector", "kind" : "val"}, {"label" : "x", "tail" : ": Vector", "member" : "smile.cas.InnerProduct.x", "link" : "smile\/cas\/InnerProduct.html#x:smile.cas.Vector", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/InnerProduct.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "*", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/InnerProduct.html#*(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/InnerProduct.html#*(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Scalar", "member" : "smile.cas.Scalar.unary_-", "link" : "smile\/cas\/InnerProduct.html#unary_-:smile.cas.Scalar", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): Scalar", "member" : "smile.cas.Scalar.unary_+", "link" : "smile\/cas\/InnerProduct.html#unary_+:smile.cas.Scalar", "kind" : "def"}, {"label" : "**", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.**", "link" : "smile\/cas\/InnerProduct.html#**(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "\/", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.\/", "link" : "smile\/cas\/InnerProduct.html#\/(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "*", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/InnerProduct.html#*(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "-", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.-", "link" : "smile\/cas\/InnerProduct.html#-(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "+", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.+", "link" : "smile\/cas\/InnerProduct.html#+(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var*): Vector", "member" : "smile.cas.Scalar.d", "link" : "smile\/cas\/InnerProduct.html#d(dx:smile.cas.Var*):smile.cas.Vector", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): Scalar", "member" : "smile.cas.Scalar.apply", "link" : "smile\/cas\/InnerProduct.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.Scalar", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.Scalar.shape", "link" : "smile\/cas\/InnerProduct.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.Scalar.rank", "link" : "smile\/cas\/InnerProduct.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/InnerProduct.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/InnerProduct.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/InnerProduct.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/InnerProduct.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/InnerProduct.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/InnerProduct.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/InnerProduct.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/InnerProduct.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/InnerProduct.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/InnerProduct.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/InnerProduct.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/InnerProduct.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/InnerProduct.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/InnerProduct.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/InnerProduct.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/InnerProduct.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/InnerProduct.html", "kind" : "case class"}, {"name" : "smile.cas.Int2Scalar", "shortDescription" : "Explicit conversion of int to float.", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/Int2Scalar.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Int2Scalar) => Boolean, msg: => Any): Int2Scalar", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Int2Scalar.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Int2Scalar) => Boolean): Int2Scalar", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Int2Scalar.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Int2Scalar", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Int2Scalar.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Int2Scalar", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Int2Scalar.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Int2Scalar, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/Int2Scalar.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Int2Scalar, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/Int2Scalar.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "d", "tail" : "(dx: VectorVar): Vector", "member" : "smile.cas.Int2Scalar.d", "link" : "smile\/cas\/Int2Scalar.html#d(dx:smile.cas.VectorVar):smile.cas.Vector", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var): Scalar", "member" : "smile.cas.Int2Scalar.d", "link" : "smile\/cas\/Int2Scalar.html#d(dx:smile.cas.Var):smile.cas.Scalar", "kind" : "def"}, {"label" : "simplify", "tail" : "(): Scalar", "member" : "smile.cas.Int2Scalar.simplify", "link" : "smile\/cas\/Int2Scalar.html#simplify:smile.cas.Scalar", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): Scalar", "member" : "smile.cas.Int2Scalar.apply", "link" : "smile\/cas\/Int2Scalar.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.Scalar", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.Int2Scalar.toString", "link" : "smile\/cas\/Int2Scalar.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.Int2Scalar#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": IntScalar", "member" : "smile.cas.Int2Scalar.x", "link" : "smile\/cas\/Int2Scalar.html#x:smile.cas.IntScalar", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/Int2Scalar.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "*", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/Int2Scalar.html#*(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/Int2Scalar.html#*(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Scalar", "member" : "smile.cas.Scalar.unary_-", "link" : "smile\/cas\/Int2Scalar.html#unary_-:smile.cas.Scalar", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): Scalar", "member" : "smile.cas.Scalar.unary_+", "link" : "smile\/cas\/Int2Scalar.html#unary_+:smile.cas.Scalar", "kind" : "def"}, {"label" : "**", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.**", "link" : "smile\/cas\/Int2Scalar.html#**(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "\/", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.\/", "link" : "smile\/cas\/Int2Scalar.html#\/(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "*", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/Int2Scalar.html#*(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "-", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.-", "link" : "smile\/cas\/Int2Scalar.html#-(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "+", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.+", "link" : "smile\/cas\/Int2Scalar.html#+(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var*): Vector", "member" : "smile.cas.Scalar.d", "link" : "smile\/cas\/Int2Scalar.html#d(dx:smile.cas.Var*):smile.cas.Vector", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): Scalar", "member" : "smile.cas.Scalar.apply", "link" : "smile\/cas\/Int2Scalar.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.Scalar", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.Scalar.shape", "link" : "smile\/cas\/Int2Scalar.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.Scalar.rank", "link" : "smile\/cas\/Int2Scalar.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/Int2Scalar.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/Int2Scalar.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/Int2Scalar.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/Int2Scalar.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/Int2Scalar.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/Int2Scalar.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/Int2Scalar.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Int2Scalar.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Int2Scalar.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Int2Scalar.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/Int2Scalar.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/Int2Scalar.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/Int2Scalar.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/Int2Scalar.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/Int2Scalar.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/Int2Scalar.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/Int2Scalar.html", "kind" : "case class"}, {"name" : "smile.cas.IntAdd", "shortDescription" : "x + y", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/IntAdd.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IntAdd) => Boolean, msg: => Any): IntAdd", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/IntAdd.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IntAdd) => Boolean): IntAdd", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/IntAdd.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): IntAdd", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/IntAdd.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): IntAdd", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/IntAdd.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (IntAdd, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/IntAdd.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (IntAdd, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/IntAdd.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "simplify", "tail" : "(): IntScalar", "member" : "smile.cas.IntAdd.simplify", "link" : "smile\/cas\/IntAdd.html#simplify:smile.cas.IntScalar", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): IntScalar", "member" : "smile.cas.IntAdd.apply", "link" : "smile\/cas\/IntAdd.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.IntScalar", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.IntAdd.toString", "link" : "smile\/cas\/IntAdd.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.IntAdd#<init>", "error" : "unsupported entity"}, {"label" : "y", "tail" : ": IntScalar", "member" : "smile.cas.IntAdd.y", "link" : "smile\/cas\/IntAdd.html#y:smile.cas.IntScalar", "kind" : "val"}, {"label" : "x", "tail" : ": IntScalar", "member" : "smile.cas.IntAdd.x", "link" : "smile\/cas\/IntAdd.html#x:smile.cas.IntScalar", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/IntAdd.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): IntScalar", "member" : "smile.cas.IntScalar.unary_-", "link" : "smile\/cas\/IntAdd.html#unary_-:smile.cas.IntScalar", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): IntScalar", "member" : "smile.cas.IntScalar.unary_+", "link" : "smile\/cas\/IntAdd.html#unary_+:smile.cas.IntScalar", "kind" : "def"}, {"label" : "**", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.**", "link" : "smile\/cas\/IntAdd.html#**(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "%", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.%", "link" : "smile\/cas\/IntAdd.html#%(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "\/", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.\/", "link" : "smile\/cas\/IntAdd.html#\/(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "*", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.*", "link" : "smile\/cas\/IntAdd.html#*(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "-", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.-", "link" : "smile\/cas\/IntAdd.html#-(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "+", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.+", "link" : "smile\/cas\/IntAdd.html#+(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): IntScalar", "member" : "smile.cas.IntScalar.apply", "link" : "smile\/cas\/IntAdd.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.IntScalar", "kind" : "def"}, {"label" : "toScalar", "tail" : "(): Scalar", "member" : "smile.cas.IntScalar.toScalar", "link" : "smile\/cas\/IntAdd.html#toScalar:smile.cas.Scalar", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.IntScalar.shape", "link" : "smile\/cas\/IntAdd.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.IntScalar.rank", "link" : "smile\/cas\/IntAdd.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/IntAdd.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/IntAdd.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/IntAdd.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/IntAdd.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/IntAdd.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/IntAdd.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/IntAdd.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/IntAdd.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/IntAdd.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/IntAdd.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/IntAdd.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/IntAdd.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/IntAdd.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/IntAdd.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/IntAdd.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/IntAdd.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/IntAdd.html", "kind" : "case class"}, {"name" : "smile.cas.IntConst", "shortDescription" : "Integer constant value.", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/IntConst.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IntConst) => Boolean, msg: => Any): IntConst", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/IntConst.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IntConst) => Boolean): IntConst", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/IntConst.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): IntConst", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/IntConst.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): IntConst", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/IntConst.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (IntConst, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/IntConst.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (IntConst, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/IntConst.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): IntScalar", "member" : "smile.cas.IntConst.apply", "link" : "smile\/cas\/IntConst.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.IntScalar", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.IntConst.toString", "link" : "smile\/cas\/IntConst.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.IntConst#<init>", "error" : "unsupported entity"}, {"label" : "symbol", "tail" : ": String", "member" : "smile.cas.IntConst.symbol", "link" : "smile\/cas\/IntConst.html#symbol:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/IntConst.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): IntScalar", "member" : "smile.cas.IntScalar.unary_-", "link" : "smile\/cas\/IntConst.html#unary_-:smile.cas.IntScalar", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): IntScalar", "member" : "smile.cas.IntScalar.unary_+", "link" : "smile\/cas\/IntConst.html#unary_+:smile.cas.IntScalar", "kind" : "def"}, {"label" : "**", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.**", "link" : "smile\/cas\/IntConst.html#**(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "%", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.%", "link" : "smile\/cas\/IntConst.html#%(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "\/", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.\/", "link" : "smile\/cas\/IntConst.html#\/(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "*", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.*", "link" : "smile\/cas\/IntConst.html#*(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "-", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.-", "link" : "smile\/cas\/IntConst.html#-(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "+", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.+", "link" : "smile\/cas\/IntConst.html#+(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "simplify", "tail" : "(): IntScalar", "member" : "smile.cas.IntScalar.simplify", "link" : "smile\/cas\/IntConst.html#simplify:smile.cas.IntScalar", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): IntScalar", "member" : "smile.cas.IntScalar.apply", "link" : "smile\/cas\/IntConst.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.IntScalar", "kind" : "def"}, {"label" : "toScalar", "tail" : "(): Scalar", "member" : "smile.cas.IntScalar.toScalar", "link" : "smile\/cas\/IntConst.html#toScalar:smile.cas.Scalar", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.IntScalar.shape", "link" : "smile\/cas\/IntConst.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.IntScalar.rank", "link" : "smile\/cas\/IntConst.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/IntConst.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/IntConst.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/IntConst.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/IntConst.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/IntConst.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/IntConst.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/IntConst.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/IntConst.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/IntConst.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/IntConst.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/IntConst.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/IntConst.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/IntConst.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/IntConst.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/IntConst.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/IntConst.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/IntConst.html", "kind" : "case class"}, {"name" : "smile.cas.IntDiv", "shortDescription" : "x \/ y", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/IntDiv.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IntDiv) => Boolean, msg: => Any): IntDiv", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/IntDiv.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IntDiv) => Boolean): IntDiv", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/IntDiv.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): IntDiv", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/IntDiv.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): IntDiv", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/IntDiv.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (IntDiv, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/IntDiv.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (IntDiv, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/IntDiv.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "simplify", "tail" : "(): IntScalar", "member" : "smile.cas.IntDiv.simplify", "link" : "smile\/cas\/IntDiv.html#simplify:smile.cas.IntScalar", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): IntScalar", "member" : "smile.cas.IntDiv.apply", "link" : "smile\/cas\/IntDiv.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.IntScalar", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.IntDiv.toString", "link" : "smile\/cas\/IntDiv.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.IntDiv#<init>", "error" : "unsupported entity"}, {"label" : "y", "tail" : ": IntScalar", "member" : "smile.cas.IntDiv.y", "link" : "smile\/cas\/IntDiv.html#y:smile.cas.IntScalar", "kind" : "val"}, {"label" : "x", "tail" : ": IntScalar", "member" : "smile.cas.IntDiv.x", "link" : "smile\/cas\/IntDiv.html#x:smile.cas.IntScalar", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/IntDiv.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): IntScalar", "member" : "smile.cas.IntScalar.unary_-", "link" : "smile\/cas\/IntDiv.html#unary_-:smile.cas.IntScalar", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): IntScalar", "member" : "smile.cas.IntScalar.unary_+", "link" : "smile\/cas\/IntDiv.html#unary_+:smile.cas.IntScalar", "kind" : "def"}, {"label" : "**", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.**", "link" : "smile\/cas\/IntDiv.html#**(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "%", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.%", "link" : "smile\/cas\/IntDiv.html#%(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "\/", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.\/", "link" : "smile\/cas\/IntDiv.html#\/(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "*", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.*", "link" : "smile\/cas\/IntDiv.html#*(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "-", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.-", "link" : "smile\/cas\/IntDiv.html#-(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "+", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.+", "link" : "smile\/cas\/IntDiv.html#+(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): IntScalar", "member" : "smile.cas.IntScalar.apply", "link" : "smile\/cas\/IntDiv.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.IntScalar", "kind" : "def"}, {"label" : "toScalar", "tail" : "(): Scalar", "member" : "smile.cas.IntScalar.toScalar", "link" : "smile\/cas\/IntDiv.html#toScalar:smile.cas.Scalar", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.IntScalar.shape", "link" : "smile\/cas\/IntDiv.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.IntScalar.rank", "link" : "smile\/cas\/IntDiv.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/IntDiv.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/IntDiv.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/IntDiv.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/IntDiv.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/IntDiv.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/IntDiv.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/IntDiv.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/IntDiv.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/IntDiv.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/IntDiv.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/IntDiv.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/IntDiv.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/IntDiv.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/IntDiv.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/IntDiv.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/IntDiv.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/IntDiv.html", "kind" : "case class"}, {"name" : "smile.cas.IntMul", "shortDescription" : "x * y", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/IntMul.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IntMul) => Boolean, msg: => Any): IntMul", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/IntMul.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IntMul) => Boolean): IntMul", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/IntMul.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): IntMul", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/IntMul.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): IntMul", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/IntMul.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (IntMul, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/IntMul.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (IntMul, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/IntMul.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "simplify", "tail" : "(): IntScalar", "member" : "smile.cas.IntMul.simplify", "link" : "smile\/cas\/IntMul.html#simplify:smile.cas.IntScalar", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): IntScalar", "member" : "smile.cas.IntMul.apply", "link" : "smile\/cas\/IntMul.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.IntScalar", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.IntMul.toString", "link" : "smile\/cas\/IntMul.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.IntMul#<init>", "error" : "unsupported entity"}, {"label" : "y", "tail" : ": IntScalar", "member" : "smile.cas.IntMul.y", "link" : "smile\/cas\/IntMul.html#y:smile.cas.IntScalar", "kind" : "val"}, {"label" : "x", "tail" : ": IntScalar", "member" : "smile.cas.IntMul.x", "link" : "smile\/cas\/IntMul.html#x:smile.cas.IntScalar", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/IntMul.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): IntScalar", "member" : "smile.cas.IntScalar.unary_-", "link" : "smile\/cas\/IntMul.html#unary_-:smile.cas.IntScalar", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): IntScalar", "member" : "smile.cas.IntScalar.unary_+", "link" : "smile\/cas\/IntMul.html#unary_+:smile.cas.IntScalar", "kind" : "def"}, {"label" : "**", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.**", "link" : "smile\/cas\/IntMul.html#**(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "%", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.%", "link" : "smile\/cas\/IntMul.html#%(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "\/", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.\/", "link" : "smile\/cas\/IntMul.html#\/(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "*", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.*", "link" : "smile\/cas\/IntMul.html#*(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "-", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.-", "link" : "smile\/cas\/IntMul.html#-(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "+", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.+", "link" : "smile\/cas\/IntMul.html#+(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): IntScalar", "member" : "smile.cas.IntScalar.apply", "link" : "smile\/cas\/IntMul.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.IntScalar", "kind" : "def"}, {"label" : "toScalar", "tail" : "(): Scalar", "member" : "smile.cas.IntScalar.toScalar", "link" : "smile\/cas\/IntMul.html#toScalar:smile.cas.Scalar", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.IntScalar.shape", "link" : "smile\/cas\/IntMul.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.IntScalar.rank", "link" : "smile\/cas\/IntMul.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/IntMul.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/IntMul.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/IntMul.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/IntMul.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/IntMul.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/IntMul.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/IntMul.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/IntMul.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/IntMul.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/IntMul.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/IntMul.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/IntMul.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/IntMul.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/IntMul.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/IntMul.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/IntMul.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/IntMul.html", "kind" : "case class"}, {"name" : "smile.cas.IntNeg", "shortDescription" : "-x", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/IntNeg.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IntNeg) => Boolean, msg: => Any): IntNeg", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/IntNeg.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IntNeg) => Boolean): IntNeg", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/IntNeg.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): IntNeg", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/IntNeg.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): IntNeg", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/IntNeg.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (IntNeg, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/IntNeg.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (IntNeg, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/IntNeg.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "simplify", "tail" : "(): IntScalar", "member" : "smile.cas.IntNeg.simplify", "link" : "smile\/cas\/IntNeg.html#simplify:smile.cas.IntScalar", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): IntScalar", "member" : "smile.cas.IntNeg.apply", "link" : "smile\/cas\/IntNeg.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.IntScalar", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.IntNeg.toString", "link" : "smile\/cas\/IntNeg.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.IntNeg#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": IntScalar", "member" : "smile.cas.IntNeg.x", "link" : "smile\/cas\/IntNeg.html#x:smile.cas.IntScalar", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/IntNeg.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): IntScalar", "member" : "smile.cas.IntScalar.unary_-", "link" : "smile\/cas\/IntNeg.html#unary_-:smile.cas.IntScalar", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): IntScalar", "member" : "smile.cas.IntScalar.unary_+", "link" : "smile\/cas\/IntNeg.html#unary_+:smile.cas.IntScalar", "kind" : "def"}, {"label" : "**", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.**", "link" : "smile\/cas\/IntNeg.html#**(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "%", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.%", "link" : "smile\/cas\/IntNeg.html#%(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "\/", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.\/", "link" : "smile\/cas\/IntNeg.html#\/(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "*", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.*", "link" : "smile\/cas\/IntNeg.html#*(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "-", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.-", "link" : "smile\/cas\/IntNeg.html#-(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "+", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.+", "link" : "smile\/cas\/IntNeg.html#+(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): IntScalar", "member" : "smile.cas.IntScalar.apply", "link" : "smile\/cas\/IntNeg.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.IntScalar", "kind" : "def"}, {"label" : "toScalar", "tail" : "(): Scalar", "member" : "smile.cas.IntScalar.toScalar", "link" : "smile\/cas\/IntNeg.html#toScalar:smile.cas.Scalar", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.IntScalar.shape", "link" : "smile\/cas\/IntNeg.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.IntScalar.rank", "link" : "smile\/cas\/IntNeg.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/IntNeg.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/IntNeg.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/IntNeg.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/IntNeg.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/IntNeg.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/IntNeg.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/IntNeg.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/IntNeg.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/IntNeg.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/IntNeg.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/IntNeg.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/IntNeg.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/IntNeg.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/IntNeg.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/IntNeg.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/IntNeg.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/IntNeg.html", "kind" : "case class"}, {"name" : "smile.cas.IntPower", "shortDescription" : "x ** y", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/IntPower.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IntPower) => Boolean, msg: => Any): IntPower", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/IntPower.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IntPower) => Boolean): IntPower", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/IntPower.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): IntPower", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/IntPower.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): IntPower", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/IntPower.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (IntPower, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/IntPower.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (IntPower, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/IntPower.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "simplify", "tail" : "(): IntScalar", "member" : "smile.cas.IntPower.simplify", "link" : "smile\/cas\/IntPower.html#simplify:smile.cas.IntScalar", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): IntScalar", "member" : "smile.cas.IntPower.apply", "link" : "smile\/cas\/IntPower.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.IntScalar", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.IntPower.toString", "link" : "smile\/cas\/IntPower.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.IntPower#<init>", "error" : "unsupported entity"}, {"label" : "y", "tail" : ": IntScalar", "member" : "smile.cas.IntPower.y", "link" : "smile\/cas\/IntPower.html#y:smile.cas.IntScalar", "kind" : "val"}, {"label" : "x", "tail" : ": IntScalar", "member" : "smile.cas.IntPower.x", "link" : "smile\/cas\/IntPower.html#x:smile.cas.IntScalar", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/IntPower.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): IntScalar", "member" : "smile.cas.IntScalar.unary_-", "link" : "smile\/cas\/IntPower.html#unary_-:smile.cas.IntScalar", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): IntScalar", "member" : "smile.cas.IntScalar.unary_+", "link" : "smile\/cas\/IntPower.html#unary_+:smile.cas.IntScalar", "kind" : "def"}, {"label" : "**", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.**", "link" : "smile\/cas\/IntPower.html#**(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "%", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.%", "link" : "smile\/cas\/IntPower.html#%(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "\/", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.\/", "link" : "smile\/cas\/IntPower.html#\/(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "*", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.*", "link" : "smile\/cas\/IntPower.html#*(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "-", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.-", "link" : "smile\/cas\/IntPower.html#-(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "+", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.+", "link" : "smile\/cas\/IntPower.html#+(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): IntScalar", "member" : "smile.cas.IntScalar.apply", "link" : "smile\/cas\/IntPower.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.IntScalar", "kind" : "def"}, {"label" : "toScalar", "tail" : "(): Scalar", "member" : "smile.cas.IntScalar.toScalar", "link" : "smile\/cas\/IntPower.html#toScalar:smile.cas.Scalar", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.IntScalar.shape", "link" : "smile\/cas\/IntPower.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.IntScalar.rank", "link" : "smile\/cas\/IntPower.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/IntPower.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/IntPower.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/IntPower.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/IntPower.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/IntPower.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/IntPower.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/IntPower.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/IntPower.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/IntPower.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/IntPower.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/IntPower.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/IntPower.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/IntPower.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/IntPower.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/IntPower.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/IntPower.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/IntPower.html", "kind" : "case class"}, {"name" : "smile.cas.IntScalar", "trait" : "smile\/cas\/IntScalar.html", "kind" : "trait", "members_trait" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/IntScalar.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IntScalar) => Boolean, msg: => Any): IntScalar", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/IntScalar.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IntScalar) => Boolean): IntScalar", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/IntScalar.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): IntScalar", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/IntScalar.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): IntScalar", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/IntScalar.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (IntScalar, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/IntScalar.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (IntScalar, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/IntScalar.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): IntScalar", "member" : "smile.cas.IntScalar.unary_-", "link" : "smile\/cas\/IntScalar.html#unary_-:smile.cas.IntScalar", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): IntScalar", "member" : "smile.cas.IntScalar.unary_+", "link" : "smile\/cas\/IntScalar.html#unary_+:smile.cas.IntScalar", "kind" : "def"}, {"label" : "**", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.**", "link" : "smile\/cas\/IntScalar.html#**(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "%", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.%", "link" : "smile\/cas\/IntScalar.html#%(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "\/", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.\/", "link" : "smile\/cas\/IntScalar.html#\/(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "*", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.*", "link" : "smile\/cas\/IntScalar.html#*(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "-", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.-", "link" : "smile\/cas\/IntScalar.html#-(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "+", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.+", "link" : "smile\/cas\/IntScalar.html#+(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "simplify", "tail" : "(): IntScalar", "member" : "smile.cas.IntScalar.simplify", "link" : "smile\/cas\/IntScalar.html#simplify:smile.cas.IntScalar", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): IntScalar", "member" : "smile.cas.IntScalar.apply", "link" : "smile\/cas\/IntScalar.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.IntScalar", "kind" : "def"}, {"label" : "toScalar", "tail" : "(): Scalar", "member" : "smile.cas.IntScalar.toScalar", "link" : "smile\/cas\/IntScalar.html#toScalar:smile.cas.Scalar", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.IntScalar.shape", "link" : "smile\/cas\/IntScalar.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.IntScalar.rank", "link" : "smile\/cas\/IntScalar.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/IntScalar.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/IntScalar.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/IntScalar.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/IntScalar.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/IntScalar.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/IntScalar.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/IntScalar.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/IntScalar.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/IntScalar.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/IntScalar.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/IntScalar.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/IntScalar.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/cas\/IntScalar.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/IntScalar.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/cas\/IntScalar.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/cas\/IntScalar.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/IntScalar.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/IntScalar.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/IntScalar.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): IntScalar", "member" : "smile.cas.IntScalar.apply", "link" : "smile\/cas\/IntScalar.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.IntScalar", "kind" : "abstract def"}], "shortDescription" : "Scalar: rank-0 tensor."}, {"name" : "smile.cas.IntSub", "shortDescription" : "x - y", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/IntSub.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IntSub) => Boolean, msg: => Any): IntSub", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/IntSub.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IntSub) => Boolean): IntSub", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/IntSub.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): IntSub", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/IntSub.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): IntSub", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/IntSub.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (IntSub, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/IntSub.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (IntSub, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/IntSub.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "simplify", "tail" : "(): IntScalar", "member" : "smile.cas.IntSub.simplify", "link" : "smile\/cas\/IntSub.html#simplify:smile.cas.IntScalar", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): IntScalar", "member" : "smile.cas.IntSub.apply", "link" : "smile\/cas\/IntSub.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.IntScalar", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.IntSub.toString", "link" : "smile\/cas\/IntSub.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.IntSub#<init>", "error" : "unsupported entity"}, {"label" : "y", "tail" : ": IntScalar", "member" : "smile.cas.IntSub.y", "link" : "smile\/cas\/IntSub.html#y:smile.cas.IntScalar", "kind" : "val"}, {"label" : "x", "tail" : ": IntScalar", "member" : "smile.cas.IntSub.x", "link" : "smile\/cas\/IntSub.html#x:smile.cas.IntScalar", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/IntSub.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): IntScalar", "member" : "smile.cas.IntScalar.unary_-", "link" : "smile\/cas\/IntSub.html#unary_-:smile.cas.IntScalar", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): IntScalar", "member" : "smile.cas.IntScalar.unary_+", "link" : "smile\/cas\/IntSub.html#unary_+:smile.cas.IntScalar", "kind" : "def"}, {"label" : "**", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.**", "link" : "smile\/cas\/IntSub.html#**(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "%", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.%", "link" : "smile\/cas\/IntSub.html#%(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "\/", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.\/", "link" : "smile\/cas\/IntSub.html#\/(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "*", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.*", "link" : "smile\/cas\/IntSub.html#*(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "-", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.-", "link" : "smile\/cas\/IntSub.html#-(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "+", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.+", "link" : "smile\/cas\/IntSub.html#+(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): IntScalar", "member" : "smile.cas.IntScalar.apply", "link" : "smile\/cas\/IntSub.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.IntScalar", "kind" : "def"}, {"label" : "toScalar", "tail" : "(): Scalar", "member" : "smile.cas.IntScalar.toScalar", "link" : "smile\/cas\/IntSub.html#toScalar:smile.cas.Scalar", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.IntScalar.shape", "link" : "smile\/cas\/IntSub.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.IntScalar.rank", "link" : "smile\/cas\/IntSub.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/IntSub.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/IntSub.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/IntSub.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/IntSub.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/IntSub.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/IntSub.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/IntSub.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/IntSub.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/IntSub.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/IntSub.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/IntSub.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/IntSub.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/IntSub.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/IntSub.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/IntSub.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/IntSub.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/IntSub.html", "kind" : "case class"}, {"name" : "smile.cas.IntVal", "shortDescription" : "Integer scalar value.", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/IntVal.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IntVal) => Boolean, msg: => Any): IntVal", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/IntVal.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IntVal) => Boolean): IntVal", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/IntVal.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): IntVal", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/IntVal.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): IntVal", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/IntVal.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (IntVal, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/IntVal.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (IntVal, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/IntVal.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): IntVal", "member" : "smile.cas.IntVal.apply", "link" : "smile\/cas\/IntVal.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.IntVal", "kind" : "def"}, {"label" : "toScalar", "tail" : "(): Scalar", "member" : "smile.cas.IntVal.toScalar", "link" : "smile\/cas\/IntVal.html#toScalar:smile.cas.Scalar", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.IntVal.toString", "link" : "smile\/cas\/IntVal.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.IntVal#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": Int", "member" : "smile.cas.IntVal.x", "link" : "smile\/cas\/IntVal.html#x:Int", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/IntVal.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): IntScalar", "member" : "smile.cas.IntScalar.unary_-", "link" : "smile\/cas\/IntVal.html#unary_-:smile.cas.IntScalar", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): IntScalar", "member" : "smile.cas.IntScalar.unary_+", "link" : "smile\/cas\/IntVal.html#unary_+:smile.cas.IntScalar", "kind" : "def"}, {"label" : "**", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.**", "link" : "smile\/cas\/IntVal.html#**(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "%", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.%", "link" : "smile\/cas\/IntVal.html#%(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "\/", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.\/", "link" : "smile\/cas\/IntVal.html#\/(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "*", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.*", "link" : "smile\/cas\/IntVal.html#*(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "-", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.-", "link" : "smile\/cas\/IntVal.html#-(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "+", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.+", "link" : "smile\/cas\/IntVal.html#+(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "simplify", "tail" : "(): IntScalar", "member" : "smile.cas.IntScalar.simplify", "link" : "smile\/cas\/IntVal.html#simplify:smile.cas.IntScalar", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): IntScalar", "member" : "smile.cas.IntScalar.apply", "link" : "smile\/cas\/IntVal.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.IntScalar", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.IntScalar.shape", "link" : "smile\/cas\/IntVal.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.IntScalar.rank", "link" : "smile\/cas\/IntVal.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/IntVal.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/IntVal.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/IntVal.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/IntVal.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/IntVal.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/IntVal.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/IntVal.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/IntVal.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/IntVal.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/IntVal.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/IntVal.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/IntVal.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/IntVal.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/IntVal.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/IntVal.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/IntVal.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/IntVal.html", "kind" : "case class"}, {"name" : "smile.cas.IntVar", "shortDescription" : "Integer scalar variable", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/IntVar.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IntVar) => Boolean, msg: => Any): IntVar", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/IntVar.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IntVar) => Boolean): IntVar", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/IntVar.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): IntVar", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/IntVar.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): IntVar", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/IntVar.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (IntVar, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/IntVar.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (IntVar, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/IntVar.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): IntScalar", "member" : "smile.cas.IntVar.apply", "link" : "smile\/cas\/IntVar.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.IntScalar", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.IntVar.toString", "link" : "smile\/cas\/IntVar.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.IntVar#<init>", "error" : "unsupported entity"}, {"label" : "symbol", "tail" : ": String", "member" : "smile.cas.IntVar.symbol", "link" : "smile\/cas\/IntVar.html#symbol:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/IntVar.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): IntScalar", "member" : "smile.cas.IntScalar.unary_-", "link" : "smile\/cas\/IntVar.html#unary_-:smile.cas.IntScalar", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): IntScalar", "member" : "smile.cas.IntScalar.unary_+", "link" : "smile\/cas\/IntVar.html#unary_+:smile.cas.IntScalar", "kind" : "def"}, {"label" : "**", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.**", "link" : "smile\/cas\/IntVar.html#**(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "%", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.%", "link" : "smile\/cas\/IntVar.html#%(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "\/", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.\/", "link" : "smile\/cas\/IntVar.html#\/(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "*", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.*", "link" : "smile\/cas\/IntVar.html#*(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "-", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.-", "link" : "smile\/cas\/IntVar.html#-(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "+", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.+", "link" : "smile\/cas\/IntVar.html#+(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "simplify", "tail" : "(): IntScalar", "member" : "smile.cas.IntScalar.simplify", "link" : "smile\/cas\/IntVar.html#simplify:smile.cas.IntScalar", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): IntScalar", "member" : "smile.cas.IntScalar.apply", "link" : "smile\/cas\/IntVar.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.IntScalar", "kind" : "def"}, {"label" : "toScalar", "tail" : "(): Scalar", "member" : "smile.cas.IntScalar.toScalar", "link" : "smile\/cas\/IntVar.html#toScalar:smile.cas.Scalar", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.IntScalar.shape", "link" : "smile\/cas\/IntVar.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.IntScalar.rank", "link" : "smile\/cas\/IntVar.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/IntVar.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/IntVar.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/IntVar.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/IntVar.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/IntVar.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/IntVar.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/IntVar.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/IntVar.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/IntVar.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/IntVar.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/IntVar.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/IntVar.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/IntVar.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/IntVar.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/IntVar.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/IntVar.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/IntVar.html", "kind" : "case class"}, {"name" : "smile.cas.Log", "shortDescription" : "log(x)", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/Log.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Log) => Boolean, msg: => Any): Log", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Log.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Log) => Boolean): Log", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Log.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Log", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Log.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Log", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Log.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Log, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/Log.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Log, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/Log.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "simplify", "tail" : "(): Scalar", "member" : "smile.cas.Log.simplify", "link" : "smile\/cas\/Log.html#simplify:smile.cas.Scalar", "kind" : "def"}, {"label" : "d", "tail" : "(dx: VectorVar): Vector", "member" : "smile.cas.Log.d", "link" : "smile\/cas\/Log.html#d(dx:smile.cas.VectorVar):smile.cas.Vector", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var): Scalar", "member" : "smile.cas.Log.d", "link" : "smile\/cas\/Log.html#d(dx:smile.cas.Var):smile.cas.Scalar", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): Scalar", "member" : "smile.cas.Log.apply", "link" : "smile\/cas\/Log.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.Scalar", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.Log.toString", "link" : "smile\/cas\/Log.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.Log#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": Scalar", "member" : "smile.cas.Log.x", "link" : "smile\/cas\/Log.html#x:smile.cas.Scalar", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/Log.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "*", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/Log.html#*(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/Log.html#*(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Scalar", "member" : "smile.cas.Scalar.unary_-", "link" : "smile\/cas\/Log.html#unary_-:smile.cas.Scalar", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): Scalar", "member" : "smile.cas.Scalar.unary_+", "link" : "smile\/cas\/Log.html#unary_+:smile.cas.Scalar", "kind" : "def"}, {"label" : "**", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.**", "link" : "smile\/cas\/Log.html#**(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "\/", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.\/", "link" : "smile\/cas\/Log.html#\/(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "*", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/Log.html#*(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "-", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.-", "link" : "smile\/cas\/Log.html#-(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "+", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.+", "link" : "smile\/cas\/Log.html#+(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var*): Vector", "member" : "smile.cas.Scalar.d", "link" : "smile\/cas\/Log.html#d(dx:smile.cas.Var*):smile.cas.Vector", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): Scalar", "member" : "smile.cas.Scalar.apply", "link" : "smile\/cas\/Log.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.Scalar", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.Scalar.shape", "link" : "smile\/cas\/Log.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.Scalar.rank", "link" : "smile\/cas\/Log.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/Log.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/Log.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/Log.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/Log.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/Log.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/Log.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/Log.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Log.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Log.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Log.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/Log.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/Log.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/Log.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/Log.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/Log.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/Log.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/Log.html", "kind" : "case class"}, {"name" : "smile.cas.Matrix", "trait" : "smile\/cas\/Matrix.html", "kind" : "trait", "members_trait" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/Matrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Matrix) => Boolean, msg: => Any): Matrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Matrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Matrix) => Boolean): Matrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Matrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Matrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Matrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Matrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Matrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Matrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/Matrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Matrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/Matrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "inv", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.inv", "link" : "smile\/cas\/Matrix.html#inv:smile.cas.Matrix", "kind" : "def"}, {"label" : "t", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.t", "link" : "smile\/cas\/Matrix.html#t:smile.cas.Matrix", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.unary_-", "link" : "smile\/cas\/Matrix.html#unary_-:smile.cas.Matrix", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.unary_+", "link" : "smile\/cas\/Matrix.html#unary_+:smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Matrix.*", "link" : "smile\/cas\/Matrix.html#*(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Matrix.*", "link" : "smile\/cas\/Matrix.html#*(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "*", "tail" : "(y: Scalar): Matrix", "member" : "smile.cas.Matrix.*", "link" : "smile\/cas\/Matrix.html#*(y:smile.cas.Scalar):smile.cas.Matrix", "kind" : "def"}, {"label" : "-", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Matrix.-", "link" : "smile\/cas\/Matrix.html#-(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "+", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Matrix.+", "link" : "smile\/cas\/Matrix.html#+(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "simplify", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.simplify", "link" : "smile\/cas\/Matrix.html#simplify:smile.cas.Matrix", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): Matrix", "member" : "smile.cas.Matrix.apply", "link" : "smile\/cas\/Matrix.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.Matrix", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.Matrix.shape", "link" : "smile\/cas\/Matrix.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.Matrix.rank", "link" : "smile\/cas\/Matrix.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/Matrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/Matrix.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/Matrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/Matrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/Matrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/Matrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/Matrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Matrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Matrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Matrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/Matrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/Matrix.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/cas\/Matrix.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/Matrix.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/cas\/Matrix.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/cas\/Matrix.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/Matrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/Matrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/Matrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): Matrix", "member" : "smile.cas.Matrix.apply", "link" : "smile\/cas\/Matrix.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.Matrix", "kind" : "abstract def"}, {"label" : "d", "tail" : "(dx: Var): Matrix", "member" : "smile.cas.Matrix.d", "link" : "smile\/cas\/Matrix.html#d(dx:smile.cas.Var):smile.cas.Matrix", "kind" : "abstract def"}, {"label" : "size", "tail" : "(): (IntScalar, IntScalar)", "member" : "smile.cas.Matrix.size", "link" : "smile\/cas\/Matrix.html#size:(smile.cas.IntScalar,smile.cas.IntScalar)", "kind" : "abstract def"}], "shortDescription" : "Matrix: rank-2 tensor."}, {"name" : "smile.cas.MatrixInverse", "shortDescription" : "inv(A)", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/MatrixInverse.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixInverse) => Boolean, msg: => Any): MatrixInverse", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/MatrixInverse.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixInverse) => Boolean): MatrixInverse", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/MatrixInverse.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): MatrixInverse", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/MatrixInverse.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): MatrixInverse", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/MatrixInverse.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (MatrixInverse, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/MatrixInverse.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (MatrixInverse, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/MatrixInverse.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var): Matrix", "member" : "smile.cas.MatrixInverse.d", "link" : "smile\/cas\/MatrixInverse.html#d(dx:smile.cas.Var):smile.cas.Matrix", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): Matrix", "member" : "smile.cas.MatrixInverse.apply", "link" : "smile\/cas\/MatrixInverse.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.Matrix", "kind" : "def"}, {"label" : "size", "tail" : "(): (IntScalar, IntScalar)", "member" : "smile.cas.MatrixInverse.size", "link" : "smile\/cas\/MatrixInverse.html#size:(smile.cas.IntScalar,smile.cas.IntScalar)", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.MatrixInverse.toString", "link" : "smile\/cas\/MatrixInverse.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.MatrixInverse#<init>", "error" : "unsupported entity"}, {"label" : "A", "tail" : ": Matrix", "member" : "smile.cas.MatrixInverse.A", "link" : "smile\/cas\/MatrixInverse.html#A:smile.cas.Matrix", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/MatrixInverse.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "inv", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.inv", "link" : "smile\/cas\/MatrixInverse.html#inv:smile.cas.Matrix", "kind" : "def"}, {"label" : "t", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.t", "link" : "smile\/cas\/MatrixInverse.html#t:smile.cas.Matrix", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.unary_-", "link" : "smile\/cas\/MatrixInverse.html#unary_-:smile.cas.Matrix", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.unary_+", "link" : "smile\/cas\/MatrixInverse.html#unary_+:smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Matrix.*", "link" : "smile\/cas\/MatrixInverse.html#*(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Matrix.*", "link" : "smile\/cas\/MatrixInverse.html#*(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "*", "tail" : "(y: Scalar): Matrix", "member" : "smile.cas.Matrix.*", "link" : "smile\/cas\/MatrixInverse.html#*(y:smile.cas.Scalar):smile.cas.Matrix", "kind" : "def"}, {"label" : "-", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Matrix.-", "link" : "smile\/cas\/MatrixInverse.html#-(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "+", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Matrix.+", "link" : "smile\/cas\/MatrixInverse.html#+(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "simplify", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.simplify", "link" : "smile\/cas\/MatrixInverse.html#simplify:smile.cas.Matrix", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): Matrix", "member" : "smile.cas.Matrix.apply", "link" : "smile\/cas\/MatrixInverse.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.Matrix", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.Matrix.shape", "link" : "smile\/cas\/MatrixInverse.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.Matrix.rank", "link" : "smile\/cas\/MatrixInverse.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/MatrixInverse.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/MatrixInverse.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/MatrixInverse.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/MatrixInverse.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/MatrixInverse.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/MatrixInverse.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/MatrixInverse.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/MatrixInverse.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/MatrixInverse.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/MatrixInverse.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/MatrixInverse.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/MatrixInverse.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/MatrixInverse.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/MatrixInverse.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/MatrixInverse.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/MatrixInverse.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/MatrixInverse.html", "kind" : "case class"}, {"name" : "smile.cas.MatrixProduct", "shortDescription" : "Matrix multiplication (A * B)", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/MatrixProduct.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixProduct) => Boolean, msg: => Any): MatrixProduct", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/MatrixProduct.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixProduct) => Boolean): MatrixProduct", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/MatrixProduct.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): MatrixProduct", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/MatrixProduct.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): MatrixProduct", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/MatrixProduct.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (MatrixProduct, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/MatrixProduct.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (MatrixProduct, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/MatrixProduct.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "simplify", "tail" : "(): Matrix", "member" : "smile.cas.MatrixProduct.simplify", "link" : "smile\/cas\/MatrixProduct.html#simplify:smile.cas.Matrix", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var): Matrix", "member" : "smile.cas.MatrixProduct.d", "link" : "smile\/cas\/MatrixProduct.html#d(dx:smile.cas.Var):smile.cas.Matrix", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): Matrix", "member" : "smile.cas.MatrixProduct.apply", "link" : "smile\/cas\/MatrixProduct.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.Matrix", "kind" : "def"}, {"label" : "size", "tail" : "(): (IntScalar, IntScalar)", "member" : "smile.cas.MatrixProduct.size", "link" : "smile\/cas\/MatrixProduct.html#size:(smile.cas.IntScalar,smile.cas.IntScalar)", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.MatrixProduct.toString", "link" : "smile\/cas\/MatrixProduct.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.MatrixProduct#<init>", "error" : "unsupported entity"}, {"label" : "B", "tail" : ": Matrix", "member" : "smile.cas.MatrixProduct.B", "link" : "smile\/cas\/MatrixProduct.html#B:smile.cas.Matrix", "kind" : "val"}, {"label" : "A", "tail" : ": Matrix", "member" : "smile.cas.MatrixProduct.A", "link" : "smile\/cas\/MatrixProduct.html#A:smile.cas.Matrix", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/MatrixProduct.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "inv", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.inv", "link" : "smile\/cas\/MatrixProduct.html#inv:smile.cas.Matrix", "kind" : "def"}, {"label" : "t", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.t", "link" : "smile\/cas\/MatrixProduct.html#t:smile.cas.Matrix", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.unary_-", "link" : "smile\/cas\/MatrixProduct.html#unary_-:smile.cas.Matrix", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.unary_+", "link" : "smile\/cas\/MatrixProduct.html#unary_+:smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Matrix.*", "link" : "smile\/cas\/MatrixProduct.html#*(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Matrix.*", "link" : "smile\/cas\/MatrixProduct.html#*(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "*", "tail" : "(y: Scalar): Matrix", "member" : "smile.cas.Matrix.*", "link" : "smile\/cas\/MatrixProduct.html#*(y:smile.cas.Scalar):smile.cas.Matrix", "kind" : "def"}, {"label" : "-", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Matrix.-", "link" : "smile\/cas\/MatrixProduct.html#-(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "+", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Matrix.+", "link" : "smile\/cas\/MatrixProduct.html#+(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): Matrix", "member" : "smile.cas.Matrix.apply", "link" : "smile\/cas\/MatrixProduct.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.Matrix", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.Matrix.shape", "link" : "smile\/cas\/MatrixProduct.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.Matrix.rank", "link" : "smile\/cas\/MatrixProduct.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/MatrixProduct.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/MatrixProduct.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/MatrixProduct.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/MatrixProduct.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/MatrixProduct.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/MatrixProduct.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/MatrixProduct.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/MatrixProduct.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/MatrixProduct.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/MatrixProduct.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/MatrixProduct.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/MatrixProduct.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/MatrixProduct.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/MatrixProduct.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/MatrixProduct.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/MatrixProduct.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/MatrixProduct.html", "kind" : "case class"}, {"name" : "smile.cas.MatrixTranspose", "shortDescription" : "A'", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/MatrixTranspose.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixTranspose) => Boolean, msg: => Any): MatrixTranspose", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/MatrixTranspose.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixTranspose) => Boolean): MatrixTranspose", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/MatrixTranspose.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): MatrixTranspose", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/MatrixTranspose.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): MatrixTranspose", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/MatrixTranspose.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (MatrixTranspose, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/MatrixTranspose.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (MatrixTranspose, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/MatrixTranspose.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "simplify", "tail" : "(): Matrix", "member" : "smile.cas.MatrixTranspose.simplify", "link" : "smile\/cas\/MatrixTranspose.html#simplify:smile.cas.Matrix", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var): Matrix", "member" : "smile.cas.MatrixTranspose.d", "link" : "smile\/cas\/MatrixTranspose.html#d(dx:smile.cas.Var):smile.cas.Matrix", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): Matrix", "member" : "smile.cas.MatrixTranspose.apply", "link" : "smile\/cas\/MatrixTranspose.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.Matrix", "kind" : "def"}, {"label" : "size", "tail" : "(): (IntScalar, IntScalar)", "member" : "smile.cas.MatrixTranspose.size", "link" : "smile\/cas\/MatrixTranspose.html#size:(smile.cas.IntScalar,smile.cas.IntScalar)", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.MatrixTranspose.toString", "link" : "smile\/cas\/MatrixTranspose.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.MatrixTranspose#<init>", "error" : "unsupported entity"}, {"label" : "A", "tail" : ": Matrix", "member" : "smile.cas.MatrixTranspose.A", "link" : "smile\/cas\/MatrixTranspose.html#A:smile.cas.Matrix", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/MatrixTranspose.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "inv", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.inv", "link" : "smile\/cas\/MatrixTranspose.html#inv:smile.cas.Matrix", "kind" : "def"}, {"label" : "t", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.t", "link" : "smile\/cas\/MatrixTranspose.html#t:smile.cas.Matrix", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.unary_-", "link" : "smile\/cas\/MatrixTranspose.html#unary_-:smile.cas.Matrix", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.unary_+", "link" : "smile\/cas\/MatrixTranspose.html#unary_+:smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Matrix.*", "link" : "smile\/cas\/MatrixTranspose.html#*(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Matrix.*", "link" : "smile\/cas\/MatrixTranspose.html#*(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "*", "tail" : "(y: Scalar): Matrix", "member" : "smile.cas.Matrix.*", "link" : "smile\/cas\/MatrixTranspose.html#*(y:smile.cas.Scalar):smile.cas.Matrix", "kind" : "def"}, {"label" : "-", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Matrix.-", "link" : "smile\/cas\/MatrixTranspose.html#-(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "+", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Matrix.+", "link" : "smile\/cas\/MatrixTranspose.html#+(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): Matrix", "member" : "smile.cas.Matrix.apply", "link" : "smile\/cas\/MatrixTranspose.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.Matrix", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.Matrix.shape", "link" : "smile\/cas\/MatrixTranspose.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.Matrix.rank", "link" : "smile\/cas\/MatrixTranspose.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/MatrixTranspose.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/MatrixTranspose.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/MatrixTranspose.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/MatrixTranspose.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/MatrixTranspose.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/MatrixTranspose.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/MatrixTranspose.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/MatrixTranspose.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/MatrixTranspose.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/MatrixTranspose.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/MatrixTranspose.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/MatrixTranspose.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/MatrixTranspose.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/MatrixTranspose.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/MatrixTranspose.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/MatrixTranspose.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/MatrixTranspose.html", "kind" : "case class"}, {"name" : "smile.cas.MatrixVar", "shortDescription" : "Abstract matrix variable", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/MatrixVar.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixVar) => Boolean, msg: => Any): MatrixVar", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/MatrixVar.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixVar) => Boolean): MatrixVar", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/MatrixVar.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): MatrixVar", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/MatrixVar.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): MatrixVar", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/MatrixVar.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (MatrixVar, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/MatrixVar.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (MatrixVar, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/MatrixVar.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): Matrix", "member" : "smile.cas.MatrixVar.apply", "link" : "smile\/cas\/MatrixVar.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.Matrix", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var): Matrix", "member" : "smile.cas.MatrixVar.d", "link" : "smile\/cas\/MatrixVar.html#d(dx:smile.cas.Var):smile.cas.Matrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.MatrixVar.toString", "link" : "smile\/cas\/MatrixVar.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.MatrixVar#<init>", "error" : "unsupported entity"}, {"label" : "size", "tail" : ": (IntScalar, IntScalar)", "member" : "smile.cas.MatrixVar.size", "link" : "smile\/cas\/MatrixVar.html#size:(smile.cas.IntScalar,smile.cas.IntScalar)", "kind" : "val"}, {"label" : "symbol", "tail" : ": String", "member" : "smile.cas.MatrixVar.symbol", "link" : "smile\/cas\/MatrixVar.html#symbol:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/MatrixVar.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "inv", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.inv", "link" : "smile\/cas\/MatrixVar.html#inv:smile.cas.Matrix", "kind" : "def"}, {"label" : "t", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.t", "link" : "smile\/cas\/MatrixVar.html#t:smile.cas.Matrix", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.unary_-", "link" : "smile\/cas\/MatrixVar.html#unary_-:smile.cas.Matrix", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.unary_+", "link" : "smile\/cas\/MatrixVar.html#unary_+:smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Matrix.*", "link" : "smile\/cas\/MatrixVar.html#*(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Matrix.*", "link" : "smile\/cas\/MatrixVar.html#*(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "*", "tail" : "(y: Scalar): Matrix", "member" : "smile.cas.Matrix.*", "link" : "smile\/cas\/MatrixVar.html#*(y:smile.cas.Scalar):smile.cas.Matrix", "kind" : "def"}, {"label" : "-", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Matrix.-", "link" : "smile\/cas\/MatrixVar.html#-(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "+", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Matrix.+", "link" : "smile\/cas\/MatrixVar.html#+(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "simplify", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.simplify", "link" : "smile\/cas\/MatrixVar.html#simplify:smile.cas.Matrix", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): Matrix", "member" : "smile.cas.Matrix.apply", "link" : "smile\/cas\/MatrixVar.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.Matrix", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.Matrix.shape", "link" : "smile\/cas\/MatrixVar.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.Matrix.rank", "link" : "smile\/cas\/MatrixVar.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/MatrixVar.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/MatrixVar.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/MatrixVar.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/MatrixVar.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/MatrixVar.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/MatrixVar.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/MatrixVar.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/MatrixVar.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/MatrixVar.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/MatrixVar.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/MatrixVar.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/MatrixVar.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/MatrixVar.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/MatrixVar.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/MatrixVar.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/MatrixVar.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/MatrixVar.html", "kind" : "case class"}, {"name" : "smile.cas.MatrixVectorProduct", "shortDescription" : "Matrix vector multiplication (A * x)", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/MatrixVectorProduct.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixVectorProduct) => Boolean, msg: => Any): MatrixVectorProduct", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/MatrixVectorProduct.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatrixVectorProduct) => Boolean): MatrixVectorProduct", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/MatrixVectorProduct.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): MatrixVectorProduct", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/MatrixVectorProduct.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): MatrixVectorProduct", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/MatrixVectorProduct.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (MatrixVectorProduct, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/MatrixVectorProduct.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (MatrixVectorProduct, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/MatrixVectorProduct.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "simplify", "tail" : "(): Vector", "member" : "smile.cas.MatrixVectorProduct.simplify", "link" : "smile\/cas\/MatrixVectorProduct.html#simplify:smile.cas.Vector", "kind" : "def"}, {"label" : "d", "tail" : "(dx: VectorVar): Matrix", "member" : "smile.cas.MatrixVectorProduct.d", "link" : "smile\/cas\/MatrixVectorProduct.html#d(dx:smile.cas.VectorVar):smile.cas.Matrix", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var): Vector", "member" : "smile.cas.MatrixVectorProduct.d", "link" : "smile\/cas\/MatrixVectorProduct.html#d(dx:smile.cas.Var):smile.cas.Vector", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): Vector", "member" : "smile.cas.MatrixVectorProduct.apply", "link" : "smile\/cas\/MatrixVectorProduct.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.Vector", "kind" : "def"}, {"label" : "size", "tail" : "(): IntScalar", "member" : "smile.cas.MatrixVectorProduct.size", "link" : "smile\/cas\/MatrixVectorProduct.html#size:smile.cas.IntScalar", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.MatrixVectorProduct.toString", "link" : "smile\/cas\/MatrixVectorProduct.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.MatrixVectorProduct#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": Vector", "member" : "smile.cas.MatrixVectorProduct.x", "link" : "smile\/cas\/MatrixVectorProduct.html#x:smile.cas.Vector", "kind" : "val"}, {"label" : "A", "tail" : ": Matrix", "member" : "smile.cas.MatrixVectorProduct.A", "link" : "smile\/cas\/MatrixVectorProduct.html#A:smile.cas.Matrix", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/MatrixVectorProduct.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Vector", "member" : "smile.cas.Vector.unary_-", "link" : "smile\/cas\/MatrixVectorProduct.html#unary_-:smile.cas.Vector", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): Vector", "member" : "smile.cas.Vector.unary_+", "link" : "smile\/cas\/MatrixVectorProduct.html#unary_+:smile.cas.Vector", "kind" : "def"}, {"label" : "*~", "tail" : "(y: Vector): Matrix", "member" : "smile.cas.Vector.*~", "link" : "smile\/cas\/MatrixVectorProduct.html#*~(y:smile.cas.Vector):smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Vector): Scalar", "member" : "smile.cas.Vector.*", "link" : "smile\/cas\/MatrixVectorProduct.html#*(y:smile.cas.Vector):smile.cas.Scalar", "kind" : "def"}, {"label" : "\/", "tail" : "(y: Scalar): Vector", "member" : "smile.cas.Vector.\/", "link" : "smile\/cas\/MatrixVectorProduct.html#\/(y:smile.cas.Scalar):smile.cas.Vector", "kind" : "def"}, {"label" : "*", "tail" : "(y: Scalar): Vector", "member" : "smile.cas.Vector.*", "link" : "smile\/cas\/MatrixVectorProduct.html#*(y:smile.cas.Scalar):smile.cas.Vector", "kind" : "def"}, {"label" : "-", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Vector.-", "link" : "smile\/cas\/MatrixVectorProduct.html#-(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "+", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Vector.+", "link" : "smile\/cas\/MatrixVectorProduct.html#+(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): Vector", "member" : "smile.cas.Vector.apply", "link" : "smile\/cas\/MatrixVectorProduct.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.Vector", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.Vector.shape", "link" : "smile\/cas\/MatrixVectorProduct.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.Vector.rank", "link" : "smile\/cas\/MatrixVectorProduct.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/MatrixVectorProduct.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/MatrixVectorProduct.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/MatrixVectorProduct.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/MatrixVectorProduct.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/MatrixVectorProduct.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/MatrixVectorProduct.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/MatrixVectorProduct.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/MatrixVectorProduct.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/MatrixVectorProduct.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/MatrixVectorProduct.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/MatrixVectorProduct.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/MatrixVectorProduct.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/MatrixVectorProduct.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/MatrixVectorProduct.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/MatrixVectorProduct.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/MatrixVectorProduct.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/MatrixVectorProduct.html", "kind" : "case class"}, {"name" : "smile.cas.Mod", "shortDescription" : "x % y", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/Mod.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Mod) => Boolean, msg: => Any): Mod", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Mod.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Mod) => Boolean): Mod", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Mod.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Mod", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Mod.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Mod", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Mod.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Mod, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/Mod.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Mod, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/Mod.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "simplify", "tail" : "(): IntScalar", "member" : "smile.cas.Mod.simplify", "link" : "smile\/cas\/Mod.html#simplify:smile.cas.IntScalar", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): IntScalar", "member" : "smile.cas.Mod.apply", "link" : "smile\/cas\/Mod.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.IntScalar", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.Mod.toString", "link" : "smile\/cas\/Mod.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.Mod#<init>", "error" : "unsupported entity"}, {"label" : "y", "tail" : ": IntScalar", "member" : "smile.cas.Mod.y", "link" : "smile\/cas\/Mod.html#y:smile.cas.IntScalar", "kind" : "val"}, {"label" : "x", "tail" : ": IntScalar", "member" : "smile.cas.Mod.x", "link" : "smile\/cas\/Mod.html#x:smile.cas.IntScalar", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/Mod.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): IntScalar", "member" : "smile.cas.IntScalar.unary_-", "link" : "smile\/cas\/Mod.html#unary_-:smile.cas.IntScalar", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): IntScalar", "member" : "smile.cas.IntScalar.unary_+", "link" : "smile\/cas\/Mod.html#unary_+:smile.cas.IntScalar", "kind" : "def"}, {"label" : "**", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.**", "link" : "smile\/cas\/Mod.html#**(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "%", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.%", "link" : "smile\/cas\/Mod.html#%(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "\/", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.\/", "link" : "smile\/cas\/Mod.html#\/(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "*", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.*", "link" : "smile\/cas\/Mod.html#*(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "-", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.-", "link" : "smile\/cas\/Mod.html#-(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "+", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.+", "link" : "smile\/cas\/Mod.html#+(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): IntScalar", "member" : "smile.cas.IntScalar.apply", "link" : "smile\/cas\/Mod.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.IntScalar", "kind" : "def"}, {"label" : "toScalar", "tail" : "(): Scalar", "member" : "smile.cas.IntScalar.toScalar", "link" : "smile\/cas\/Mod.html#toScalar:smile.cas.Scalar", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.IntScalar.shape", "link" : "smile\/cas\/Mod.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.IntScalar.rank", "link" : "smile\/cas\/Mod.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/Mod.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/Mod.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/Mod.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/Mod.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/Mod.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/Mod.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/Mod.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Mod.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Mod.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Mod.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/Mod.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/Mod.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/Mod.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/Mod.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/Mod.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/Mod.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/Mod.html", "kind" : "case class"}, {"name" : "smile.cas.Mul", "shortDescription" : "x * y", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/Mul.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Mul) => Boolean, msg: => Any): Mul", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Mul.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Mul) => Boolean): Mul", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Mul.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Mul", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Mul.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Mul", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Mul.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Mul, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/Mul.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Mul, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/Mul.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "simplify", "tail" : "(): Scalar", "member" : "smile.cas.Mul.simplify", "link" : "smile\/cas\/Mul.html#simplify:smile.cas.Scalar", "kind" : "def"}, {"label" : "d", "tail" : "(dx: VectorVar): Vector", "member" : "smile.cas.Mul.d", "link" : "smile\/cas\/Mul.html#d(dx:smile.cas.VectorVar):smile.cas.Vector", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var): Scalar", "member" : "smile.cas.Mul.d", "link" : "smile\/cas\/Mul.html#d(dx:smile.cas.Var):smile.cas.Scalar", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): Scalar", "member" : "smile.cas.Mul.apply", "link" : "smile\/cas\/Mul.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.Scalar", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.Mul.toString", "link" : "smile\/cas\/Mul.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.Mul#<init>", "error" : "unsupported entity"}, {"label" : "y", "tail" : ": Scalar", "member" : "smile.cas.Mul.y", "link" : "smile\/cas\/Mul.html#y:smile.cas.Scalar", "kind" : "val"}, {"label" : "x", "tail" : ": Scalar", "member" : "smile.cas.Mul.x", "link" : "smile\/cas\/Mul.html#x:smile.cas.Scalar", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/Mul.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "*", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/Mul.html#*(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/Mul.html#*(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Scalar", "member" : "smile.cas.Scalar.unary_-", "link" : "smile\/cas\/Mul.html#unary_-:smile.cas.Scalar", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): Scalar", "member" : "smile.cas.Scalar.unary_+", "link" : "smile\/cas\/Mul.html#unary_+:smile.cas.Scalar", "kind" : "def"}, {"label" : "**", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.**", "link" : "smile\/cas\/Mul.html#**(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "\/", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.\/", "link" : "smile\/cas\/Mul.html#\/(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "*", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/Mul.html#*(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "-", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.-", "link" : "smile\/cas\/Mul.html#-(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "+", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.+", "link" : "smile\/cas\/Mul.html#+(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var*): Vector", "member" : "smile.cas.Scalar.d", "link" : "smile\/cas\/Mul.html#d(dx:smile.cas.Var*):smile.cas.Vector", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): Scalar", "member" : "smile.cas.Scalar.apply", "link" : "smile\/cas\/Mul.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.Scalar", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.Scalar.shape", "link" : "smile\/cas\/Mul.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.Scalar.rank", "link" : "smile\/cas\/Mul.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/Mul.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/Mul.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/Mul.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/Mul.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/Mul.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/Mul.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/Mul.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Mul.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Mul.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Mul.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/Mul.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/Mul.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/Mul.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/Mul.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/Mul.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/Mul.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/Mul.html", "kind" : "case class"}, {"name" : "smile.cas.Neg", "shortDescription" : "-x", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/Neg.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Neg) => Boolean, msg: => Any): Neg", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Neg.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Neg) => Boolean): Neg", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Neg.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Neg", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Neg.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Neg", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Neg.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Neg, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/Neg.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Neg, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/Neg.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "simplify", "tail" : "(): Scalar", "member" : "smile.cas.Neg.simplify", "link" : "smile\/cas\/Neg.html#simplify:smile.cas.Scalar", "kind" : "def"}, {"label" : "d", "tail" : "(dx: VectorVar): Vector", "member" : "smile.cas.Neg.d", "link" : "smile\/cas\/Neg.html#d(dx:smile.cas.VectorVar):smile.cas.Vector", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var): Scalar", "member" : "smile.cas.Neg.d", "link" : "smile\/cas\/Neg.html#d(dx:smile.cas.Var):smile.cas.Scalar", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): Scalar", "member" : "smile.cas.Neg.apply", "link" : "smile\/cas\/Neg.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.Scalar", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.Neg.toString", "link" : "smile\/cas\/Neg.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.Neg#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": Scalar", "member" : "smile.cas.Neg.x", "link" : "smile\/cas\/Neg.html#x:smile.cas.Scalar", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/Neg.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "*", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/Neg.html#*(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/Neg.html#*(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Scalar", "member" : "smile.cas.Scalar.unary_-", "link" : "smile\/cas\/Neg.html#unary_-:smile.cas.Scalar", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): Scalar", "member" : "smile.cas.Scalar.unary_+", "link" : "smile\/cas\/Neg.html#unary_+:smile.cas.Scalar", "kind" : "def"}, {"label" : "**", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.**", "link" : "smile\/cas\/Neg.html#**(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "\/", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.\/", "link" : "smile\/cas\/Neg.html#\/(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "*", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/Neg.html#*(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "-", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.-", "link" : "smile\/cas\/Neg.html#-(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "+", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.+", "link" : "smile\/cas\/Neg.html#+(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var*): Vector", "member" : "smile.cas.Scalar.d", "link" : "smile\/cas\/Neg.html#d(dx:smile.cas.Var*):smile.cas.Vector", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): Scalar", "member" : "smile.cas.Scalar.apply", "link" : "smile\/cas\/Neg.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.Scalar", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.Scalar.shape", "link" : "smile\/cas\/Neg.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.Scalar.rank", "link" : "smile\/cas\/Neg.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/Neg.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/Neg.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/Neg.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/Neg.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/Neg.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/Neg.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/Neg.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Neg.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Neg.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Neg.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/Neg.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/Neg.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/Neg.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/Neg.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/Neg.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/Neg.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/Neg.html", "kind" : "case class"}, {"name" : "smile.cas.NegMatrix", "shortDescription" : "-A", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/NegMatrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (NegMatrix) => Boolean, msg: => Any): NegMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/NegMatrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (NegMatrix) => Boolean): NegMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/NegMatrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): NegMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/NegMatrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): NegMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/NegMatrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (NegMatrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/NegMatrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (NegMatrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/NegMatrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "simplify", "tail" : "(): Matrix", "member" : "smile.cas.NegMatrix.simplify", "link" : "smile\/cas\/NegMatrix.html#simplify:smile.cas.Matrix", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var): Matrix", "member" : "smile.cas.NegMatrix.d", "link" : "smile\/cas\/NegMatrix.html#d(dx:smile.cas.Var):smile.cas.Matrix", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): Matrix", "member" : "smile.cas.NegMatrix.apply", "link" : "smile\/cas\/NegMatrix.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.Matrix", "kind" : "def"}, {"label" : "size", "tail" : "(): (IntScalar, IntScalar)", "member" : "smile.cas.NegMatrix.size", "link" : "smile\/cas\/NegMatrix.html#size:(smile.cas.IntScalar,smile.cas.IntScalar)", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.NegMatrix.toString", "link" : "smile\/cas\/NegMatrix.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.NegMatrix#<init>", "error" : "unsupported entity"}, {"label" : "A", "tail" : ": Matrix", "member" : "smile.cas.NegMatrix.A", "link" : "smile\/cas\/NegMatrix.html#A:smile.cas.Matrix", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/NegMatrix.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "inv", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.inv", "link" : "smile\/cas\/NegMatrix.html#inv:smile.cas.Matrix", "kind" : "def"}, {"label" : "t", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.t", "link" : "smile\/cas\/NegMatrix.html#t:smile.cas.Matrix", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.unary_-", "link" : "smile\/cas\/NegMatrix.html#unary_-:smile.cas.Matrix", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.unary_+", "link" : "smile\/cas\/NegMatrix.html#unary_+:smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Matrix.*", "link" : "smile\/cas\/NegMatrix.html#*(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Matrix.*", "link" : "smile\/cas\/NegMatrix.html#*(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "*", "tail" : "(y: Scalar): Matrix", "member" : "smile.cas.Matrix.*", "link" : "smile\/cas\/NegMatrix.html#*(y:smile.cas.Scalar):smile.cas.Matrix", "kind" : "def"}, {"label" : "-", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Matrix.-", "link" : "smile\/cas\/NegMatrix.html#-(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "+", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Matrix.+", "link" : "smile\/cas\/NegMatrix.html#+(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): Matrix", "member" : "smile.cas.Matrix.apply", "link" : "smile\/cas\/NegMatrix.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.Matrix", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.Matrix.shape", "link" : "smile\/cas\/NegMatrix.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.Matrix.rank", "link" : "smile\/cas\/NegMatrix.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/NegMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/NegMatrix.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/NegMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/NegMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/NegMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/NegMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/NegMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/NegMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/NegMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/NegMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/NegMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/NegMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/NegMatrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/NegMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/NegMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/NegMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/NegMatrix.html", "kind" : "case class"}, {"name" : "smile.cas.NegVector", "shortDescription" : "-x", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/NegVector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (NegVector) => Boolean, msg: => Any): NegVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/NegVector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (NegVector) => Boolean): NegVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/NegVector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): NegVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/NegVector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): NegVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/NegVector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (NegVector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/NegVector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (NegVector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/NegVector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "simplify", "tail" : "(): Vector", "member" : "smile.cas.NegVector.simplify", "link" : "smile\/cas\/NegVector.html#simplify:smile.cas.Vector", "kind" : "def"}, {"label" : "d", "tail" : "(dx: VectorVar): Matrix", "member" : "smile.cas.NegVector.d", "link" : "smile\/cas\/NegVector.html#d(dx:smile.cas.VectorVar):smile.cas.Matrix", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var): Vector", "member" : "smile.cas.NegVector.d", "link" : "smile\/cas\/NegVector.html#d(dx:smile.cas.Var):smile.cas.Vector", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): Vector", "member" : "smile.cas.NegVector.apply", "link" : "smile\/cas\/NegVector.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.Vector", "kind" : "def"}, {"label" : "size", "tail" : "(): IntScalar", "member" : "smile.cas.NegVector.size", "link" : "smile\/cas\/NegVector.html#size:smile.cas.IntScalar", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.NegVector.toString", "link" : "smile\/cas\/NegVector.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.NegVector#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": Vector", "member" : "smile.cas.NegVector.x", "link" : "smile\/cas\/NegVector.html#x:smile.cas.Vector", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/NegVector.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Vector", "member" : "smile.cas.Vector.unary_-", "link" : "smile\/cas\/NegVector.html#unary_-:smile.cas.Vector", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): Vector", "member" : "smile.cas.Vector.unary_+", "link" : "smile\/cas\/NegVector.html#unary_+:smile.cas.Vector", "kind" : "def"}, {"label" : "*~", "tail" : "(y: Vector): Matrix", "member" : "smile.cas.Vector.*~", "link" : "smile\/cas\/NegVector.html#*~(y:smile.cas.Vector):smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Vector): Scalar", "member" : "smile.cas.Vector.*", "link" : "smile\/cas\/NegVector.html#*(y:smile.cas.Vector):smile.cas.Scalar", "kind" : "def"}, {"label" : "\/", "tail" : "(y: Scalar): Vector", "member" : "smile.cas.Vector.\/", "link" : "smile\/cas\/NegVector.html#\/(y:smile.cas.Scalar):smile.cas.Vector", "kind" : "def"}, {"label" : "*", "tail" : "(y: Scalar): Vector", "member" : "smile.cas.Vector.*", "link" : "smile\/cas\/NegVector.html#*(y:smile.cas.Scalar):smile.cas.Vector", "kind" : "def"}, {"label" : "-", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Vector.-", "link" : "smile\/cas\/NegVector.html#-(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "+", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Vector.+", "link" : "smile\/cas\/NegVector.html#+(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): Vector", "member" : "smile.cas.Vector.apply", "link" : "smile\/cas\/NegVector.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.Vector", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.Vector.shape", "link" : "smile\/cas\/NegVector.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.Vector.rank", "link" : "smile\/cas\/NegVector.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/NegVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/NegVector.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/NegVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/NegVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/NegVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/NegVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/NegVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/NegVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/NegVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/NegVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/NegVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/NegVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/NegVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/NegVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/NegVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/NegVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/NegVector.html", "kind" : "case class"}, {"name" : "smile.cas.OneMatrix", "shortDescription" : "Matrix of all 1's", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/OneMatrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (OneMatrix) => Boolean, msg: => Any): OneMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/OneMatrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (OneMatrix) => Boolean): OneMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/OneMatrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): OneMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/OneMatrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): OneMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/OneMatrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (OneMatrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/OneMatrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (OneMatrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/OneMatrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): Matrix", "member" : "smile.cas.OneMatrix.apply", "link" : "smile\/cas\/OneMatrix.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.Matrix", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var): Matrix", "member" : "smile.cas.OneMatrix.d", "link" : "smile\/cas\/OneMatrix.html#d(dx:smile.cas.Var):smile.cas.Matrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.OneMatrix.toString", "link" : "smile\/cas\/OneMatrix.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.OneMatrix#<init>", "error" : "unsupported entity"}, {"label" : "size", "tail" : ": (IntScalar, IntScalar)", "member" : "smile.cas.OneMatrix.size", "link" : "smile\/cas\/OneMatrix.html#size:(smile.cas.IntScalar,smile.cas.IntScalar)", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/OneMatrix.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "inv", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.inv", "link" : "smile\/cas\/OneMatrix.html#inv:smile.cas.Matrix", "kind" : "def"}, {"label" : "t", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.t", "link" : "smile\/cas\/OneMatrix.html#t:smile.cas.Matrix", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.unary_-", "link" : "smile\/cas\/OneMatrix.html#unary_-:smile.cas.Matrix", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.unary_+", "link" : "smile\/cas\/OneMatrix.html#unary_+:smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Matrix.*", "link" : "smile\/cas\/OneMatrix.html#*(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Matrix.*", "link" : "smile\/cas\/OneMatrix.html#*(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "*", "tail" : "(y: Scalar): Matrix", "member" : "smile.cas.Matrix.*", "link" : "smile\/cas\/OneMatrix.html#*(y:smile.cas.Scalar):smile.cas.Matrix", "kind" : "def"}, {"label" : "-", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Matrix.-", "link" : "smile\/cas\/OneMatrix.html#-(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "+", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Matrix.+", "link" : "smile\/cas\/OneMatrix.html#+(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "simplify", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.simplify", "link" : "smile\/cas\/OneMatrix.html#simplify:smile.cas.Matrix", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): Matrix", "member" : "smile.cas.Matrix.apply", "link" : "smile\/cas\/OneMatrix.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.Matrix", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.Matrix.shape", "link" : "smile\/cas\/OneMatrix.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.Matrix.rank", "link" : "smile\/cas\/OneMatrix.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/OneMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/OneMatrix.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/OneMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/OneMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/OneMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/OneMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/OneMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/OneMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/OneMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/OneMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/OneMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/OneMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/OneMatrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/OneMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/OneMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/OneMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/OneMatrix.html", "kind" : "case class"}, {"name" : "smile.cas.OneVector", "shortDescription" : "Vector of all 1's", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/OneVector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (OneVector) => Boolean, msg: => Any): OneVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/OneVector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (OneVector) => Boolean): OneVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/OneVector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): OneVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/OneVector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): OneVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/OneVector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (OneVector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/OneVector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (OneVector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/OneVector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): Vector", "member" : "smile.cas.OneVector.apply", "link" : "smile\/cas\/OneVector.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.Vector", "kind" : "def"}, {"label" : "d", "tail" : "(dx: VectorVar): Matrix", "member" : "smile.cas.OneVector.d", "link" : "smile\/cas\/OneVector.html#d(dx:smile.cas.VectorVar):smile.cas.Matrix", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var): Vector", "member" : "smile.cas.OneVector.d", "link" : "smile\/cas\/OneVector.html#d(dx:smile.cas.Var):smile.cas.Vector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.OneVector.toString", "link" : "smile\/cas\/OneVector.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.OneVector#<init>", "error" : "unsupported entity"}, {"label" : "size", "tail" : ": IntScalar", "member" : "smile.cas.OneVector.size", "link" : "smile\/cas\/OneVector.html#size:smile.cas.IntScalar", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/OneVector.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Vector", "member" : "smile.cas.Vector.unary_-", "link" : "smile\/cas\/OneVector.html#unary_-:smile.cas.Vector", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): Vector", "member" : "smile.cas.Vector.unary_+", "link" : "smile\/cas\/OneVector.html#unary_+:smile.cas.Vector", "kind" : "def"}, {"label" : "*~", "tail" : "(y: Vector): Matrix", "member" : "smile.cas.Vector.*~", "link" : "smile\/cas\/OneVector.html#*~(y:smile.cas.Vector):smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Vector): Scalar", "member" : "smile.cas.Vector.*", "link" : "smile\/cas\/OneVector.html#*(y:smile.cas.Vector):smile.cas.Scalar", "kind" : "def"}, {"label" : "\/", "tail" : "(y: Scalar): Vector", "member" : "smile.cas.Vector.\/", "link" : "smile\/cas\/OneVector.html#\/(y:smile.cas.Scalar):smile.cas.Vector", "kind" : "def"}, {"label" : "*", "tail" : "(y: Scalar): Vector", "member" : "smile.cas.Vector.*", "link" : "smile\/cas\/OneVector.html#*(y:smile.cas.Scalar):smile.cas.Vector", "kind" : "def"}, {"label" : "-", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Vector.-", "link" : "smile\/cas\/OneVector.html#-(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "+", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Vector.+", "link" : "smile\/cas\/OneVector.html#+(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "simplify", "tail" : "(): Vector", "member" : "smile.cas.Vector.simplify", "link" : "smile\/cas\/OneVector.html#simplify:smile.cas.Vector", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): Vector", "member" : "smile.cas.Vector.apply", "link" : "smile\/cas\/OneVector.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.Vector", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.Vector.shape", "link" : "smile\/cas\/OneVector.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.Vector.rank", "link" : "smile\/cas\/OneVector.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/OneVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/OneVector.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/OneVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/OneVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/OneVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/OneVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/OneVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/OneVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/OneVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/OneVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/OneVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/OneVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/OneVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/OneVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/OneVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/OneVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/OneVector.html", "kind" : "case class"}, {"name" : "smile.cas.OuterProduct", "shortDescription" : "Outer product (x ** y)", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/OuterProduct.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (OuterProduct) => Boolean, msg: => Any): OuterProduct", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/OuterProduct.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (OuterProduct) => Boolean): OuterProduct", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/OuterProduct.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): OuterProduct", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/OuterProduct.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): OuterProduct", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/OuterProduct.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (OuterProduct, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/OuterProduct.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (OuterProduct, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/OuterProduct.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "simplify", "tail" : "(): Matrix", "member" : "smile.cas.OuterProduct.simplify", "link" : "smile\/cas\/OuterProduct.html#simplify:smile.cas.Matrix", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var): Matrix", "member" : "smile.cas.OuterProduct.d", "link" : "smile\/cas\/OuterProduct.html#d(dx:smile.cas.Var):smile.cas.Matrix", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): Matrix", "member" : "smile.cas.OuterProduct.apply", "link" : "smile\/cas\/OuterProduct.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.Matrix", "kind" : "def"}, {"label" : "size", "tail" : "(): (IntScalar, IntScalar)", "member" : "smile.cas.OuterProduct.size", "link" : "smile\/cas\/OuterProduct.html#size:(smile.cas.IntScalar,smile.cas.IntScalar)", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.OuterProduct.toString", "link" : "smile\/cas\/OuterProduct.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.OuterProduct#<init>", "error" : "unsupported entity"}, {"label" : "y", "tail" : ": Vector", "member" : "smile.cas.OuterProduct.y", "link" : "smile\/cas\/OuterProduct.html#y:smile.cas.Vector", "kind" : "val"}, {"label" : "x", "tail" : ": Vector", "member" : "smile.cas.OuterProduct.x", "link" : "smile\/cas\/OuterProduct.html#x:smile.cas.Vector", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/OuterProduct.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "inv", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.inv", "link" : "smile\/cas\/OuterProduct.html#inv:smile.cas.Matrix", "kind" : "def"}, {"label" : "t", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.t", "link" : "smile\/cas\/OuterProduct.html#t:smile.cas.Matrix", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.unary_-", "link" : "smile\/cas\/OuterProduct.html#unary_-:smile.cas.Matrix", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.unary_+", "link" : "smile\/cas\/OuterProduct.html#unary_+:smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Matrix.*", "link" : "smile\/cas\/OuterProduct.html#*(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Matrix.*", "link" : "smile\/cas\/OuterProduct.html#*(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "*", "tail" : "(y: Scalar): Matrix", "member" : "smile.cas.Matrix.*", "link" : "smile\/cas\/OuterProduct.html#*(y:smile.cas.Scalar):smile.cas.Matrix", "kind" : "def"}, {"label" : "-", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Matrix.-", "link" : "smile\/cas\/OuterProduct.html#-(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "+", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Matrix.+", "link" : "smile\/cas\/OuterProduct.html#+(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): Matrix", "member" : "smile.cas.Matrix.apply", "link" : "smile\/cas\/OuterProduct.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.Matrix", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.Matrix.shape", "link" : "smile\/cas\/OuterProduct.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.Matrix.rank", "link" : "smile\/cas\/OuterProduct.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/OuterProduct.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/OuterProduct.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/OuterProduct.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/OuterProduct.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/OuterProduct.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/OuterProduct.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/OuterProduct.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/OuterProduct.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/OuterProduct.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/OuterProduct.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/OuterProduct.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/OuterProduct.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/OuterProduct.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/OuterProduct.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/OuterProduct.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/OuterProduct.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/OuterProduct.html", "kind" : "case class"}, {"name" : "smile.cas.Power", "shortDescription" : "x ** y", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/Power.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Power) => Boolean, msg: => Any): Power", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Power.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Power) => Boolean): Power", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Power.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Power", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Power.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Power", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Power.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Power, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/Power.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Power, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/Power.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "simplify", "tail" : "(): Scalar", "member" : "smile.cas.Power.simplify", "link" : "smile\/cas\/Power.html#simplify:smile.cas.Scalar", "kind" : "def"}, {"label" : "d", "tail" : "(dx: VectorVar): Vector", "member" : "smile.cas.Power.d", "link" : "smile\/cas\/Power.html#d(dx:smile.cas.VectorVar):smile.cas.Vector", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var): Scalar", "member" : "smile.cas.Power.d", "link" : "smile\/cas\/Power.html#d(dx:smile.cas.Var):smile.cas.Scalar", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): Scalar", "member" : "smile.cas.Power.apply", "link" : "smile\/cas\/Power.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.Scalar", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.Power.toString", "link" : "smile\/cas\/Power.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.Power#<init>", "error" : "unsupported entity"}, {"label" : "y", "tail" : ": Scalar", "member" : "smile.cas.Power.y", "link" : "smile\/cas\/Power.html#y:smile.cas.Scalar", "kind" : "val"}, {"label" : "x", "tail" : ": Scalar", "member" : "smile.cas.Power.x", "link" : "smile\/cas\/Power.html#x:smile.cas.Scalar", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/Power.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "*", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/Power.html#*(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/Power.html#*(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Scalar", "member" : "smile.cas.Scalar.unary_-", "link" : "smile\/cas\/Power.html#unary_-:smile.cas.Scalar", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): Scalar", "member" : "smile.cas.Scalar.unary_+", "link" : "smile\/cas\/Power.html#unary_+:smile.cas.Scalar", "kind" : "def"}, {"label" : "**", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.**", "link" : "smile\/cas\/Power.html#**(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "\/", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.\/", "link" : "smile\/cas\/Power.html#\/(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "*", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/Power.html#*(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "-", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.-", "link" : "smile\/cas\/Power.html#-(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "+", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.+", "link" : "smile\/cas\/Power.html#+(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var*): Vector", "member" : "smile.cas.Scalar.d", "link" : "smile\/cas\/Power.html#d(dx:smile.cas.Var*):smile.cas.Vector", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): Scalar", "member" : "smile.cas.Scalar.apply", "link" : "smile\/cas\/Power.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.Scalar", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.Scalar.shape", "link" : "smile\/cas\/Power.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.Scalar.rank", "link" : "smile\/cas\/Power.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/Power.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/Power.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/Power.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/Power.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/Power.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/Power.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/Power.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Power.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Power.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Power.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/Power.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/Power.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/Power.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/Power.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/Power.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/Power.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/Power.html", "kind" : "case class"}, {"name" : "smile.cas.Round", "shortDescription" : "round(x)", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/Round.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Round) => Boolean, msg: => Any): Round", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Round.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Round) => Boolean): Round", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Round.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Round", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Round.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Round", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Round.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Round, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/Round.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Round, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/Round.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "simplify", "tail" : "(): IntScalar", "member" : "smile.cas.Round.simplify", "link" : "smile\/cas\/Round.html#simplify:smile.cas.IntScalar", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): IntScalar", "member" : "smile.cas.Round.apply", "link" : "smile\/cas\/Round.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.IntScalar", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.Round.toString", "link" : "smile\/cas\/Round.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.Round#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": Scalar", "member" : "smile.cas.Round.x", "link" : "smile\/cas\/Round.html#x:smile.cas.Scalar", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/Round.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): IntScalar", "member" : "smile.cas.IntScalar.unary_-", "link" : "smile\/cas\/Round.html#unary_-:smile.cas.IntScalar", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): IntScalar", "member" : "smile.cas.IntScalar.unary_+", "link" : "smile\/cas\/Round.html#unary_+:smile.cas.IntScalar", "kind" : "def"}, {"label" : "**", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.**", "link" : "smile\/cas\/Round.html#**(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "%", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.%", "link" : "smile\/cas\/Round.html#%(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "\/", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.\/", "link" : "smile\/cas\/Round.html#\/(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "*", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.*", "link" : "smile\/cas\/Round.html#*(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "-", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.-", "link" : "smile\/cas\/Round.html#-(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "+", "tail" : "(y: IntScalar): IntScalar", "member" : "smile.cas.IntScalar.+", "link" : "smile\/cas\/Round.html#+(y:smile.cas.IntScalar):smile.cas.IntScalar", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): IntScalar", "member" : "smile.cas.IntScalar.apply", "link" : "smile\/cas\/Round.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.IntScalar", "kind" : "def"}, {"label" : "toScalar", "tail" : "(): Scalar", "member" : "smile.cas.IntScalar.toScalar", "link" : "smile\/cas\/Round.html#toScalar:smile.cas.Scalar", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.IntScalar.shape", "link" : "smile\/cas\/Round.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.IntScalar.rank", "link" : "smile\/cas\/Round.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/Round.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/Round.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/Round.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/Round.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/Round.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/Round.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/Round.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Round.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Round.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Round.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/Round.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/Round.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/Round.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/Round.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/Round.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/Round.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/Round.html", "kind" : "case class"}, {"name" : "smile.cas.RowMatrix", "shortDescription" : "Row-wise matrix", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/RowMatrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (RowMatrix) => Boolean, msg: => Any): RowMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/RowMatrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (RowMatrix) => Boolean): RowMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/RowMatrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): RowMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/RowMatrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): RowMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/RowMatrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (RowMatrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/RowMatrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (RowMatrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/RowMatrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "simplify", "tail" : "(): Matrix", "member" : "smile.cas.RowMatrix.simplify", "link" : "smile\/cas\/RowMatrix.html#simplify:smile.cas.Matrix", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): Matrix", "member" : "smile.cas.RowMatrix.apply", "link" : "smile\/cas\/RowMatrix.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.Matrix", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var): Matrix", "member" : "smile.cas.RowMatrix.d", "link" : "smile\/cas\/RowMatrix.html#d(dx:smile.cas.Var):smile.cas.Matrix", "kind" : "def"}, {"label" : "size", "tail" : "(): (IntScalar, IntScalar)", "member" : "smile.cas.RowMatrix.size", "link" : "smile\/cas\/RowMatrix.html#size:(smile.cas.IntScalar,smile.cas.IntScalar)", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.RowMatrix.toString", "link" : "smile\/cas\/RowMatrix.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.RowMatrix#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": Vector*", "member" : "smile.cas.RowMatrix.x", "link" : "smile\/cas\/RowMatrix.html#x:smile.cas.Vector*", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/RowMatrix.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "inv", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.inv", "link" : "smile\/cas\/RowMatrix.html#inv:smile.cas.Matrix", "kind" : "def"}, {"label" : "t", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.t", "link" : "smile\/cas\/RowMatrix.html#t:smile.cas.Matrix", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.unary_-", "link" : "smile\/cas\/RowMatrix.html#unary_-:smile.cas.Matrix", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.unary_+", "link" : "smile\/cas\/RowMatrix.html#unary_+:smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Matrix.*", "link" : "smile\/cas\/RowMatrix.html#*(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Matrix.*", "link" : "smile\/cas\/RowMatrix.html#*(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "*", "tail" : "(y: Scalar): Matrix", "member" : "smile.cas.Matrix.*", "link" : "smile\/cas\/RowMatrix.html#*(y:smile.cas.Scalar):smile.cas.Matrix", "kind" : "def"}, {"label" : "-", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Matrix.-", "link" : "smile\/cas\/RowMatrix.html#-(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "+", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Matrix.+", "link" : "smile\/cas\/RowMatrix.html#+(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): Matrix", "member" : "smile.cas.Matrix.apply", "link" : "smile\/cas\/RowMatrix.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.Matrix", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.Matrix.shape", "link" : "smile\/cas\/RowMatrix.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.Matrix.rank", "link" : "smile\/cas\/RowMatrix.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/RowMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/RowMatrix.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/RowMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/RowMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/RowMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/RowMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/RowMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/RowMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/RowMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/RowMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/RowMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/RowMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/RowMatrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/RowMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/RowMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/RowMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/RowMatrix.html", "kind" : "case class"}, {"name" : "smile.cas.Scalar", "trait" : "smile\/cas\/Scalar.html", "kind" : "trait", "members_trait" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/Scalar.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Scalar) => Boolean, msg: => Any): Scalar", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Scalar.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Scalar) => Boolean): Scalar", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Scalar.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Scalar", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Scalar.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Scalar", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Scalar.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Scalar, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/Scalar.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Scalar, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/Scalar.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "*", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/Scalar.html#*(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/Scalar.html#*(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Scalar", "member" : "smile.cas.Scalar.unary_-", "link" : "smile\/cas\/Scalar.html#unary_-:smile.cas.Scalar", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): Scalar", "member" : "smile.cas.Scalar.unary_+", "link" : "smile\/cas\/Scalar.html#unary_+:smile.cas.Scalar", "kind" : "def"}, {"label" : "**", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.**", "link" : "smile\/cas\/Scalar.html#**(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "\/", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.\/", "link" : "smile\/cas\/Scalar.html#\/(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "*", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/Scalar.html#*(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "-", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.-", "link" : "smile\/cas\/Scalar.html#-(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "+", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.+", "link" : "smile\/cas\/Scalar.html#+(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var*): Vector", "member" : "smile.cas.Scalar.d", "link" : "smile\/cas\/Scalar.html#d(dx:smile.cas.Var*):smile.cas.Vector", "kind" : "def"}, {"label" : "simplify", "tail" : "(): Scalar", "member" : "smile.cas.Scalar.simplify", "link" : "smile\/cas\/Scalar.html#simplify:smile.cas.Scalar", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): Scalar", "member" : "smile.cas.Scalar.apply", "link" : "smile\/cas\/Scalar.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.Scalar", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.Scalar.shape", "link" : "smile\/cas\/Scalar.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.Scalar.rank", "link" : "smile\/cas\/Scalar.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/Scalar.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/Scalar.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/Scalar.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/Scalar.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/Scalar.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/Scalar.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/Scalar.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Scalar.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Scalar.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Scalar.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/Scalar.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/Scalar.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/cas\/Scalar.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/Scalar.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/cas\/Scalar.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/cas\/Scalar.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/Scalar.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/Scalar.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/Scalar.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "d", "tail" : "(dx: VectorVar): Vector", "member" : "smile.cas.Scalar.d", "link" : "smile\/cas\/Scalar.html#d(dx:smile.cas.VectorVar):smile.cas.Vector", "kind" : "abstract def"}, {"label" : "d", "tail" : "(dx: Var): Scalar", "member" : "smile.cas.Scalar.d", "link" : "smile\/cas\/Scalar.html#d(dx:smile.cas.Var):smile.cas.Scalar", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): Scalar", "member" : "smile.cas.Scalar.apply", "link" : "smile\/cas\/Scalar.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.Scalar", "kind" : "abstract def"}], "shortDescription" : "Scalar: rank-0 tensor."}, {"name" : "smile.cas.ScalarMatrixProduct", "shortDescription" : "a * A", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/ScalarMatrixProduct.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ScalarMatrixProduct) => Boolean, msg: => Any): ScalarMatrixProduct", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/ScalarMatrixProduct.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ScalarMatrixProduct) => Boolean): ScalarMatrixProduct", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/ScalarMatrixProduct.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): ScalarMatrixProduct", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/ScalarMatrixProduct.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ScalarMatrixProduct", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/ScalarMatrixProduct.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ScalarMatrixProduct, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/ScalarMatrixProduct.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ScalarMatrixProduct, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/ScalarMatrixProduct.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "simplify", "tail" : "(): Matrix", "member" : "smile.cas.ScalarMatrixProduct.simplify", "link" : "smile\/cas\/ScalarMatrixProduct.html#simplify:smile.cas.Matrix", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var): Matrix", "member" : "smile.cas.ScalarMatrixProduct.d", "link" : "smile\/cas\/ScalarMatrixProduct.html#d(dx:smile.cas.Var):smile.cas.Matrix", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): Matrix", "member" : "smile.cas.ScalarMatrixProduct.apply", "link" : "smile\/cas\/ScalarMatrixProduct.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.Matrix", "kind" : "def"}, {"label" : "size", "tail" : "(): (IntScalar, IntScalar)", "member" : "smile.cas.ScalarMatrixProduct.size", "link" : "smile\/cas\/ScalarMatrixProduct.html#size:(smile.cas.IntScalar,smile.cas.IntScalar)", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.ScalarMatrixProduct.toString", "link" : "smile\/cas\/ScalarMatrixProduct.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.ScalarMatrixProduct#<init>", "error" : "unsupported entity"}, {"label" : "A", "tail" : ": Matrix", "member" : "smile.cas.ScalarMatrixProduct.A", "link" : "smile\/cas\/ScalarMatrixProduct.html#A:smile.cas.Matrix", "kind" : "val"}, {"label" : "a", "tail" : ": Scalar", "member" : "smile.cas.ScalarMatrixProduct.a", "link" : "smile\/cas\/ScalarMatrixProduct.html#a:smile.cas.Scalar", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/ScalarMatrixProduct.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "inv", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.inv", "link" : "smile\/cas\/ScalarMatrixProduct.html#inv:smile.cas.Matrix", "kind" : "def"}, {"label" : "t", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.t", "link" : "smile\/cas\/ScalarMatrixProduct.html#t:smile.cas.Matrix", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.unary_-", "link" : "smile\/cas\/ScalarMatrixProduct.html#unary_-:smile.cas.Matrix", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.unary_+", "link" : "smile\/cas\/ScalarMatrixProduct.html#unary_+:smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Matrix.*", "link" : "smile\/cas\/ScalarMatrixProduct.html#*(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Matrix.*", "link" : "smile\/cas\/ScalarMatrixProduct.html#*(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "*", "tail" : "(y: Scalar): Matrix", "member" : "smile.cas.Matrix.*", "link" : "smile\/cas\/ScalarMatrixProduct.html#*(y:smile.cas.Scalar):smile.cas.Matrix", "kind" : "def"}, {"label" : "-", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Matrix.-", "link" : "smile\/cas\/ScalarMatrixProduct.html#-(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "+", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Matrix.+", "link" : "smile\/cas\/ScalarMatrixProduct.html#+(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): Matrix", "member" : "smile.cas.Matrix.apply", "link" : "smile\/cas\/ScalarMatrixProduct.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.Matrix", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.Matrix.shape", "link" : "smile\/cas\/ScalarMatrixProduct.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.Matrix.rank", "link" : "smile\/cas\/ScalarMatrixProduct.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/ScalarMatrixProduct.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/ScalarMatrixProduct.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/ScalarMatrixProduct.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/ScalarMatrixProduct.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/ScalarMatrixProduct.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/ScalarMatrixProduct.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/ScalarMatrixProduct.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/ScalarMatrixProduct.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/ScalarMatrixProduct.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/ScalarMatrixProduct.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/ScalarMatrixProduct.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/ScalarMatrixProduct.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/ScalarMatrixProduct.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/ScalarMatrixProduct.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/ScalarMatrixProduct.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/ScalarMatrixProduct.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/ScalarMatrixProduct.html", "kind" : "case class"}, {"name" : "smile.cas.ScalarVectorProduct", "shortDescription" : "a * x", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/ScalarVectorProduct.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ScalarVectorProduct) => Boolean, msg: => Any): ScalarVectorProduct", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/ScalarVectorProduct.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ScalarVectorProduct) => Boolean): ScalarVectorProduct", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/ScalarVectorProduct.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): ScalarVectorProduct", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/ScalarVectorProduct.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ScalarVectorProduct", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/ScalarVectorProduct.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ScalarVectorProduct, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/ScalarVectorProduct.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ScalarVectorProduct, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/ScalarVectorProduct.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "simplify", "tail" : "(): Vector", "member" : "smile.cas.ScalarVectorProduct.simplify", "link" : "smile\/cas\/ScalarVectorProduct.html#simplify:smile.cas.Vector", "kind" : "def"}, {"label" : "d", "tail" : "(dx: VectorVar): Matrix", "member" : "smile.cas.ScalarVectorProduct.d", "link" : "smile\/cas\/ScalarVectorProduct.html#d(dx:smile.cas.VectorVar):smile.cas.Matrix", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var): Vector", "member" : "smile.cas.ScalarVectorProduct.d", "link" : "smile\/cas\/ScalarVectorProduct.html#d(dx:smile.cas.Var):smile.cas.Vector", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): Vector", "member" : "smile.cas.ScalarVectorProduct.apply", "link" : "smile\/cas\/ScalarVectorProduct.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.Vector", "kind" : "def"}, {"label" : "size", "tail" : "(): IntScalar", "member" : "smile.cas.ScalarVectorProduct.size", "link" : "smile\/cas\/ScalarVectorProduct.html#size:smile.cas.IntScalar", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.ScalarVectorProduct.toString", "link" : "smile\/cas\/ScalarVectorProduct.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.ScalarVectorProduct#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": Vector", "member" : "smile.cas.ScalarVectorProduct.x", "link" : "smile\/cas\/ScalarVectorProduct.html#x:smile.cas.Vector", "kind" : "val"}, {"label" : "a", "tail" : ": Scalar", "member" : "smile.cas.ScalarVectorProduct.a", "link" : "smile\/cas\/ScalarVectorProduct.html#a:smile.cas.Scalar", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/ScalarVectorProduct.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Vector", "member" : "smile.cas.Vector.unary_-", "link" : "smile\/cas\/ScalarVectorProduct.html#unary_-:smile.cas.Vector", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): Vector", "member" : "smile.cas.Vector.unary_+", "link" : "smile\/cas\/ScalarVectorProduct.html#unary_+:smile.cas.Vector", "kind" : "def"}, {"label" : "*~", "tail" : "(y: Vector): Matrix", "member" : "smile.cas.Vector.*~", "link" : "smile\/cas\/ScalarVectorProduct.html#*~(y:smile.cas.Vector):smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Vector): Scalar", "member" : "smile.cas.Vector.*", "link" : "smile\/cas\/ScalarVectorProduct.html#*(y:smile.cas.Vector):smile.cas.Scalar", "kind" : "def"}, {"label" : "\/", "tail" : "(y: Scalar): Vector", "member" : "smile.cas.Vector.\/", "link" : "smile\/cas\/ScalarVectorProduct.html#\/(y:smile.cas.Scalar):smile.cas.Vector", "kind" : "def"}, {"label" : "*", "tail" : "(y: Scalar): Vector", "member" : "smile.cas.Vector.*", "link" : "smile\/cas\/ScalarVectorProduct.html#*(y:smile.cas.Scalar):smile.cas.Vector", "kind" : "def"}, {"label" : "-", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Vector.-", "link" : "smile\/cas\/ScalarVectorProduct.html#-(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "+", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Vector.+", "link" : "smile\/cas\/ScalarVectorProduct.html#+(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): Vector", "member" : "smile.cas.Vector.apply", "link" : "smile\/cas\/ScalarVectorProduct.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.Vector", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.Vector.shape", "link" : "smile\/cas\/ScalarVectorProduct.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.Vector.rank", "link" : "smile\/cas\/ScalarVectorProduct.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/ScalarVectorProduct.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/ScalarVectorProduct.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/ScalarVectorProduct.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/ScalarVectorProduct.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/ScalarVectorProduct.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/ScalarVectorProduct.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/ScalarVectorProduct.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/ScalarVectorProduct.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/ScalarVectorProduct.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/ScalarVectorProduct.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/ScalarVectorProduct.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/ScalarVectorProduct.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/ScalarVectorProduct.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/ScalarVectorProduct.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/ScalarVectorProduct.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/ScalarVectorProduct.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/ScalarVectorProduct.html", "kind" : "case class"}, {"name" : "smile.cas.Sin", "shortDescription" : "sin(x)", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/Sin.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Sin) => Boolean, msg: => Any): Sin", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Sin.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Sin) => Boolean): Sin", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Sin.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Sin", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Sin.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Sin", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Sin.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Sin, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/Sin.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Sin, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/Sin.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "simplify", "tail" : "(): Scalar", "member" : "smile.cas.Sin.simplify", "link" : "smile\/cas\/Sin.html#simplify:smile.cas.Scalar", "kind" : "def"}, {"label" : "d", "tail" : "(dx: VectorVar): Vector", "member" : "smile.cas.Sin.d", "link" : "smile\/cas\/Sin.html#d(dx:smile.cas.VectorVar):smile.cas.Vector", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var): Scalar", "member" : "smile.cas.Sin.d", "link" : "smile\/cas\/Sin.html#d(dx:smile.cas.Var):smile.cas.Scalar", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): Scalar", "member" : "smile.cas.Sin.apply", "link" : "smile\/cas\/Sin.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.Scalar", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.Sin.toString", "link" : "smile\/cas\/Sin.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.Sin#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": Scalar", "member" : "smile.cas.Sin.x", "link" : "smile\/cas\/Sin.html#x:smile.cas.Scalar", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/Sin.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "*", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/Sin.html#*(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/Sin.html#*(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Scalar", "member" : "smile.cas.Scalar.unary_-", "link" : "smile\/cas\/Sin.html#unary_-:smile.cas.Scalar", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): Scalar", "member" : "smile.cas.Scalar.unary_+", "link" : "smile\/cas\/Sin.html#unary_+:smile.cas.Scalar", "kind" : "def"}, {"label" : "**", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.**", "link" : "smile\/cas\/Sin.html#**(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "\/", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.\/", "link" : "smile\/cas\/Sin.html#\/(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "*", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/Sin.html#*(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "-", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.-", "link" : "smile\/cas\/Sin.html#-(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "+", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.+", "link" : "smile\/cas\/Sin.html#+(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var*): Vector", "member" : "smile.cas.Scalar.d", "link" : "smile\/cas\/Sin.html#d(dx:smile.cas.Var*):smile.cas.Vector", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): Scalar", "member" : "smile.cas.Scalar.apply", "link" : "smile\/cas\/Sin.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.Scalar", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.Scalar.shape", "link" : "smile\/cas\/Sin.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.Scalar.rank", "link" : "smile\/cas\/Sin.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/Sin.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/Sin.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/Sin.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/Sin.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/Sin.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/Sin.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/Sin.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Sin.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Sin.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Sin.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/Sin.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/Sin.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/Sin.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/Sin.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/Sin.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/Sin.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/Sin.html", "kind" : "case class"}, {"name" : "smile.cas.Sub", "shortDescription" : "x - y", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/Sub.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Sub) => Boolean, msg: => Any): Sub", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Sub.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Sub) => Boolean): Sub", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Sub.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Sub", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Sub.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Sub", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Sub.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Sub, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/Sub.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Sub, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/Sub.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "simplify", "tail" : "(): Scalar", "member" : "smile.cas.Sub.simplify", "link" : "smile\/cas\/Sub.html#simplify:smile.cas.Scalar", "kind" : "def"}, {"label" : "d", "tail" : "(dx: VectorVar): Vector", "member" : "smile.cas.Sub.d", "link" : "smile\/cas\/Sub.html#d(dx:smile.cas.VectorVar):smile.cas.Vector", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var): Scalar", "member" : "smile.cas.Sub.d", "link" : "smile\/cas\/Sub.html#d(dx:smile.cas.Var):smile.cas.Scalar", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): Scalar", "member" : "smile.cas.Sub.apply", "link" : "smile\/cas\/Sub.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.Scalar", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.Sub.toString", "link" : "smile\/cas\/Sub.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.Sub#<init>", "error" : "unsupported entity"}, {"label" : "y", "tail" : ": Scalar", "member" : "smile.cas.Sub.y", "link" : "smile\/cas\/Sub.html#y:smile.cas.Scalar", "kind" : "val"}, {"label" : "x", "tail" : ": Scalar", "member" : "smile.cas.Sub.x", "link" : "smile\/cas\/Sub.html#x:smile.cas.Scalar", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/Sub.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "*", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/Sub.html#*(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/Sub.html#*(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Scalar", "member" : "smile.cas.Scalar.unary_-", "link" : "smile\/cas\/Sub.html#unary_-:smile.cas.Scalar", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): Scalar", "member" : "smile.cas.Scalar.unary_+", "link" : "smile\/cas\/Sub.html#unary_+:smile.cas.Scalar", "kind" : "def"}, {"label" : "**", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.**", "link" : "smile\/cas\/Sub.html#**(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "\/", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.\/", "link" : "smile\/cas\/Sub.html#\/(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "*", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/Sub.html#*(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "-", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.-", "link" : "smile\/cas\/Sub.html#-(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "+", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.+", "link" : "smile\/cas\/Sub.html#+(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var*): Vector", "member" : "smile.cas.Scalar.d", "link" : "smile\/cas\/Sub.html#d(dx:smile.cas.Var*):smile.cas.Vector", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): Scalar", "member" : "smile.cas.Scalar.apply", "link" : "smile\/cas\/Sub.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.Scalar", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.Scalar.shape", "link" : "smile\/cas\/Sub.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.Scalar.rank", "link" : "smile\/cas\/Sub.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/Sub.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/Sub.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/Sub.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/Sub.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/Sub.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/Sub.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/Sub.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Sub.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Sub.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Sub.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/Sub.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/Sub.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/Sub.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/Sub.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/Sub.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/Sub.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/Sub.html", "kind" : "case class"}, {"name" : "smile.cas.Tan", "shortDescription" : "tan(x)", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/Tan.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Tan) => Boolean, msg: => Any): Tan", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Tan.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Tan) => Boolean): Tan", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Tan.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Tan", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Tan.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Tan", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Tan.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Tan, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/Tan.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Tan, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/Tan.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "simplify", "tail" : "(): Scalar", "member" : "smile.cas.Tan.simplify", "link" : "smile\/cas\/Tan.html#simplify:smile.cas.Scalar", "kind" : "def"}, {"label" : "d", "tail" : "(dx: VectorVar): Vector", "member" : "smile.cas.Tan.d", "link" : "smile\/cas\/Tan.html#d(dx:smile.cas.VectorVar):smile.cas.Vector", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var): Scalar", "member" : "smile.cas.Tan.d", "link" : "smile\/cas\/Tan.html#d(dx:smile.cas.Var):smile.cas.Scalar", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): Scalar", "member" : "smile.cas.Tan.apply", "link" : "smile\/cas\/Tan.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.Scalar", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.Tan.toString", "link" : "smile\/cas\/Tan.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.Tan#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": Scalar", "member" : "smile.cas.Tan.x", "link" : "smile\/cas\/Tan.html#x:smile.cas.Scalar", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/Tan.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "*", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/Tan.html#*(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/Tan.html#*(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Scalar", "member" : "smile.cas.Scalar.unary_-", "link" : "smile\/cas\/Tan.html#unary_-:smile.cas.Scalar", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): Scalar", "member" : "smile.cas.Scalar.unary_+", "link" : "smile\/cas\/Tan.html#unary_+:smile.cas.Scalar", "kind" : "def"}, {"label" : "**", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.**", "link" : "smile\/cas\/Tan.html#**(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "\/", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.\/", "link" : "smile\/cas\/Tan.html#\/(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "*", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/Tan.html#*(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "-", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.-", "link" : "smile\/cas\/Tan.html#-(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "+", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.+", "link" : "smile\/cas\/Tan.html#+(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var*): Vector", "member" : "smile.cas.Scalar.d", "link" : "smile\/cas\/Tan.html#d(dx:smile.cas.Var*):smile.cas.Vector", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): Scalar", "member" : "smile.cas.Scalar.apply", "link" : "smile\/cas\/Tan.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.Scalar", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.Scalar.shape", "link" : "smile\/cas\/Tan.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.Scalar.rank", "link" : "smile\/cas\/Tan.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/Tan.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/Tan.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/Tan.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/Tan.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/Tan.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/Tan.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/Tan.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Tan.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Tan.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Tan.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/Tan.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/Tan.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/Tan.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/Tan.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/Tan.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/Tan.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/Tan.html", "kind" : "case class"}, {"name" : "smile.cas.TangentMatrix", "shortDescription" : "The derivative of a matrix y with respect to a scalar x.", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/TangentMatrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TangentMatrix) => Boolean, msg: => Any): TangentMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/TangentMatrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TangentMatrix) => Boolean): TangentMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/TangentMatrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): TangentMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/TangentMatrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): TangentMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/TangentMatrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (TangentMatrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/TangentMatrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (TangentMatrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/TangentMatrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): Matrix", "member" : "smile.cas.TangentMatrix.apply", "link" : "smile\/cas\/TangentMatrix.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.Matrix", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var): Matrix", "member" : "smile.cas.TangentMatrix.d", "link" : "smile\/cas\/TangentMatrix.html#d(dx:smile.cas.Var):smile.cas.Matrix", "kind" : "def"}, {"label" : "size", "tail" : "(): (IntScalar, IntScalar)", "member" : "smile.cas.TangentMatrix.size", "link" : "smile\/cas\/TangentMatrix.html#size:(smile.cas.IntScalar,smile.cas.IntScalar)", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.TangentMatrix.toString", "link" : "smile\/cas\/TangentMatrix.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.TangentMatrix#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": Var", "member" : "smile.cas.TangentMatrix.x", "link" : "smile\/cas\/TangentMatrix.html#x:smile.cas.Var", "kind" : "val"}, {"label" : "y", "tail" : ": MatrixVar", "member" : "smile.cas.TangentMatrix.y", "link" : "smile\/cas\/TangentMatrix.html#y:smile.cas.MatrixVar", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/TangentMatrix.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "inv", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.inv", "link" : "smile\/cas\/TangentMatrix.html#inv:smile.cas.Matrix", "kind" : "def"}, {"label" : "t", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.t", "link" : "smile\/cas\/TangentMatrix.html#t:smile.cas.Matrix", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.unary_-", "link" : "smile\/cas\/TangentMatrix.html#unary_-:smile.cas.Matrix", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.unary_+", "link" : "smile\/cas\/TangentMatrix.html#unary_+:smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Matrix.*", "link" : "smile\/cas\/TangentMatrix.html#*(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Matrix.*", "link" : "smile\/cas\/TangentMatrix.html#*(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "*", "tail" : "(y: Scalar): Matrix", "member" : "smile.cas.Matrix.*", "link" : "smile\/cas\/TangentMatrix.html#*(y:smile.cas.Scalar):smile.cas.Matrix", "kind" : "def"}, {"label" : "-", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Matrix.-", "link" : "smile\/cas\/TangentMatrix.html#-(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "+", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Matrix.+", "link" : "smile\/cas\/TangentMatrix.html#+(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "simplify", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.simplify", "link" : "smile\/cas\/TangentMatrix.html#simplify:smile.cas.Matrix", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): Matrix", "member" : "smile.cas.Matrix.apply", "link" : "smile\/cas\/TangentMatrix.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.Matrix", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.Matrix.shape", "link" : "smile\/cas\/TangentMatrix.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.Matrix.rank", "link" : "smile\/cas\/TangentMatrix.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/TangentMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/TangentMatrix.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/TangentMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/TangentMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/TangentMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/TangentMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/TangentMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/TangentMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/TangentMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/TangentMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/TangentMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/TangentMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/TangentMatrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/TangentMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/TangentMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/TangentMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/TangentMatrix.html", "kind" : "case class"}, {"name" : "smile.cas.TangentVector", "shortDescription" : "The derivative of a vector y with respect to a scalar x.", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/TangentVector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TangentVector) => Boolean, msg: => Any): TangentVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/TangentVector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TangentVector) => Boolean): TangentVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/TangentVector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): TangentVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/TangentVector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): TangentVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/TangentVector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (TangentVector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/TangentVector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (TangentVector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/TangentVector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): Vector", "member" : "smile.cas.TangentVector.apply", "link" : "smile\/cas\/TangentVector.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.Vector", "kind" : "def"}, {"label" : "d", "tail" : "(dx: VectorVar): Matrix", "member" : "smile.cas.TangentVector.d", "link" : "smile\/cas\/TangentVector.html#d(dx:smile.cas.VectorVar):smile.cas.Matrix", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var): Vector", "member" : "smile.cas.TangentVector.d", "link" : "smile\/cas\/TangentVector.html#d(dx:smile.cas.Var):smile.cas.Vector", "kind" : "def"}, {"label" : "size", "tail" : "(): IntScalar", "member" : "smile.cas.TangentVector.size", "link" : "smile\/cas\/TangentVector.html#size:smile.cas.IntScalar", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.TangentVector.toString", "link" : "smile\/cas\/TangentVector.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.TangentVector#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": Var", "member" : "smile.cas.TangentVector.x", "link" : "smile\/cas\/TangentVector.html#x:smile.cas.Var", "kind" : "val"}, {"label" : "y", "tail" : ": VectorVar", "member" : "smile.cas.TangentVector.y", "link" : "smile\/cas\/TangentVector.html#y:smile.cas.VectorVar", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/TangentVector.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Vector", "member" : "smile.cas.Vector.unary_-", "link" : "smile\/cas\/TangentVector.html#unary_-:smile.cas.Vector", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): Vector", "member" : "smile.cas.Vector.unary_+", "link" : "smile\/cas\/TangentVector.html#unary_+:smile.cas.Vector", "kind" : "def"}, {"label" : "*~", "tail" : "(y: Vector): Matrix", "member" : "smile.cas.Vector.*~", "link" : "smile\/cas\/TangentVector.html#*~(y:smile.cas.Vector):smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Vector): Scalar", "member" : "smile.cas.Vector.*", "link" : "smile\/cas\/TangentVector.html#*(y:smile.cas.Vector):smile.cas.Scalar", "kind" : "def"}, {"label" : "\/", "tail" : "(y: Scalar): Vector", "member" : "smile.cas.Vector.\/", "link" : "smile\/cas\/TangentVector.html#\/(y:smile.cas.Scalar):smile.cas.Vector", "kind" : "def"}, {"label" : "*", "tail" : "(y: Scalar): Vector", "member" : "smile.cas.Vector.*", "link" : "smile\/cas\/TangentVector.html#*(y:smile.cas.Scalar):smile.cas.Vector", "kind" : "def"}, {"label" : "-", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Vector.-", "link" : "smile\/cas\/TangentVector.html#-(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "+", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Vector.+", "link" : "smile\/cas\/TangentVector.html#+(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "simplify", "tail" : "(): Vector", "member" : "smile.cas.Vector.simplify", "link" : "smile\/cas\/TangentVector.html#simplify:smile.cas.Vector", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): Vector", "member" : "smile.cas.Vector.apply", "link" : "smile\/cas\/TangentVector.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.Vector", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.Vector.shape", "link" : "smile\/cas\/TangentVector.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.Vector.rank", "link" : "smile\/cas\/TangentVector.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/TangentVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/TangentVector.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/TangentVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/TangentVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/TangentVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/TangentVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/TangentVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/TangentVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/TangentVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/TangentVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/TangentVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/TangentVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/TangentVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/TangentVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/TangentVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/TangentVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/TangentVector.html", "kind" : "case class"}, {"name" : "smile.cas.Tensor", "trait" : "smile\/cas\/Tensor.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "smile\/cas\/Tensor.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/Tensor.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Tensor) => Boolean, msg: => Any): Tensor", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Tensor.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Tensor) => Boolean): Tensor", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Tensor.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Tensor", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Tensor.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Tensor", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Tensor.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Tensor, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/Tensor.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Tensor, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/Tensor.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/Tensor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/Tensor.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/Tensor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/Tensor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/Tensor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/Tensor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/Tensor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Tensor.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Tensor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Tensor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/Tensor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/Tensor.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/cas\/Tensor.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/Tensor.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/cas\/Tensor.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/cas\/Tensor.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/Tensor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/Tensor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/Tensor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.Tensor.shape", "link" : "smile\/cas\/Tensor.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "abstract def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.Tensor.rank", "link" : "smile\/cas\/Tensor.html#rank:Option[Int]", "kind" : "abstract def"}], "shortDescription" : "A tensor is an algebraic object that describes a (multilinear)relationship between sets of algebraic objects related to a vectorspace."}, {"name" : "smile.cas.Val", "shortDescription" : "Scalar value.", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/Val.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Val) => Boolean, msg: => Any): Val", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Val.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Val) => Boolean): Val", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Val.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Val", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Val.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Val", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Val.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Val, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/Val.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Val, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/Val.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "d", "tail" : "(dx: VectorVar): Vector", "member" : "smile.cas.Val.d", "link" : "smile\/cas\/Val.html#d(dx:smile.cas.VectorVar):smile.cas.Vector", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var): Scalar", "member" : "smile.cas.Val.d", "link" : "smile\/cas\/Val.html#d(dx:smile.cas.Var):smile.cas.Scalar", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): Val", "member" : "smile.cas.Val.apply", "link" : "smile\/cas\/Val.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.Val", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.Val.toString", "link" : "smile\/cas\/Val.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.Val#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": Double", "member" : "smile.cas.Val.x", "link" : "smile\/cas\/Val.html#x:Double", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/Val.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "*", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/Val.html#*(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/Val.html#*(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Scalar", "member" : "smile.cas.Scalar.unary_-", "link" : "smile\/cas\/Val.html#unary_-:smile.cas.Scalar", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): Scalar", "member" : "smile.cas.Scalar.unary_+", "link" : "smile\/cas\/Val.html#unary_+:smile.cas.Scalar", "kind" : "def"}, {"label" : "**", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.**", "link" : "smile\/cas\/Val.html#**(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "\/", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.\/", "link" : "smile\/cas\/Val.html#\/(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "*", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/Val.html#*(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "-", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.-", "link" : "smile\/cas\/Val.html#-(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "+", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.+", "link" : "smile\/cas\/Val.html#+(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var*): Vector", "member" : "smile.cas.Scalar.d", "link" : "smile\/cas\/Val.html#d(dx:smile.cas.Var*):smile.cas.Vector", "kind" : "def"}, {"label" : "simplify", "tail" : "(): Scalar", "member" : "smile.cas.Scalar.simplify", "link" : "smile\/cas\/Val.html#simplify:smile.cas.Scalar", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): Scalar", "member" : "smile.cas.Scalar.apply", "link" : "smile\/cas\/Val.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.Scalar", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.Scalar.shape", "link" : "smile\/cas\/Val.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.Scalar.rank", "link" : "smile\/cas\/Val.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/Val.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/Val.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/Val.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/Val.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/Val.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/Val.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/Val.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Val.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Val.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Val.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/Val.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/Val.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/Val.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/Val.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/Val.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/Val.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/Val.html", "kind" : "case class"}, {"name" : "smile.cas.Var", "shortDescription" : "Scalar variable", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/Var.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Var) => Boolean, msg: => Any): Var", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Var.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Var) => Boolean): Var", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Var.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Var", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Var.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Var", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Var.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Var, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/Var.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Var, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/Var.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): Scalar", "member" : "smile.cas.Var.apply", "link" : "smile\/cas\/Var.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.Scalar", "kind" : "def"}, {"label" : "d", "tail" : "(dx: VectorVar): Vector", "member" : "smile.cas.Var.d", "link" : "smile\/cas\/Var.html#d(dx:smile.cas.VectorVar):smile.cas.Vector", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var): Scalar", "member" : "smile.cas.Var.d", "link" : "smile\/cas\/Var.html#d(dx:smile.cas.Var):smile.cas.Scalar", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.Var.toString", "link" : "smile\/cas\/Var.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.Var#<init>", "error" : "unsupported entity"}, {"label" : "symbol", "tail" : ": String", "member" : "smile.cas.Var.symbol", "link" : "smile\/cas\/Var.html#symbol:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/Var.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "*", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/Var.html#*(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/Var.html#*(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Scalar", "member" : "smile.cas.Scalar.unary_-", "link" : "smile\/cas\/Var.html#unary_-:smile.cas.Scalar", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): Scalar", "member" : "smile.cas.Scalar.unary_+", "link" : "smile\/cas\/Var.html#unary_+:smile.cas.Scalar", "kind" : "def"}, {"label" : "**", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.**", "link" : "smile\/cas\/Var.html#**(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "\/", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.\/", "link" : "smile\/cas\/Var.html#\/(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "*", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.*", "link" : "smile\/cas\/Var.html#*(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "-", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.-", "link" : "smile\/cas\/Var.html#-(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "+", "tail" : "(y: Scalar): Scalar", "member" : "smile.cas.Scalar.+", "link" : "smile\/cas\/Var.html#+(y:smile.cas.Scalar):smile.cas.Scalar", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var*): Vector", "member" : "smile.cas.Scalar.d", "link" : "smile\/cas\/Var.html#d(dx:smile.cas.Var*):smile.cas.Vector", "kind" : "def"}, {"label" : "simplify", "tail" : "(): Scalar", "member" : "smile.cas.Scalar.simplify", "link" : "smile\/cas\/Var.html#simplify:smile.cas.Scalar", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): Scalar", "member" : "smile.cas.Scalar.apply", "link" : "smile\/cas\/Var.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.Scalar", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.Scalar.shape", "link" : "smile\/cas\/Var.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.Scalar.rank", "link" : "smile\/cas\/Var.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/Var.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/Var.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/Var.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/Var.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/Var.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/Var.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/Var.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Var.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Var.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Var.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/Var.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/Var.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/Var.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/Var.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/Var.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/Var.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/Var.html", "kind" : "case class"}, {"name" : "smile.cas.Vars", "shortDescription" : "Vector variable", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/Vars.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Vars) => Boolean, msg: => Any): Vars", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Vars.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Vars) => Boolean): Vars", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Vars.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Vars", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Vars.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Vars", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Vars.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Vars, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/Vars.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Vars, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/Vars.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "simplify", "tail" : "(): Vector", "member" : "smile.cas.Vars.simplify", "link" : "smile\/cas\/Vars.html#simplify:smile.cas.Vector", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): Vector", "member" : "smile.cas.Vars.apply", "link" : "smile\/cas\/Vars.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.Vector", "kind" : "def"}, {"label" : "d", "tail" : "(dx: VectorVar): Matrix", "member" : "smile.cas.Vars.d", "link" : "smile\/cas\/Vars.html#d(dx:smile.cas.VectorVar):smile.cas.Matrix", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var): Vector", "member" : "smile.cas.Vars.d", "link" : "smile\/cas\/Vars.html#d(dx:smile.cas.Var):smile.cas.Vector", "kind" : "def"}, {"label" : "size", "tail" : "(): IntScalar", "member" : "smile.cas.Vars.size", "link" : "smile\/cas\/Vars.html#size:smile.cas.IntScalar", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.Vars.toString", "link" : "smile\/cas\/Vars.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.Vars#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": Scalar*", "member" : "smile.cas.Vars.x", "link" : "smile\/cas\/Vars.html#x:smile.cas.Scalar*", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/Vars.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Vector", "member" : "smile.cas.Vector.unary_-", "link" : "smile\/cas\/Vars.html#unary_-:smile.cas.Vector", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): Vector", "member" : "smile.cas.Vector.unary_+", "link" : "smile\/cas\/Vars.html#unary_+:smile.cas.Vector", "kind" : "def"}, {"label" : "*~", "tail" : "(y: Vector): Matrix", "member" : "smile.cas.Vector.*~", "link" : "smile\/cas\/Vars.html#*~(y:smile.cas.Vector):smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Vector): Scalar", "member" : "smile.cas.Vector.*", "link" : "smile\/cas\/Vars.html#*(y:smile.cas.Vector):smile.cas.Scalar", "kind" : "def"}, {"label" : "\/", "tail" : "(y: Scalar): Vector", "member" : "smile.cas.Vector.\/", "link" : "smile\/cas\/Vars.html#\/(y:smile.cas.Scalar):smile.cas.Vector", "kind" : "def"}, {"label" : "*", "tail" : "(y: Scalar): Vector", "member" : "smile.cas.Vector.*", "link" : "smile\/cas\/Vars.html#*(y:smile.cas.Scalar):smile.cas.Vector", "kind" : "def"}, {"label" : "-", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Vector.-", "link" : "smile\/cas\/Vars.html#-(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "+", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Vector.+", "link" : "smile\/cas\/Vars.html#+(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): Vector", "member" : "smile.cas.Vector.apply", "link" : "smile\/cas\/Vars.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.Vector", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.Vector.shape", "link" : "smile\/cas\/Vars.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.Vector.rank", "link" : "smile\/cas\/Vars.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/Vars.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/Vars.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/Vars.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/Vars.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/Vars.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/Vars.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/Vars.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Vars.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Vars.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Vars.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/Vars.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/Vars.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/Vars.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/Vars.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/Vars.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/Vars.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/Vars.html", "kind" : "case class"}, {"name" : "smile.cas.Vector", "trait" : "smile\/cas\/Vector.html", "kind" : "trait", "members_trait" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/Vector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Vector) => Boolean, msg: => Any): Vector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Vector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Vector) => Boolean): Vector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Vector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Vector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Vector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Vector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/Vector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Vector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/Vector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Vector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/Vector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Vector", "member" : "smile.cas.Vector.unary_-", "link" : "smile\/cas\/Vector.html#unary_-:smile.cas.Vector", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): Vector", "member" : "smile.cas.Vector.unary_+", "link" : "smile\/cas\/Vector.html#unary_+:smile.cas.Vector", "kind" : "def"}, {"label" : "*~", "tail" : "(y: Vector): Matrix", "member" : "smile.cas.Vector.*~", "link" : "smile\/cas\/Vector.html#*~(y:smile.cas.Vector):smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Vector): Scalar", "member" : "smile.cas.Vector.*", "link" : "smile\/cas\/Vector.html#*(y:smile.cas.Vector):smile.cas.Scalar", "kind" : "def"}, {"label" : "\/", "tail" : "(y: Scalar): Vector", "member" : "smile.cas.Vector.\/", "link" : "smile\/cas\/Vector.html#\/(y:smile.cas.Scalar):smile.cas.Vector", "kind" : "def"}, {"label" : "*", "tail" : "(y: Scalar): Vector", "member" : "smile.cas.Vector.*", "link" : "smile\/cas\/Vector.html#*(y:smile.cas.Scalar):smile.cas.Vector", "kind" : "def"}, {"label" : "-", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Vector.-", "link" : "smile\/cas\/Vector.html#-(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "+", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Vector.+", "link" : "smile\/cas\/Vector.html#+(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "simplify", "tail" : "(): Vector", "member" : "smile.cas.Vector.simplify", "link" : "smile\/cas\/Vector.html#simplify:smile.cas.Vector", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): Vector", "member" : "smile.cas.Vector.apply", "link" : "smile\/cas\/Vector.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.Vector", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.Vector.shape", "link" : "smile\/cas\/Vector.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.Vector.rank", "link" : "smile\/cas\/Vector.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/Vector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/Vector.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/Vector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/Vector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/Vector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/Vector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/Vector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Vector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Vector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/Vector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/Vector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/Vector.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/cas\/Vector.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/Vector.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/cas\/Vector.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/cas\/Vector.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/Vector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/Vector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/Vector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "d", "tail" : "(dx: VectorVar): Matrix", "member" : "smile.cas.Vector.d", "link" : "smile\/cas\/Vector.html#d(dx:smile.cas.VectorVar):smile.cas.Matrix", "kind" : "abstract def"}, {"label" : "d", "tail" : "(dx: Var): Vector", "member" : "smile.cas.Vector.d", "link" : "smile\/cas\/Vector.html#d(dx:smile.cas.Var):smile.cas.Vector", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): Vector", "member" : "smile.cas.Vector.apply", "link" : "smile\/cas\/Vector.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.Vector", "kind" : "abstract def"}, {"label" : "size", "tail" : "(): IntScalar", "member" : "smile.cas.Vector.size", "link" : "smile\/cas\/Vector.html#size:smile.cas.IntScalar", "kind" : "abstract def"}], "shortDescription" : "Vector: rank-1 tensor."}, {"name" : "smile.cas.VectorVal", "shortDescription" : "Vector value.", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/VectorVal.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (VectorVal) => Boolean, msg: => Any): VectorVal", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/VectorVal.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (VectorVal) => Boolean): VectorVal", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/VectorVal.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): VectorVal", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/VectorVal.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): VectorVal", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/VectorVal.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (VectorVal, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/VectorVal.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (VectorVal, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/VectorVal.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "simplify", "tail" : "(): Vector", "member" : "smile.cas.VectorVal.simplify", "link" : "smile\/cas\/VectorVal.html#simplify:smile.cas.Vector", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): VectorVal", "member" : "smile.cas.VectorVal.apply", "link" : "smile\/cas\/VectorVal.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.VectorVal", "kind" : "def"}, {"label" : "d", "tail" : "(dx: VectorVar): Matrix", "member" : "smile.cas.VectorVal.d", "link" : "smile\/cas\/VectorVal.html#d(dx:smile.cas.VectorVar):smile.cas.Matrix", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var): Vector", "member" : "smile.cas.VectorVal.d", "link" : "smile\/cas\/VectorVal.html#d(dx:smile.cas.Var):smile.cas.Vector", "kind" : "def"}, {"label" : "size", "tail" : "(): IntScalar", "member" : "smile.cas.VectorVal.size", "link" : "smile\/cas\/VectorVal.html#size:smile.cas.IntScalar", "kind" : "def"}, {"label" : "equals", "tail" : "(that: Any): Boolean", "member" : "smile.cas.VectorVal.equals", "link" : "smile\/cas\/VectorVal.html#equals(that:Any):Boolean", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.VectorVal.toString", "link" : "smile\/cas\/VectorVal.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.VectorVal#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": Array[Double]", "member" : "smile.cas.VectorVal.x", "link" : "smile\/cas\/VectorVal.html#x:Array[Double]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/VectorVal.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Vector", "member" : "smile.cas.Vector.unary_-", "link" : "smile\/cas\/VectorVal.html#unary_-:smile.cas.Vector", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): Vector", "member" : "smile.cas.Vector.unary_+", "link" : "smile\/cas\/VectorVal.html#unary_+:smile.cas.Vector", "kind" : "def"}, {"label" : "*~", "tail" : "(y: Vector): Matrix", "member" : "smile.cas.Vector.*~", "link" : "smile\/cas\/VectorVal.html#*~(y:smile.cas.Vector):smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Vector): Scalar", "member" : "smile.cas.Vector.*", "link" : "smile\/cas\/VectorVal.html#*(y:smile.cas.Vector):smile.cas.Scalar", "kind" : "def"}, {"label" : "\/", "tail" : "(y: Scalar): Vector", "member" : "smile.cas.Vector.\/", "link" : "smile\/cas\/VectorVal.html#\/(y:smile.cas.Scalar):smile.cas.Vector", "kind" : "def"}, {"label" : "*", "tail" : "(y: Scalar): Vector", "member" : "smile.cas.Vector.*", "link" : "smile\/cas\/VectorVal.html#*(y:smile.cas.Scalar):smile.cas.Vector", "kind" : "def"}, {"label" : "-", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Vector.-", "link" : "smile\/cas\/VectorVal.html#-(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "+", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Vector.+", "link" : "smile\/cas\/VectorVal.html#+(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): Vector", "member" : "smile.cas.Vector.apply", "link" : "smile\/cas\/VectorVal.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.Vector", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.Vector.shape", "link" : "smile\/cas\/VectorVal.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.Vector.rank", "link" : "smile\/cas\/VectorVal.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/VectorVal.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/VectorVal.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/VectorVal.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/VectorVal.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/VectorVal.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/VectorVal.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/VectorVal.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/VectorVal.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/VectorVal.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/VectorVal.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/VectorVal.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/VectorVal.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/VectorVal.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/VectorVal.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/VectorVal.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/VectorVal.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/VectorVal.html", "kind" : "case class"}, {"name" : "smile.cas.VectorVar", "shortDescription" : "Abstract vector variable", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/VectorVar.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (VectorVar) => Boolean, msg: => Any): VectorVar", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/VectorVar.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (VectorVar) => Boolean): VectorVar", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/VectorVar.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): VectorVar", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/VectorVar.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): VectorVar", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/VectorVar.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (VectorVar, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/VectorVar.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (VectorVar, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/VectorVar.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): Vector", "member" : "smile.cas.VectorVar.apply", "link" : "smile\/cas\/VectorVar.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.Vector", "kind" : "def"}, {"label" : "d", "tail" : "(dx: VectorVar): Matrix", "member" : "smile.cas.VectorVar.d", "link" : "smile\/cas\/VectorVar.html#d(dx:smile.cas.VectorVar):smile.cas.Matrix", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var): Vector", "member" : "smile.cas.VectorVar.d", "link" : "smile\/cas\/VectorVar.html#d(dx:smile.cas.Var):smile.cas.Vector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.VectorVar.toString", "link" : "smile\/cas\/VectorVar.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.VectorVar#<init>", "error" : "unsupported entity"}, {"label" : "size", "tail" : ": IntScalar", "member" : "smile.cas.VectorVar.size", "link" : "smile\/cas\/VectorVar.html#size:smile.cas.IntScalar", "kind" : "val"}, {"label" : "symbol", "tail" : ": String", "member" : "smile.cas.VectorVar.symbol", "link" : "smile\/cas\/VectorVar.html#symbol:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/VectorVar.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Vector", "member" : "smile.cas.Vector.unary_-", "link" : "smile\/cas\/VectorVar.html#unary_-:smile.cas.Vector", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): Vector", "member" : "smile.cas.Vector.unary_+", "link" : "smile\/cas\/VectorVar.html#unary_+:smile.cas.Vector", "kind" : "def"}, {"label" : "*~", "tail" : "(y: Vector): Matrix", "member" : "smile.cas.Vector.*~", "link" : "smile\/cas\/VectorVar.html#*~(y:smile.cas.Vector):smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Vector): Scalar", "member" : "smile.cas.Vector.*", "link" : "smile\/cas\/VectorVar.html#*(y:smile.cas.Vector):smile.cas.Scalar", "kind" : "def"}, {"label" : "\/", "tail" : "(y: Scalar): Vector", "member" : "smile.cas.Vector.\/", "link" : "smile\/cas\/VectorVar.html#\/(y:smile.cas.Scalar):smile.cas.Vector", "kind" : "def"}, {"label" : "*", "tail" : "(y: Scalar): Vector", "member" : "smile.cas.Vector.*", "link" : "smile\/cas\/VectorVar.html#*(y:smile.cas.Scalar):smile.cas.Vector", "kind" : "def"}, {"label" : "-", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Vector.-", "link" : "smile\/cas\/VectorVar.html#-(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "+", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Vector.+", "link" : "smile\/cas\/VectorVar.html#+(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "simplify", "tail" : "(): Vector", "member" : "smile.cas.Vector.simplify", "link" : "smile\/cas\/VectorVar.html#simplify:smile.cas.Vector", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): Vector", "member" : "smile.cas.Vector.apply", "link" : "smile\/cas\/VectorVar.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.Vector", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.Vector.shape", "link" : "smile\/cas\/VectorVar.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.Vector.rank", "link" : "smile\/cas\/VectorVar.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/VectorVar.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/VectorVar.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/VectorVar.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/VectorVar.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/VectorVar.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/VectorVar.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/VectorVar.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/VectorVar.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/VectorVar.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/VectorVar.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/VectorVar.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/VectorVar.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/VectorVar.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/VectorVar.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/VectorVar.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/VectorVar.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/VectorVar.html", "kind" : "case class"}, {"name" : "smile.cas.ZeroMatrix", "shortDescription" : "Matrix of all 0's", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/ZeroMatrix.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ZeroMatrix) => Boolean, msg: => Any): ZeroMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/ZeroMatrix.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ZeroMatrix) => Boolean): ZeroMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/ZeroMatrix.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): ZeroMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/ZeroMatrix.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ZeroMatrix", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/ZeroMatrix.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ZeroMatrix, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/ZeroMatrix.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ZeroMatrix, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/ZeroMatrix.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): Matrix", "member" : "smile.cas.ZeroMatrix.apply", "link" : "smile\/cas\/ZeroMatrix.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.Matrix", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var): Matrix", "member" : "smile.cas.ZeroMatrix.d", "link" : "smile\/cas\/ZeroMatrix.html#d(dx:smile.cas.Var):smile.cas.Matrix", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.ZeroMatrix.toString", "link" : "smile\/cas\/ZeroMatrix.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.ZeroMatrix#<init>", "error" : "unsupported entity"}, {"label" : "size", "tail" : ": (IntScalar, IntScalar)", "member" : "smile.cas.ZeroMatrix.size", "link" : "smile\/cas\/ZeroMatrix.html#size:(smile.cas.IntScalar,smile.cas.IntScalar)", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/ZeroMatrix.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "inv", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.inv", "link" : "smile\/cas\/ZeroMatrix.html#inv:smile.cas.Matrix", "kind" : "def"}, {"label" : "t", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.t", "link" : "smile\/cas\/ZeroMatrix.html#t:smile.cas.Matrix", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.unary_-", "link" : "smile\/cas\/ZeroMatrix.html#unary_-:smile.cas.Matrix", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.unary_+", "link" : "smile\/cas\/ZeroMatrix.html#unary_+:smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Matrix.*", "link" : "smile\/cas\/ZeroMatrix.html#*(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Matrix.*", "link" : "smile\/cas\/ZeroMatrix.html#*(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "*", "tail" : "(y: Scalar): Matrix", "member" : "smile.cas.Matrix.*", "link" : "smile\/cas\/ZeroMatrix.html#*(y:smile.cas.Scalar):smile.cas.Matrix", "kind" : "def"}, {"label" : "-", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Matrix.-", "link" : "smile\/cas\/ZeroMatrix.html#-(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "+", "tail" : "(y: Matrix): Matrix", "member" : "smile.cas.Matrix.+", "link" : "smile\/cas\/ZeroMatrix.html#+(y:smile.cas.Matrix):smile.cas.Matrix", "kind" : "def"}, {"label" : "simplify", "tail" : "(): Matrix", "member" : "smile.cas.Matrix.simplify", "link" : "smile\/cas\/ZeroMatrix.html#simplify:smile.cas.Matrix", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): Matrix", "member" : "smile.cas.Matrix.apply", "link" : "smile\/cas\/ZeroMatrix.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.Matrix", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.Matrix.shape", "link" : "smile\/cas\/ZeroMatrix.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.Matrix.rank", "link" : "smile\/cas\/ZeroMatrix.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/ZeroMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/ZeroMatrix.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/ZeroMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/ZeroMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/ZeroMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/ZeroMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/ZeroMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/ZeroMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/ZeroMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/ZeroMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/ZeroMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/ZeroMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/ZeroMatrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/ZeroMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/ZeroMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/ZeroMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/ZeroMatrix.html", "kind" : "case class"}, {"name" : "smile.cas.ZeroVector", "shortDescription" : "Vector of all 0's", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/cas\/ZeroVector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ZeroVector) => Boolean, msg: => Any): ZeroVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/ZeroVector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ZeroVector) => Boolean): ZeroVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/ZeroVector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): ZeroVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/ZeroVector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ZeroVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/cas\/ZeroVector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ZeroVector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/cas\/ZeroVector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ZeroVector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/cas\/ZeroVector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "apply", "tail" : "(env: Map[String, Tensor]): Vector", "member" : "smile.cas.ZeroVector.apply", "link" : "smile\/cas\/ZeroVector.html#apply(env:Map[String,smile.cas.Tensor]):smile.cas.Vector", "kind" : "def"}, {"label" : "d", "tail" : "(dx: VectorVar): Matrix", "member" : "smile.cas.ZeroVector.d", "link" : "smile\/cas\/ZeroVector.html#d(dx:smile.cas.VectorVar):smile.cas.Matrix", "kind" : "def"}, {"label" : "d", "tail" : "(dx: Var): Vector", "member" : "smile.cas.ZeroVector.d", "link" : "smile\/cas\/ZeroVector.html#d(dx:smile.cas.Var):smile.cas.Vector", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.cas.ZeroVector.toString", "link" : "smile\/cas\/ZeroVector.html#toString():String", "kind" : "def"}, {"member" : "smile.cas.ZeroVector#<init>", "error" : "unsupported entity"}, {"label" : "size", "tail" : ": IntScalar", "member" : "smile.cas.ZeroVector.size", "link" : "smile\/cas\/ZeroVector.html#size:smile.cas.IntScalar", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/cas\/ZeroVector.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Vector", "member" : "smile.cas.Vector.unary_-", "link" : "smile\/cas\/ZeroVector.html#unary_-:smile.cas.Vector", "kind" : "def"}, {"label" : "unary_+", "tail" : "(): Vector", "member" : "smile.cas.Vector.unary_+", "link" : "smile\/cas\/ZeroVector.html#unary_+:smile.cas.Vector", "kind" : "def"}, {"label" : "*~", "tail" : "(y: Vector): Matrix", "member" : "smile.cas.Vector.*~", "link" : "smile\/cas\/ZeroVector.html#*~(y:smile.cas.Vector):smile.cas.Matrix", "kind" : "def"}, {"label" : "*", "tail" : "(y: Vector): Scalar", "member" : "smile.cas.Vector.*", "link" : "smile\/cas\/ZeroVector.html#*(y:smile.cas.Vector):smile.cas.Scalar", "kind" : "def"}, {"label" : "\/", "tail" : "(y: Scalar): Vector", "member" : "smile.cas.Vector.\/", "link" : "smile\/cas\/ZeroVector.html#\/(y:smile.cas.Scalar):smile.cas.Vector", "kind" : "def"}, {"label" : "*", "tail" : "(y: Scalar): Vector", "member" : "smile.cas.Vector.*", "link" : "smile\/cas\/ZeroVector.html#*(y:smile.cas.Scalar):smile.cas.Vector", "kind" : "def"}, {"label" : "-", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Vector.-", "link" : "smile\/cas\/ZeroVector.html#-(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "+", "tail" : "(y: Vector): Vector", "member" : "smile.cas.Vector.+", "link" : "smile\/cas\/ZeroVector.html#+(y:smile.cas.Vector):smile.cas.Vector", "kind" : "def"}, {"label" : "simplify", "tail" : "(): Vector", "member" : "smile.cas.Vector.simplify", "link" : "smile\/cas\/ZeroVector.html#simplify:smile.cas.Vector", "kind" : "def"}, {"label" : "apply", "tail" : "(env: (String, Tensor)*): Vector", "member" : "smile.cas.Vector.apply", "link" : "smile\/cas\/ZeroVector.html#apply(env:(String,smile.cas.Tensor)*):smile.cas.Vector", "kind" : "def"}, {"label" : "shape", "tail" : "(): Option[Array[IntScalar]]", "member" : "smile.cas.Vector.shape", "link" : "smile\/cas\/ZeroVector.html#shape:Option[Array[smile.cas.IntScalar]]", "kind" : "def"}, {"label" : "rank", "tail" : "(): Option[Int]", "member" : "smile.cas.Vector.rank", "link" : "smile\/cas\/ZeroVector.html#rank:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/cas\/ZeroVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/cas\/ZeroVector.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/cas\/ZeroVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/cas\/ZeroVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/cas\/ZeroVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/cas\/ZeroVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/cas\/ZeroVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/ZeroVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/ZeroVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/cas\/ZeroVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/cas\/ZeroVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/cas\/ZeroVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/cas\/ZeroVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/cas\/ZeroVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/cas\/ZeroVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/cas\/ZeroVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/cas\/ZeroVector.html", "kind" : "case class"}], "smile.util" : [{"name" : "smile.util.time", "shortDescription" : "Measure running time of a function\/block", "object" : "smile\/util\/package$$time$.html", "members_object" : [{"label" : "apply", "tail" : "(message: String)(f: => A): A", "member" : "smile.util.time.apply", "link" : "smile\/util\/package$$time$.html#apply[A](message:String)(f:=>A):A", "kind" : "def"}, {"label" : "off", "tail" : "(): Unit", "member" : "smile.util.time.off", "link" : "smile\/util\/package$$time$.html#off:Unit", "kind" : "def"}, {"label" : "on", "tail" : "(): Unit", "member" : "smile.util.time.on", "link" : "smile\/util\/package$$time$.html#on:Unit", "kind" : "def"}, {"label" : "echo", "tail" : ": Boolean", "member" : "smile.util.time.echo", "link" : "smile\/util\/package$$time$.html#echo:Boolean", "kind" : "var"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/util\/package$$time$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/util\/package$$time$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/util\/package$$time$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/util\/package$$time$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/util\/package$$time$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/util\/package$$time$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/util\/package$$time$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/util\/package$$time$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/util\/package$$time$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/util\/package$$time$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/util\/package$$time$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/util\/package$$time$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/util\/package$$time$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/util\/package$$time$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/util\/package$$time$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/util\/package$$time$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/util\/package$$time$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/util\/package$$time$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/util\/package$$time$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "smile.regression" : [{"name" : "smile.regression.gpr", "shortDescription" : "Gaussian Process for Regression.", "object" : "smile\/regression\/package$$gpr$.html", "members_object" : [{"label" : "nystrom", "tail" : "(x: Array[T], y: Array[Double], t: Array[T], kernel: MercerKernel[T], lambda: Double): KernelMachine[T]", "member" : "smile.regression.gpr.nystrom", "link" : "smile\/regression\/package$$gpr$.html#nystrom[T<:AnyRef](x:Array[T],y:Array[Double],t:Array[T],kernel:smile.math.kernel.MercerKernel[T],lambda:Double):smile.regression.KernelMachine[T]", "kind" : "def"}, {"label" : "approx", "tail" : "(x: Array[T], y: Array[Double], t: Array[T], kernel: MercerKernel[T], lambda: Double): KernelMachine[T]", "member" : "smile.regression.gpr.approx", "link" : "smile\/regression\/package$$gpr$.html#approx[T<:AnyRef](x:Array[T],y:Array[Double],t:Array[T],kernel:smile.math.kernel.MercerKernel[T],lambda:Double):smile.regression.KernelMachine[T]", "kind" : "def"}, {"label" : "apply", "tail" : "(x: Array[T], y: Array[Double], kernel: MercerKernel[T], lambda: Double): KernelMachine[T]", "member" : "smile.regression.gpr.apply", "link" : "smile\/regression\/package$$gpr$.html#apply[T<:AnyRef](x:Array[T],y:Array[Double],kernel:smile.math.kernel.MercerKernel[T],lambda:Double):smile.regression.KernelMachine[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/regression\/package$$gpr$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/regression\/package$$gpr$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/regression\/package$$gpr$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/regression\/package$$gpr$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/regression\/package$$gpr$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/regression\/package$$gpr$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/regression\/package$$gpr$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/regression\/package$$gpr$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/regression\/package$$gpr$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/regression\/package$$gpr$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/regression\/package$$gpr$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/regression\/package$$gpr$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/regression\/package$$gpr$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/regression\/package$$gpr$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/regression\/package$$gpr$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/regression\/package$$gpr$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/regression\/package$$gpr$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/regression\/package$$gpr$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/regression\/package$$gpr$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "smile.manifold" : [{"name" : "smile.manifold.$dummy", "shortDescription" : "Hacking scaladoc issue-8124.", "object" : "smile\/manifold\/package$$$dummy$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/manifold\/package$$$dummy$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/manifold\/package$$$dummy$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/manifold\/package$$$dummy$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/manifold\/package$$$dummy$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/manifold\/package$$$dummy$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/manifold\/package$$$dummy$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/manifold\/package$$$dummy$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/manifold\/package$$$dummy$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/manifold\/package$$$dummy$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/manifold\/package$$$dummy$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/manifold\/package$$$dummy$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/manifold\/package$$$dummy$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/manifold\/package$$$dummy$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/manifold\/package$$$dummy$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/manifold\/package$$$dummy$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/manifold\/package$$$dummy$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/manifold\/package$$$dummy$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/manifold\/package$$$dummy$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/manifold\/package$$$dummy$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "smile" : [{"name" : "smile.read", "shortDescription" : "Data loading utilities.", "object" : "smile\/read$.html", "members_object" : [{"label" : "wavefront", "tail" : "(file: Path): (Array[Array[Double]], Array[Array[Int]])", "member" : "smile.read.wavefront", "link" : "smile\/read$.html#wavefront(file:java.nio.file.Path):(Array[Array[Double]],Array[Array[Int]])", "kind" : "def"}, {"label" : "wavefront", "tail" : "(file: String): (Array[Array[Double]], Array[Array[Int]])", "member" : "smile.read.wavefront", "link" : "smile\/read$.html#wavefront(file:String):(Array[Array[Double]],Array[Array[Int]])", "kind" : "def"}, {"label" : "libsvm", "tail" : "(file: Path): Dataset[Instance[SparseArray]]", "member" : "smile.read.libsvm", "link" : "smile\/read$.html#libsvm(file:java.nio.file.Path):smile.data.Dataset[smile.data.Instance[smile.util.SparseArray]]", "kind" : "def"}, {"label" : "libsvm", "tail" : "(file: String): Dataset[Instance[SparseArray]]", "member" : "smile.read.libsvm", "link" : "smile\/read$.html#libsvm(file:String):smile.data.Dataset[smile.data.Instance[smile.util.SparseArray]]", "kind" : "def"}, {"label" : "parquet", "tail" : "(file: Path): DataFrame", "member" : "smile.read.parquet", "link" : "smile\/read$.html#parquet(file:java.nio.file.Path):smile.data.DataFrame", "kind" : "def"}, {"label" : "parquet", "tail" : "(file: String): DataFrame", "member" : "smile.read.parquet", "link" : "smile\/read$.html#parquet(file:String):smile.data.DataFrame", "kind" : "def"}, {"label" : "avro", "tail" : "(file: Path, schema: Path): DataFrame", "member" : "smile.read.avro", "link" : "smile\/read$.html#avro(file:java.nio.file.Path,schema:java.nio.file.Path):smile.data.DataFrame", "kind" : "def"}, {"label" : "avro", "tail" : "(file: Path, schema: InputStream): DataFrame", "member" : "smile.read.avro", "link" : "smile\/read$.html#avro(file:java.nio.file.Path,schema:java.io.InputStream):smile.data.DataFrame", "kind" : "def"}, {"label" : "avro", "tail" : "(file: String, schema: String): DataFrame", "member" : "smile.read.avro", "link" : "smile\/read$.html#avro(file:String,schema:String):smile.data.DataFrame", "kind" : "def"}, {"label" : "avro", "tail" : "(file: String, schema: InputStream): DataFrame", "member" : "smile.read.avro", "link" : "smile\/read$.html#avro(file:String,schema:java.io.InputStream):smile.data.DataFrame", "kind" : "def"}, {"label" : "arrow", "tail" : "(file: Path): DataFrame", "member" : "smile.read.arrow", "link" : "smile\/read$.html#arrow(file:java.nio.file.Path):smile.data.DataFrame", "kind" : "def"}, {"label" : "arrow", "tail" : "(file: String): DataFrame", "member" : "smile.read.arrow", "link" : "smile\/read$.html#arrow(file:String):smile.data.DataFrame", "kind" : "def"}, {"label" : "sas", "tail" : "(file: Path): DataFrame", "member" : "smile.read.sas", "link" : "smile\/read$.html#sas(file:java.nio.file.Path):smile.data.DataFrame", "kind" : "def"}, {"label" : "sas", "tail" : "(file: String): DataFrame", "member" : "smile.read.sas", "link" : "smile\/read$.html#sas(file:String):smile.data.DataFrame", "kind" : "def"}, {"label" : "arff", "tail" : "(file: Path): DataFrame", "member" : "smile.read.arff", "link" : "smile\/read$.html#arff(file:java.nio.file.Path):smile.data.DataFrame", "kind" : "def"}, {"label" : "arff", "tail" : "(file: String): DataFrame", "member" : "smile.read.arff", "link" : "smile\/read$.html#arff(file:String):smile.data.DataFrame", "kind" : "def"}, {"label" : "json", "tail" : "(file: Path, mode: Mode, schema: StructType): DataFrame", "member" : "smile.read.json", "link" : "smile\/read$.html#json(file:java.nio.file.Path,mode:smile.io.JSON.Mode,schema:smile.data.type.StructType):smile.data.DataFrame", "kind" : "def"}, {"label" : "json", "tail" : "(file: String, mode: Mode, schema: StructType): DataFrame", "member" : "smile.read.json", "link" : "smile\/read$.html#json(file:String,mode:smile.io.JSON.Mode,schema:smile.data.type.StructType):smile.data.DataFrame", "kind" : "def"}, {"label" : "json", "tail" : "(file: Path): DataFrame", "member" : "smile.read.json", "link" : "smile\/read$.html#json(file:java.nio.file.Path):smile.data.DataFrame", "kind" : "def"}, {"label" : "json", "tail" : "(file: String): DataFrame", "member" : "smile.read.json", "link" : "smile\/read$.html#json(file:String):smile.data.DataFrame", "kind" : "def"}, {"label" : "csv", "tail" : "(file: Path, format: CSVFormat, schema: StructType): DataFrame", "member" : "smile.read.csv", "link" : "smile\/read$.html#csv(file:java.nio.file.Path,format:org.apache.commons.csv.CSVFormat,schema:smile.data.type.StructType):smile.data.DataFrame", "kind" : "def"}, {"label" : "csv", "tail" : "(file: String, format: CSVFormat, schema: StructType): DataFrame", "member" : "smile.read.csv", "link" : "smile\/read$.html#csv(file:String,format:org.apache.commons.csv.CSVFormat,schema:smile.data.type.StructType):smile.data.DataFrame", "kind" : "def"}, {"label" : "csv", "tail" : "(file: Path, delimiter: Char, header: Boolean, quote: Char, escape: Char, schema: StructType): DataFrame", "member" : "smile.read.csv", "link" : "smile\/read$.html#csv(file:java.nio.file.Path,delimiter:Char,header:Boolean,quote:Char,escape:Char,schema:smile.data.type.StructType):smile.data.DataFrame", "kind" : "def"}, {"label" : "csv", "tail" : "(file: String, delimiter: Char, header: Boolean, quote: Char, escape: Char, schema: StructType): DataFrame", "member" : "smile.read.csv", "link" : "smile\/read$.html#csv(file:String,delimiter:Char,header:Boolean,quote:Char,escape:Char,schema:smile.data.type.StructType):smile.data.DataFrame", "kind" : "def"}, {"label" : "jdbc", "tail" : "(rs: ResultSet): DataFrame", "member" : "smile.read.jdbc", "link" : "smile\/read$.html#jdbc(rs:java.sql.ResultSet):smile.data.DataFrame", "kind" : "def"}, {"label" : "xstream", "tail" : "(file: Path): AnyRef", "member" : "smile.read.xstream", "link" : "smile\/read$.html#xstream(file:java.nio.file.Path):AnyRef", "kind" : "def"}, {"label" : "xstream", "tail" : "(file: String): AnyRef", "member" : "smile.read.xstream", "link" : "smile\/read$.html#xstream(file:String):AnyRef", "kind" : "def"}, {"label" : "apply", "tail" : "(file: Path): AnyRef", "member" : "smile.read.apply", "link" : "smile\/read$.html#apply(file:java.nio.file.Path):AnyRef", "kind" : "def"}, {"label" : "apply", "tail" : "(file: String): AnyRef", "member" : "smile.read.apply", "link" : "smile\/read$.html#apply(file:String):AnyRef", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/read$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/read$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/read$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/read$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/read$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/read$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/read$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/read$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/read$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/read$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/read$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/read$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/read$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/read$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/read$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/read$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/read$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/read$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/read$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "smile.write", "shortDescription" : "Data saving utilities.", "object" : "smile\/write$.html", "members_object" : [{"label" : "table", "tail" : "(data: Array[Array[T]], file: Path, delimiter: Char): Unit", "member" : "smile.write.table", "link" : "smile\/write$.html#table[T](data:Array[Array[T]],file:java.nio.file.Path,delimiter:Char):Unit", "kind" : "def"}, {"label" : "table", "tail" : "(data: Array[Array[T]], file: String, delimiter: Char): Unit", "member" : "smile.write.table", "link" : "smile\/write$.html#table[T](data:Array[Array[T]],file:String,delimiter:Char):Unit", "kind" : "def"}, {"label" : "csv", "tail" : "(data: DataFrame, file: Path, delimiter: Char): Unit", "member" : "smile.write.csv", "link" : "smile\/write$.html#csv(data:smile.data.DataFrame,file:java.nio.file.Path,delimiter:Char):Unit", "kind" : "def"}, {"label" : "csv", "tail" : "(data: DataFrame, file: String, delimiter: Char): Unit", "member" : "smile.write.csv", "link" : "smile\/write$.html#csv(data:smile.data.DataFrame,file:String,delimiter:Char):Unit", "kind" : "def"}, {"label" : "arff", "tail" : "(data: DataFrame, file: Path, relation: String): Unit", "member" : "smile.write.arff", "link" : "smile\/write$.html#arff(data:smile.data.DataFrame,file:java.nio.file.Path,relation:String):Unit", "kind" : "def"}, {"label" : "arff", "tail" : "(data: DataFrame, file: String, relation: String): Unit", "member" : "smile.write.arff", "link" : "smile\/write$.html#arff(data:smile.data.DataFrame,file:String,relation:String):Unit", "kind" : "def"}, {"label" : "arrow", "tail" : "(data: DataFrame, file: Path): Unit", "member" : "smile.write.arrow", "link" : "smile\/write$.html#arrow(data:smile.data.DataFrame,file:java.nio.file.Path):Unit", "kind" : "def"}, {"label" : "arrow", "tail" : "(data: DataFrame, file: String): Unit", "member" : "smile.write.arrow", "link" : "smile\/write$.html#arrow(data:smile.data.DataFrame,file:String):Unit", "kind" : "def"}, {"label" : "apply", "tail" : "(data: Array[T], file: Path): Unit", "member" : "smile.write.apply", "link" : "smile\/write$.html#apply[T](data:Array[T],file:java.nio.file.Path):Unit", "kind" : "def"}, {"label" : "apply", "tail" : "(data: Array[T], file: String): Unit", "member" : "smile.write.apply", "link" : "smile\/write$.html#apply[T](data:Array[T],file:String):Unit", "kind" : "def"}, {"label" : "xstream", "tail" : "(x: T, file: Path): Unit", "member" : "smile.write.xstream", "link" : "smile\/write$.html#xstream[T<:AnyRef](x:T,file:java.nio.file.Path):Unit", "kind" : "def"}, {"label" : "xstream", "tail" : "(x: T, file: String): Unit", "member" : "smile.write.xstream", "link" : "smile\/write$.html#xstream[T<:AnyRef](x:T,file:String):Unit", "kind" : "def"}, {"label" : "apply", "tail" : "(x: T, file: Path): Unit", "member" : "smile.write.apply", "link" : "smile\/write$.html#apply[T<:java.io.Serializable](x:T,file:java.nio.file.Path):Unit", "kind" : "def"}, {"label" : "apply", "tail" : "(x: T, file: String): Unit", "member" : "smile.write.apply", "link" : "smile\/write$.html#apply[T<:java.io.Serializable](x:T,file:String):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/write$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/write$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/write$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/write$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/write$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/write$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/write$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/write$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/write$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/write$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/write$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/write$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/write$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/write$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/write$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/write$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/write$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/write$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/write$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "smile.math.matrix" : [{"name" : "smile.math.matrix.matrix", "shortDescription" : "Matrix companion object.", "object" : "smile\/math\/matrix\/matrix$.html", "members_object" : [{"label" : "apply", "tail" : "(A: Array[Double]): DenseMatrix", "member" : "smile.math.matrix.matrix.apply", "link" : "smile\/math\/matrix\/matrix$.html#apply(A:Array[Double]):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "apply", "tail" : "(A: Array[Double]*): DenseMatrix", "member" : "smile.math.matrix.matrix.apply", "link" : "smile\/math\/matrix\/matrix$.html#apply(A:Array[Double]*):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "apply", "tail" : "(A: Array[Array[Double]]): DenseMatrix", "member" : "smile.math.matrix.matrix.apply", "link" : "smile\/math\/matrix\/matrix$.html#apply(A:Array[Array[Double]]):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "apply", "tail" : "(nrows: Int, ncols: Int, value: Double): DenseMatrix", "member" : "smile.math.matrix.matrix.apply", "link" : "smile\/math\/matrix\/matrix$.html#apply(nrows:Int,ncols:Int,value:Double):smile.math.matrix.DenseMatrix", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/math\/matrix\/matrix$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/math\/matrix\/matrix$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/math\/matrix\/matrix$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/math\/matrix\/matrix$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/math\/matrix\/matrix$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/math\/matrix\/matrix$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/math\/matrix\/matrix$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/matrix\/matrix$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/matrix\/matrix$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/math\/matrix\/matrix$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/math\/matrix\/matrix$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/math\/matrix\/matrix$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/math\/matrix\/matrix$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/math\/matrix\/matrix$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/math\/matrix\/matrix$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/math\/matrix\/matrix$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/math\/matrix\/matrix$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/math\/matrix\/matrix$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/math\/matrix\/matrix$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "smile.plot" : [{"name" : "smile.plot.Render", "shortDescription" : "Implicit renderers.", "object" : "smile\/plot\/Render$.html", "members_object" : [{"label" : "desktop", "tail" : "(spec: VegaLite): Unit", "member" : "smile.plot.Render.desktop", "link" : "smile\/plot\/Render$.html#desktop(spec:smile.plot.vega.VegaLite):Unit", "kind" : "def"}, {"label" : "desktop", "tail" : "(grid: PlotGrid): Unit", "member" : "smile.plot.Render.desktop", "link" : "smile\/plot\/Render$.html#desktop(grid:smile.plot.swing.PlotGrid):Unit", "kind" : "def"}, {"label" : "desktop", "tail" : "(canvas: Canvas): Unit", "member" : "smile.plot.Render.desktop", "link" : "smile\/plot\/Render$.html#desktop(canvas:smile.plot.swing.Canvas):Unit", "kind" : "def"}, {"label" : "renderPlotGrid", "tail" : "(): (PlotGrid) => Unit", "member" : "smile.plot.Render.renderPlotGrid", "link" : "smile\/plot\/Render$.html#renderPlotGrid:smile.plot.swing.PlotGrid=>Unit", "kind" : "implicit macro def"}, {"label" : "renderCanvas", "tail" : "(): (Canvas) => Unit", "member" : "smile.plot.Render.renderCanvas", "link" : "smile\/plot\/Render$.html#renderCanvas:smile.plot.swing.Canvas=>Unit", "kind" : "implicit macro def"}, {"label" : "renderVega", "tail" : "(): (VegaLite) => Unit", "member" : "smile.plot.Render.renderVega", "link" : "smile\/plot\/Render$.html#renderVega:smile.plot.vega.VegaLite=>Unit", "kind" : "implicit macro def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/plot\/Render$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/plot\/Render$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/plot\/Render$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/plot\/Render$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/plot\/Render$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/plot\/Render$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/plot\/Render$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/Render$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/Render$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/Render$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/plot\/Render$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/plot\/Render$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/plot\/Render$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/plot\/Render$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/plot\/Render$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/plot\/Render$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/plot\/Render$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/plot\/Render$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/plot\/Render$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "smile.plot.RenderMacro", "shortDescription" : "Guess the notebook environment.", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "smile\/plot\/RenderMacro.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/plot\/RenderMacro.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (RenderMacro) => Boolean, msg: => Any): RenderMacro", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/plot\/RenderMacro.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (RenderMacro) => Boolean): RenderMacro", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/plot\/RenderMacro.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): RenderMacro", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/plot\/RenderMacro.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): RenderMacro", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/plot\/RenderMacro.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (RenderMacro, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/plot\/RenderMacro.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (RenderMacro, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/plot\/RenderMacro.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "renderPlotGrid", "tail" : "(): scala.reflect.macros.Universe.Tree", "member" : "smile.plot.RenderMacro.renderPlotGrid", "link" : "smile\/plot\/RenderMacro.html#renderPlotGrid:RenderMacro.this.c.universe.Tree", "kind" : "def"}, {"label" : "renderCanvas", "tail" : "(): scala.reflect.macros.Universe.Tree", "member" : "smile.plot.RenderMacro.renderCanvas", "link" : "smile\/plot\/RenderMacro.html#renderCanvas:RenderMacro.this.c.universe.Tree", "kind" : "def"}, {"label" : "renderVega", "tail" : "(): scala.reflect.macros.Universe.Tree", "member" : "smile.plot.RenderMacro.renderVega", "link" : "smile\/plot\/RenderMacro.html#renderVega:RenderMacro.this.c.universe.Tree", "kind" : "def"}, {"member" : "smile.plot.RenderMacro#<init>", "error" : "unsupported entity"}, {"label" : "c", "tail" : ": Context", "member" : "smile.plot.RenderMacro.c", "link" : "smile\/plot\/RenderMacro.html#c:scala.reflect.macros.whitebox.Context", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/plot\/RenderMacro.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/plot\/RenderMacro.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/plot\/RenderMacro.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/plot\/RenderMacro.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/plot\/RenderMacro.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/plot\/RenderMacro.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/plot\/RenderMacro.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/RenderMacro.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/RenderMacro.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/RenderMacro.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/plot\/RenderMacro.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/plot\/RenderMacro.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/plot\/RenderMacro.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/plot\/RenderMacro.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/plot\/RenderMacro.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/plot\/RenderMacro.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/plot\/RenderMacro.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/plot\/RenderMacro.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/plot\/RenderMacro.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "smile\/plot\/RenderMacro.html", "kind" : "class"}], "smile.data" : [{"name" : "smile.data.DataFrameOps", "shortDescription" : "Pimped data frame with Scala style methods.", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "smile\/data\/DataFrameOps.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/data\/DataFrameOps.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (DataFrameOps) => Boolean, msg: => Any): DataFrameOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/data\/DataFrameOps.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (DataFrameOps) => Boolean): DataFrameOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/data\/DataFrameOps.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): DataFrameOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/data\/DataFrameOps.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): DataFrameOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/data\/DataFrameOps.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (DataFrameOps, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/data\/DataFrameOps.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (DataFrameOps, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/data\/DataFrameOps.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): JsArray", "member" : "smile.data.DataFrameOps.toJSON", "link" : "smile\/data\/DataFrameOps.html#toJSON:smile.json.JsArray", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (Tuple) => K): Map[K, DataFrame]", "member" : "smile.data.DataFrameOps.groupBy", "link" : "smile\/data\/DataFrameOps.html#groupBy[K](f:smile.data.Tuple=>K):scala.collection.immutable.Map[K,smile.data.DataFrame]", "kind" : "def"}, {"label" : "partition", "tail" : "(p: (Tuple) => Boolean): (DataFrame, DataFrame)", "member" : "smile.data.DataFrameOps.partition", "link" : "smile\/data\/DataFrameOps.html#partition(p:smile.data.Tuple=>Boolean):(smile.data.DataFrame,smile.data.DataFrame)", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (Tuple) => Boolean): DataFrame", "member" : "smile.data.DataFrameOps.filter", "link" : "smile\/data\/DataFrameOps.html#filter(p:smile.data.Tuple=>Boolean):smile.data.DataFrame", "kind" : "def"}, {"label" : "map", "tail" : "(p: (Tuple) => U): Iterable[U]", "member" : "smile.data.DataFrameOps.map", "link" : "smile\/data\/DataFrameOps.html#map[U](p:smile.data.Tuple=>U):Iterable[U]", "kind" : "def"}, {"label" : "foreach", "tail" : "(p: (Tuple) => U): Unit", "member" : "smile.data.DataFrameOps.foreach", "link" : "smile\/data\/DataFrameOps.html#foreach[U](p:smile.data.Tuple=>U):Unit", "kind" : "def"}, {"label" : "forall", "tail" : "(p: (Tuple) => Boolean): Boolean", "member" : "smile.data.DataFrameOps.forall", "link" : "smile\/data\/DataFrameOps.html#forall(p:smile.data.Tuple=>Boolean):Boolean", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (Tuple) => Boolean): Boolean", "member" : "smile.data.DataFrameOps.exists", "link" : "smile\/data\/DataFrameOps.html#exists(p:smile.data.Tuple=>Boolean):Boolean", "kind" : "def"}, {"label" : "find", "tail" : "(p: (Tuple) => Boolean): Optional[Tuple]", "member" : "smile.data.DataFrameOps.find", "link" : "smile\/data\/DataFrameOps.html#find(p:smile.data.Tuple=>Boolean):java.util.Optional[smile.data.Tuple]", "kind" : "def"}, {"label" : "of", "tail" : "(range: Range): DataFrame", "member" : "smile.data.DataFrameOps.of", "link" : "smile\/data\/DataFrameOps.html#of(range:Range):smile.data.DataFrame", "kind" : "def"}, {"label" : "drop", "tail" : "(range: Range): DataFrame", "member" : "smile.data.DataFrameOps.drop", "link" : "smile\/data\/DataFrameOps.html#drop(range:Range):smile.data.DataFrame", "kind" : "def"}, {"label" : "select", "tail" : "(range: Range): DataFrame", "member" : "smile.data.DataFrameOps.select", "link" : "smile\/data\/DataFrameOps.html#select(range:Range):smile.data.DataFrame", "kind" : "def"}, {"member" : "smile.data.DataFrameOps#<init>", "error" : "unsupported entity"}, {"label" : "data", "tail" : ": DataFrame", "member" : "smile.data.DataFrameOps.data", "link" : "smile\/data\/DataFrameOps.html#data:smile.data.DataFrame", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/data\/DataFrameOps.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/data\/DataFrameOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/data\/DataFrameOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/data\/DataFrameOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/data\/DataFrameOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/data\/DataFrameOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/data\/DataFrameOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/data\/DataFrameOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/data\/DataFrameOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/data\/DataFrameOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/data\/DataFrameOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/data\/DataFrameOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/data\/DataFrameOps.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/data\/DataFrameOps.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/data\/DataFrameOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/data\/DataFrameOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/data\/DataFrameOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/data\/DataFrameOps.html", "kind" : "case class"}, {"name" : "smile.data.TupleOps", "shortDescription" : "Pimped tuple with additional methods.", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "smile\/data\/TupleOps.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/data\/TupleOps.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TupleOps) => Boolean, msg: => Any): TupleOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/data\/TupleOps.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TupleOps) => Boolean): TupleOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/data\/TupleOps.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): TupleOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/data\/TupleOps.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): TupleOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/data\/TupleOps.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (TupleOps, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/data\/TupleOps.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (TupleOps, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/data\/TupleOps.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): JsObject", "member" : "smile.data.TupleOps.toJSON", "link" : "smile\/data\/TupleOps.html#toJSON:smile.json.JsObject", "kind" : "def"}, {"member" : "smile.data.TupleOps#<init>", "error" : "unsupported entity"}, {"label" : "t", "tail" : ": Tuple", "member" : "smile.data.TupleOps.t", "link" : "smile\/data\/TupleOps.html#t:smile.data.Tuple", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/data\/TupleOps.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/data\/TupleOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/data\/TupleOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/data\/TupleOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/data\/TupleOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/data\/TupleOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/data\/TupleOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/data\/TupleOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/data\/TupleOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/data\/TupleOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/data\/TupleOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/data\/TupleOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/data\/TupleOps.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/data\/TupleOps.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/data\/TupleOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/data\/TupleOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/data\/TupleOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/data\/TupleOps.html", "kind" : "case class"}], "smile.feature" : [{"name" : "smile.feature.$dummy", "shortDescription" : "Hacking scaladoc issue-8124.", "object" : "smile\/feature\/package$$$dummy$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/feature\/package$$$dummy$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/feature\/package$$$dummy$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/feature\/package$$$dummy$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/feature\/package$$$dummy$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/feature\/package$$$dummy$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/feature\/package$$$dummy$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/feature\/package$$$dummy$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/feature\/package$$$dummy$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/feature\/package$$$dummy$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/feature\/package$$$dummy$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/feature\/package$$$dummy$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/feature\/package$$$dummy$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/feature\/package$$$dummy$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/feature\/package$$$dummy$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/feature\/package$$$dummy$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/feature\/package$$$dummy$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/feature\/package$$$dummy$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/feature\/package$$$dummy$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/feature\/package$$$dummy$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "smile.sequence" : [{"name" : "smile.sequence.$dummy", "shortDescription" : "Hacking scaladoc issue-8124.", "object" : "smile\/sequence\/package$$$dummy$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/sequence\/package$$$dummy$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/sequence\/package$$$dummy$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/sequence\/package$$$dummy$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/sequence\/package$$$dummy$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/sequence\/package$$$dummy$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/sequence\/package$$$dummy$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/sequence\/package$$$dummy$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/sequence\/package$$$dummy$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/sequence\/package$$$dummy$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/sequence\/package$$$dummy$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/sequence\/package$$$dummy$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/sequence\/package$$$dummy$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/sequence\/package$$$dummy$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/sequence\/package$$$dummy$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/sequence\/package$$$dummy$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/sequence\/package$$$dummy$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/sequence\/package$$$dummy$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/sequence\/package$$$dummy$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/sequence\/package$$$dummy$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "smile.plot.vega" : [{"name" : "smile.plot.vega.Facet", "object" : "smile\/plot\/vega\/Facet$.html", "members_object" : [{"label" : "field", "tail" : "(field: String, type: String, bin: Either[Boolean, JsObject], timeUnit: String, align: String, center: Boolean, spacing: Option[Int]): JsObject", "member" : "smile.plot.vega.Facet.field", "link" : "smile\/plot\/vega\/Facet$.html#field(field:String,type:String,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,align:String,center:Boolean,spacing:Option[Int]):smile.json.JsObject", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/plot\/vega\/Facet$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/plot\/vega\/Facet$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/plot\/vega\/Facet$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/plot\/vega\/Facet$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/plot\/vega\/Facet$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/plot\/vega\/Facet$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/plot\/vega\/Facet$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/vega\/Facet$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/vega\/Facet$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/vega\/Facet$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/plot\/vega\/Facet$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/plot\/vega\/Facet$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/plot\/vega\/Facet$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/plot\/vega\/Facet$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/plot\/vega\/Facet$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/plot\/vega\/Facet$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/plot\/vega\/Facet$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/plot\/vega\/Facet$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/plot\/vega\/Facet$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "smile\/plot\/vega\/Facet.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "smile\/plot\/vega\/Facet.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/plot\/vega\/Facet.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Facet) => Boolean, msg: => Any): Facet", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/plot\/vega\/Facet.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Facet) => Boolean): Facet", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/plot\/vega\/Facet.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Facet", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/plot\/vega\/Facet.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Facet", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/plot\/vega\/Facet.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Facet, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/plot\/vega\/Facet.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Facet, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/plot\/vega\/Facet.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "column", "tail" : "(field: String, type: String, bin: Either[Boolean, JsObject], timeUnit: String, align: String, center: Boolean, spacing: Option[Int]): Facet", "member" : "smile.plot.vega.Facet.column", "link" : "smile\/plot\/vega\/Facet.html#column(field:String,type:String,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,align:String,center:Boolean,spacing:Option[Int]):smile.plot.vega.Facet", "kind" : "def"}, {"label" : "row", "tail" : "(field: String, type: String, bin: Either[Boolean, JsObject], timeUnit: String, align: String, center: Boolean, spacing: Option[Int]): Facet", "member" : "smile.plot.vega.Facet.row", "link" : "smile\/plot\/vega\/Facet.html#row(field:String,type:String,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,align:String,center:Boolean,spacing:Option[Int]):smile.plot.vega.Facet", "kind" : "def"}, {"label" : "facet", "tail" : "(field: String, type: String, bin: Either[Boolean, JsObject], timeUnit: String, align: String, center: Boolean, spacing: Option[Int], columns: Option[Int]): Facet", "member" : "smile.plot.vega.Facet.facet", "link" : "smile\/plot\/vega\/Facet.html#facet(field:String,type:String,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,align:String,center:Boolean,spacing:Option[Int],columns:Option[Int]):smile.plot.vega.Facet", "kind" : "def"}, {"label" : "projection", "tail" : "(projection: JsObject): View", "member" : "smile.plot.vega.View.projection", "link" : "smile\/plot\/vega\/Facet.html#projection(projection:smile.json.JsObject):smile.plot.vega.View", "kind" : "def"}, {"label" : "selection", "tail" : "(selections: (String, String)*): View", "member" : "smile.plot.vega.View.selection", "link" : "smile\/plot\/vega\/Facet.html#selection(selections:(String,String)*):smile.plot.vega.View", "kind" : "def"}, {"label" : "view", "tail" : "(background: JsObject): View", "member" : "smile.plot.vega.View.view", "link" : "smile\/plot\/vega\/Facet.html#view(background:smile.json.JsObject):smile.plot.vega.View", "kind" : "def"}, {"label" : "opacity", "tail" : "(value: JsValue): View", "member" : "smile.plot.vega.View.opacity", "link" : "smile\/plot\/vega\/Facet.html#opacity(value:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "opacity", "tail" : "(field: JsValue, type: String, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, scale: JsValue, legend: JsValue, condition: JsValue): View", "member" : "smile.plot.vega.View.opacity", "link" : "smile\/plot\/vega\/Facet.html#opacity(field:smile.json.JsValue,type:String,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,scale:smile.json.JsValue,legend:smile.json.JsValue,condition:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "text", "tail" : "(value: JsValue): View", "member" : "smile.plot.vega.View.text", "link" : "smile\/plot\/vega\/Facet.html#text(value:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "text", "tail" : "(field: JsValue, type: String, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, scale: JsValue, legend: JsValue, condition: JsValue): View", "member" : "smile.plot.vega.View.text", "link" : "smile\/plot\/vega\/Facet.html#text(field:smile.json.JsValue,type:String,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,scale:smile.json.JsValue,legend:smile.json.JsValue,condition:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "size", "tail" : "(value: JsValue): View", "member" : "smile.plot.vega.View.size", "link" : "smile\/plot\/vega\/Facet.html#size(value:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "size", "tail" : "(field: JsValue, type: String, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, scale: JsValue, legend: JsValue, condition: JsValue): View", "member" : "smile.plot.vega.View.size", "link" : "smile\/plot\/vega\/Facet.html#size(field:smile.json.JsValue,type:String,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,scale:smile.json.JsValue,legend:smile.json.JsValue,condition:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "shape", "tail" : "(value: JsValue): View", "member" : "smile.plot.vega.View.shape", "link" : "smile\/plot\/vega\/Facet.html#shape(value:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "shape", "tail" : "(field: JsValue, type: String, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, scale: JsValue, legend: JsValue, condition: JsValue): View", "member" : "smile.plot.vega.View.shape", "link" : "smile\/plot\/vega\/Facet.html#shape(field:smile.json.JsValue,type:String,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,scale:smile.json.JsValue,legend:smile.json.JsValue,condition:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "stroke", "tail" : "(value: JsValue): View", "member" : "smile.plot.vega.View.stroke", "link" : "smile\/plot\/vega\/Facet.html#stroke(value:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "stroke", "tail" : "(field: JsValue, type: String, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, scale: JsValue, legend: JsValue, condition: JsValue): View", "member" : "smile.plot.vega.View.stroke", "link" : "smile\/plot\/vega\/Facet.html#stroke(field:smile.json.JsValue,type:String,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,scale:smile.json.JsValue,legend:smile.json.JsValue,condition:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "fill", "tail" : "(value: JsValue): View", "member" : "smile.plot.vega.View.fill", "link" : "smile\/plot\/vega\/Facet.html#fill(value:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "fill", "tail" : "(field: JsValue, type: String, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, scale: JsValue, legend: JsValue, condition: JsValue): View", "member" : "smile.plot.vega.View.fill", "link" : "smile\/plot\/vega\/Facet.html#fill(field:smile.json.JsValue,type:String,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,scale:smile.json.JsValue,legend:smile.json.JsValue,condition:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "angle", "tail" : "(value: JsValue): View", "member" : "smile.plot.vega.View.angle", "link" : "smile\/plot\/vega\/Facet.html#angle(value:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "angle", "tail" : "(field: JsValue, type: String, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, scale: JsValue, legend: JsValue, condition: JsValue): View", "member" : "smile.plot.vega.View.angle", "link" : "smile\/plot\/vega\/Facet.html#angle(field:smile.json.JsValue,type:String,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,scale:smile.json.JsValue,legend:smile.json.JsValue,condition:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "color", "tail" : "(value: JsValue): View", "member" : "smile.plot.vega.View.color", "link" : "smile\/plot\/vega\/Facet.html#color(value:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "color", "tail" : "(field: JsValue, type: String, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, scale: JsValue, legend: JsValue, condition: JsValue): View", "member" : "smile.plot.vega.View.color", "link" : "smile\/plot\/vega\/Facet.html#color(field:smile.json.JsValue,type:String,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,scale:smile.json.JsValue,legend:smile.json.JsValue,condition:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "setPropertyDatum", "tail" : "(prop: String, datum: JsValue): View", "member" : "smile.plot.vega.View.setPropertyDatum", "link" : "smile\/plot\/vega\/Facet.html#setPropertyDatum(prop:String,datum:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "setPropertyValue", "tail" : "(prop: String, value: JsValue): View", "member" : "smile.plot.vega.View.setPropertyValue", "link" : "smile\/plot\/vega\/Facet.html#setPropertyValue(prop:String,value:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "setProperty", "tail" : "(prop: String, field: JsValue, type: String, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, scale: JsValue, legend: JsValue, condition: JsValue): View", "member" : "smile.plot.vega.View.setProperty", "link" : "smile\/plot\/vega\/Facet.html#setProperty(prop:String,field:smile.json.JsValue,type:String,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,scale:smile.json.JsValue,legend:smile.json.JsValue,condition:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "radius2", "tail" : "(field: JsValue, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, title: String): View", "member" : "smile.plot.vega.View.radius2", "link" : "smile\/plot\/vega\/Facet.html#radius2(field:smile.json.JsValue,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,title:String):smile.plot.vega.View", "kind" : "def"}, {"label" : "theta2", "tail" : "(field: JsValue, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, title: String): View", "member" : "smile.plot.vega.View.theta2", "link" : "smile\/plot\/vega\/Facet.html#theta2(field:smile.json.JsValue,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,title:String):smile.plot.vega.View", "kind" : "def"}, {"label" : "radius", "tail" : "(field: JsValue, type: String, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, title: String, scale: JsValue, sort: Option[String], stack: JsValue): View", "member" : "smile.plot.vega.View.radius", "link" : "smile\/plot\/vega\/Facet.html#radius(field:smile.json.JsValue,type:String,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,title:String,scale:smile.json.JsValue,sort:Option[String],stack:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "theta", "tail" : "(field: JsValue, type: String, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, title: String, scale: JsValue, sort: Option[String], stack: JsValue): View", "member" : "smile.plot.vega.View.theta", "link" : "smile\/plot\/vega\/Facet.html#theta(field:smile.json.JsValue,type:String,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,title:String,scale:smile.json.JsValue,sort:Option[String],stack:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "latitude2", "tail" : "(field: JsValue, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, title: String): View", "member" : "smile.plot.vega.View.latitude2", "link" : "smile\/plot\/vega\/Facet.html#latitude2(field:smile.json.JsValue,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,title:String):smile.plot.vega.View", "kind" : "def"}, {"label" : "longitude2", "tail" : "(field: JsValue, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, title: String): View", "member" : "smile.plot.vega.View.longitude2", "link" : "smile\/plot\/vega\/Facet.html#longitude2(field:smile.json.JsValue,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,title:String):smile.plot.vega.View", "kind" : "def"}, {"label" : "latitude", "tail" : "(field: JsValue, type: String, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, title: String): View", "member" : "smile.plot.vega.View.latitude", "link" : "smile\/plot\/vega\/Facet.html#latitude(field:smile.json.JsValue,type:String,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,title:String):smile.plot.vega.View", "kind" : "def"}, {"label" : "longitude", "tail" : "(field: JsValue, type: String, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, title: String): View", "member" : "smile.plot.vega.View.longitude", "link" : "smile\/plot\/vega\/Facet.html#longitude(field:smile.json.JsValue,type:String,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,title:String):smile.plot.vega.View", "kind" : "def"}, {"label" : "yError2", "tail" : "(field: JsValue, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, title: String): View", "member" : "smile.plot.vega.View.yError2", "link" : "smile\/plot\/vega\/Facet.html#yError2(field:smile.json.JsValue,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,title:String):smile.plot.vega.View", "kind" : "def"}, {"label" : "xError2", "tail" : "(field: JsValue, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, title: String): View", "member" : "smile.plot.vega.View.xError2", "link" : "smile\/plot\/vega\/Facet.html#xError2(field:smile.json.JsValue,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,title:String):smile.plot.vega.View", "kind" : "def"}, {"label" : "yError", "tail" : "(field: JsValue, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, title: String): View", "member" : "smile.plot.vega.View.yError", "link" : "smile\/plot\/vega\/Facet.html#yError(field:smile.json.JsValue,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,title:String):smile.plot.vega.View", "kind" : "def"}, {"label" : "xError", "tail" : "(field: JsValue, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, title: String): View", "member" : "smile.plot.vega.View.xError", "link" : "smile\/plot\/vega\/Facet.html#xError(field:smile.json.JsValue,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,title:String):smile.plot.vega.View", "kind" : "def"}, {"label" : "y2", "tail" : "(field: JsValue, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, title: String): View", "member" : "smile.plot.vega.View.y2", "link" : "smile\/plot\/vega\/Facet.html#y2(field:smile.json.JsValue,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,title:String):smile.plot.vega.View", "kind" : "def"}, {"label" : "x2", "tail" : "(field: JsValue, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, title: String): View", "member" : "smile.plot.vega.View.x2", "link" : "smile\/plot\/vega\/Facet.html#x2(field:smile.json.JsValue,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,title:String):smile.plot.vega.View", "kind" : "def"}, {"label" : "y", "tail" : "(field: JsValue, type: String, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, title: String, scale: JsValue, axis: JsValue, sort: Option[String], band: Option[Double], impute: JsValue, stack: JsValue): View", "member" : "smile.plot.vega.View.y", "link" : "smile\/plot\/vega\/Facet.html#y(field:smile.json.JsValue,type:String,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,title:String,scale:smile.json.JsValue,axis:smile.json.JsValue,sort:Option[String],band:Option[Double],impute:smile.json.JsValue,stack:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "x", "tail" : "(field: JsValue, type: String, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, title: String, scale: JsValue, axis: JsValue, sort: Option[String], band: Option[Double], impute: JsValue, stack: JsValue): View", "member" : "smile.plot.vega.View.x", "link" : "smile\/plot\/vega\/Facet.html#x(field:smile.json.JsValue,type:String,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,title:String,scale:smile.json.JsValue,axis:smile.json.JsValue,sort:Option[String],band:Option[Double],impute:smile.json.JsValue,stack:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "y", "tail" : "(datum: JsValue): View", "member" : "smile.plot.vega.View.y", "link" : "smile\/plot\/vega\/Facet.html#y(datum:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "x", "tail" : "(datum: JsValue): View", "member" : "smile.plot.vega.View.x", "link" : "smile\/plot\/vega\/Facet.html#x(datum:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "encode", "tail" : "(x: String, y: String, color: Option[(String, String)]): View", "member" : "smile.plot.vega.View.encode", "link" : "smile\/plot\/vega\/Facet.html#encode(x:String,y:String,color:Option[(String,String)]):smile.plot.vega.View", "kind" : "def"}, {"label" : "mark", "tail" : "(mark: String): View", "member" : "smile.plot.vega.View.mark", "link" : "smile\/plot\/vega\/Facet.html#mark(mark:String):smile.plot.vega.View", "kind" : "def"}, {"label" : "mark", "tail" : "(mark: JsObject): View", "member" : "smile.plot.vega.View.mark", "link" : "smile\/plot\/vega\/Facet.html#mark(mark:smile.json.JsObject):smile.plot.vega.View", "kind" : "def"}, {"label" : "heightStep", "tail" : "(step: Int): View", "member" : "smile.plot.vega.View.heightStep", "link" : "smile\/plot\/vega\/Facet.html#heightStep(step:Int):smile.plot.vega.View", "kind" : "def"}, {"label" : "widthStep", "tail" : "(step: Int): View", "member" : "smile.plot.vega.View.widthStep", "link" : "smile\/plot\/vega\/Facet.html#widthStep(step:Int):smile.plot.vega.View", "kind" : "def"}, {"label" : "height", "tail" : "(height: String): View", "member" : "smile.plot.vega.View.height", "link" : "smile\/plot\/vega\/Facet.html#height(height:String):smile.plot.vega.View", "kind" : "def"}, {"label" : "width", "tail" : "(width: String): View", "member" : "smile.plot.vega.View.width", "link" : "smile\/plot\/vega\/Facet.html#width(width:String):smile.plot.vega.View", "kind" : "def"}, {"label" : "height", "tail" : "(height: Int): View", "member" : "smile.plot.vega.View.height", "link" : "smile\/plot\/vega\/Facet.html#height(height:Int):smile.plot.vega.View", "kind" : "def"}, {"label" : "width", "tail" : "(width: Int): View", "member" : "smile.plot.vega.View.width", "link" : "smile\/plot\/vega\/Facet.html#width(width:Int):smile.plot.vega.View", "kind" : "def"}, {"label" : "iframe", "tail" : "(id: String): String", "member" : "smile.plot.vega.VegaLite.iframe", "link" : "smile\/plot\/vega\/Facet.html#iframe(id:String):String", "kind" : "def"}, {"label" : "embed", "tail" : "(): String", "member" : "smile.plot.vega.VegaLite.embed", "link" : "smile\/plot\/vega\/Facet.html#embed:String", "kind" : "def"}, {"label" : "transform", "tail" : "(transforms: JsObject*): VegaLite", "member" : "smile.plot.vega.VegaLite.transform", "link" : "smile\/plot\/vega\/Facet.html#transform(transforms:smile.json.JsObject*):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "transform", "tail" : "(transforms: JsArray): VegaLite", "member" : "smile.plot.vega.VegaLite.transform", "link" : "smile\/plot\/vega\/Facet.html#transform(transforms:smile.json.JsArray):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "data", "tail" : "(url: String, format: JsValue): VegaLite", "member" : "smile.plot.vega.VegaLite.data", "link" : "smile\/plot\/vega\/Facet.html#data(url:String,format:smile.json.JsValue):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "data", "tail" : "(df: DataFrame): VegaLite", "member" : "smile.plot.vega.VegaLite.data", "link" : "smile\/plot\/vega\/Facet.html#data(df:smile.data.DataFrame):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "data", "tail" : "(rows: JsObject*): VegaLite", "member" : "smile.plot.vega.VegaLite.data", "link" : "smile\/plot\/vega\/Facet.html#data(rows:smile.json.JsObject*):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "data", "tail" : "(json: JsArray): VegaLite", "member" : "smile.plot.vega.VegaLite.data", "link" : "smile\/plot\/vega\/Facet.html#data(json:smile.json.JsArray):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "title", "tail" : "(title: String): VegaLite", "member" : "smile.plot.vega.VegaLite.title", "link" : "smile\/plot\/vega\/Facet.html#title(title:String):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "description", "tail" : "(description: String): VegaLite", "member" : "smile.plot.vega.VegaLite.description", "link" : "smile\/plot\/vega\/Facet.html#description(description:String):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "name", "tail" : "(name: String): VegaLite", "member" : "smile.plot.vega.VegaLite.name", "link" : "smile\/plot\/vega\/Facet.html#name(name:String):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "usermeta", "tail" : "(data: JsValue): VegaLite", "member" : "smile.plot.vega.VegaLite.usermeta", "link" : "smile\/plot\/vega\/Facet.html#usermeta(data:smile.json.JsValue):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "config", "tail" : "(properties: JsObject): VegaLite", "member" : "smile.plot.vega.VegaLite.config", "link" : "smile\/plot\/vega\/Facet.html#config(properties:smile.json.JsObject):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "autosize", "tail" : "(type: String, resize: Boolean, contains: String): VegaLite", "member" : "smile.plot.vega.VegaLite.autosize", "link" : "smile\/plot\/vega\/Facet.html#autosize(type:String,resize:Boolean,contains:String):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "padding", "tail" : "(left: Int, top: Int, right: Int, bottom: Int): VegaLite", "member" : "smile.plot.vega.VegaLite.padding", "link" : "smile\/plot\/vega\/Facet.html#padding(left:Int,top:Int,right:Int,bottom:Int):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "padding", "tail" : "(size: Int): VegaLite", "member" : "smile.plot.vega.VegaLite.padding", "link" : "smile\/plot\/vega\/Facet.html#padding(size:Int):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "background", "tail" : "(color: String): VegaLite", "member" : "smile.plot.vega.VegaLite.background", "link" : "smile\/plot\/vega\/Facet.html#background(color:String):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.plot.vega.VegaLite.toString", "link" : "smile\/plot\/vega\/Facet.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/plot\/vega\/Facet.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/plot\/vega\/Facet.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/plot\/vega\/Facet.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/plot\/vega\/Facet.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/plot\/vega\/Facet.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/plot\/vega\/Facet.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/plot\/vega\/Facet.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/vega\/Facet.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/vega\/Facet.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/vega\/Facet.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/plot\/vega\/Facet.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/plot\/vega\/Facet.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/plot\/vega\/Facet.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/plot\/vega\/Facet.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/plot\/vega\/Facet.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/plot\/vega\/Facet.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/plot\/vega\/Facet.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/plot\/vega\/Facet.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "spec", "tail" : ": JsObject", "member" : "smile.plot.vega.VegaLite.spec", "link" : "smile\/plot\/vega\/Facet.html#spec:smile.json.JsObject", "kind" : "abstract val"}], "shortDescription" : "A facet is a trellis plot (or small multiple) of a series of similarplots that displays different subsets of the same data, facilitatingcomparison across subsets."}, {"name" : "smile.plot.vega.Layer", "trait" : "smile\/plot\/vega\/Layer.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "smile\/plot\/vega\/Layer.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/plot\/vega\/Layer.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Layer) => Boolean, msg: => Any): Layer", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/plot\/vega\/Layer.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Layer) => Boolean): Layer", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/plot\/vega\/Layer.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Layer", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/plot\/vega\/Layer.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Layer", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/plot\/vega\/Layer.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Layer, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/plot\/vega\/Layer.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Layer, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/plot\/vega\/Layer.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "layer", "tail" : "(layers: View*): Layer", "member" : "smile.plot.vega.Layer.layer", "link" : "smile\/plot\/vega\/Layer.html#layer(layers:smile.plot.vega.View*):smile.plot.vega.Layer", "kind" : "def"}, {"label" : "resolveLegend", "tail" : "(legend: JsObject): ViewComposition", "member" : "smile.plot.vega.ViewComposition.resolveLegend", "link" : "smile\/plot\/vega\/Layer.html#resolveLegend(legend:smile.json.JsObject):smile.plot.vega.ViewComposition", "kind" : "def"}, {"label" : "resolveAxis", "tail" : "(axis: JsObject): ViewComposition", "member" : "smile.plot.vega.ViewComposition.resolveAxis", "link" : "smile\/plot\/vega\/Layer.html#resolveAxis(axis:smile.json.JsObject):smile.plot.vega.ViewComposition", "kind" : "def"}, {"label" : "resolveScale", "tail" : "(scale: JsObject): ViewComposition", "member" : "smile.plot.vega.ViewComposition.resolveScale", "link" : "smile\/plot\/vega\/Layer.html#resolveScale(scale:smile.json.JsObject):smile.plot.vega.ViewComposition", "kind" : "def"}, {"label" : "projection", "tail" : "(projection: JsObject): View", "member" : "smile.plot.vega.View.projection", "link" : "smile\/plot\/vega\/Layer.html#projection(projection:smile.json.JsObject):smile.plot.vega.View", "kind" : "def"}, {"label" : "selection", "tail" : "(selections: (String, String)*): View", "member" : "smile.plot.vega.View.selection", "link" : "smile\/plot\/vega\/Layer.html#selection(selections:(String,String)*):smile.plot.vega.View", "kind" : "def"}, {"label" : "view", "tail" : "(background: JsObject): View", "member" : "smile.plot.vega.View.view", "link" : "smile\/plot\/vega\/Layer.html#view(background:smile.json.JsObject):smile.plot.vega.View", "kind" : "def"}, {"label" : "opacity", "tail" : "(value: JsValue): View", "member" : "smile.plot.vega.View.opacity", "link" : "smile\/plot\/vega\/Layer.html#opacity(value:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "opacity", "tail" : "(field: JsValue, type: String, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, scale: JsValue, legend: JsValue, condition: JsValue): View", "member" : "smile.plot.vega.View.opacity", "link" : "smile\/plot\/vega\/Layer.html#opacity(field:smile.json.JsValue,type:String,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,scale:smile.json.JsValue,legend:smile.json.JsValue,condition:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "text", "tail" : "(value: JsValue): View", "member" : "smile.plot.vega.View.text", "link" : "smile\/plot\/vega\/Layer.html#text(value:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "text", "tail" : "(field: JsValue, type: String, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, scale: JsValue, legend: JsValue, condition: JsValue): View", "member" : "smile.plot.vega.View.text", "link" : "smile\/plot\/vega\/Layer.html#text(field:smile.json.JsValue,type:String,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,scale:smile.json.JsValue,legend:smile.json.JsValue,condition:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "size", "tail" : "(value: JsValue): View", "member" : "smile.plot.vega.View.size", "link" : "smile\/plot\/vega\/Layer.html#size(value:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "size", "tail" : "(field: JsValue, type: String, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, scale: JsValue, legend: JsValue, condition: JsValue): View", "member" : "smile.plot.vega.View.size", "link" : "smile\/plot\/vega\/Layer.html#size(field:smile.json.JsValue,type:String,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,scale:smile.json.JsValue,legend:smile.json.JsValue,condition:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "shape", "tail" : "(value: JsValue): View", "member" : "smile.plot.vega.View.shape", "link" : "smile\/plot\/vega\/Layer.html#shape(value:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "shape", "tail" : "(field: JsValue, type: String, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, scale: JsValue, legend: JsValue, condition: JsValue): View", "member" : "smile.plot.vega.View.shape", "link" : "smile\/plot\/vega\/Layer.html#shape(field:smile.json.JsValue,type:String,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,scale:smile.json.JsValue,legend:smile.json.JsValue,condition:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "stroke", "tail" : "(value: JsValue): View", "member" : "smile.plot.vega.View.stroke", "link" : "smile\/plot\/vega\/Layer.html#stroke(value:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "stroke", "tail" : "(field: JsValue, type: String, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, scale: JsValue, legend: JsValue, condition: JsValue): View", "member" : "smile.plot.vega.View.stroke", "link" : "smile\/plot\/vega\/Layer.html#stroke(field:smile.json.JsValue,type:String,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,scale:smile.json.JsValue,legend:smile.json.JsValue,condition:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "fill", "tail" : "(value: JsValue): View", "member" : "smile.plot.vega.View.fill", "link" : "smile\/plot\/vega\/Layer.html#fill(value:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "fill", "tail" : "(field: JsValue, type: String, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, scale: JsValue, legend: JsValue, condition: JsValue): View", "member" : "smile.plot.vega.View.fill", "link" : "smile\/plot\/vega\/Layer.html#fill(field:smile.json.JsValue,type:String,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,scale:smile.json.JsValue,legend:smile.json.JsValue,condition:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "angle", "tail" : "(value: JsValue): View", "member" : "smile.plot.vega.View.angle", "link" : "smile\/plot\/vega\/Layer.html#angle(value:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "angle", "tail" : "(field: JsValue, type: String, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, scale: JsValue, legend: JsValue, condition: JsValue): View", "member" : "smile.plot.vega.View.angle", "link" : "smile\/plot\/vega\/Layer.html#angle(field:smile.json.JsValue,type:String,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,scale:smile.json.JsValue,legend:smile.json.JsValue,condition:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "color", "tail" : "(value: JsValue): View", "member" : "smile.plot.vega.View.color", "link" : "smile\/plot\/vega\/Layer.html#color(value:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "color", "tail" : "(field: JsValue, type: String, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, scale: JsValue, legend: JsValue, condition: JsValue): View", "member" : "smile.plot.vega.View.color", "link" : "smile\/plot\/vega\/Layer.html#color(field:smile.json.JsValue,type:String,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,scale:smile.json.JsValue,legend:smile.json.JsValue,condition:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "setPropertyDatum", "tail" : "(prop: String, datum: JsValue): View", "member" : "smile.plot.vega.View.setPropertyDatum", "link" : "smile\/plot\/vega\/Layer.html#setPropertyDatum(prop:String,datum:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "setPropertyValue", "tail" : "(prop: String, value: JsValue): View", "member" : "smile.plot.vega.View.setPropertyValue", "link" : "smile\/plot\/vega\/Layer.html#setPropertyValue(prop:String,value:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "setProperty", "tail" : "(prop: String, field: JsValue, type: String, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, scale: JsValue, legend: JsValue, condition: JsValue): View", "member" : "smile.plot.vega.View.setProperty", "link" : "smile\/plot\/vega\/Layer.html#setProperty(prop:String,field:smile.json.JsValue,type:String,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,scale:smile.json.JsValue,legend:smile.json.JsValue,condition:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "radius2", "tail" : "(field: JsValue, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, title: String): View", "member" : "smile.plot.vega.View.radius2", "link" : "smile\/plot\/vega\/Layer.html#radius2(field:smile.json.JsValue,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,title:String):smile.plot.vega.View", "kind" : "def"}, {"label" : "theta2", "tail" : "(field: JsValue, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, title: String): View", "member" : "smile.plot.vega.View.theta2", "link" : "smile\/plot\/vega\/Layer.html#theta2(field:smile.json.JsValue,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,title:String):smile.plot.vega.View", "kind" : "def"}, {"label" : "radius", "tail" : "(field: JsValue, type: String, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, title: String, scale: JsValue, sort: Option[String], stack: JsValue): View", "member" : "smile.plot.vega.View.radius", "link" : "smile\/plot\/vega\/Layer.html#radius(field:smile.json.JsValue,type:String,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,title:String,scale:smile.json.JsValue,sort:Option[String],stack:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "theta", "tail" : "(field: JsValue, type: String, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, title: String, scale: JsValue, sort: Option[String], stack: JsValue): View", "member" : "smile.plot.vega.View.theta", "link" : "smile\/plot\/vega\/Layer.html#theta(field:smile.json.JsValue,type:String,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,title:String,scale:smile.json.JsValue,sort:Option[String],stack:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "latitude2", "tail" : "(field: JsValue, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, title: String): View", "member" : "smile.plot.vega.View.latitude2", "link" : "smile\/plot\/vega\/Layer.html#latitude2(field:smile.json.JsValue,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,title:String):smile.plot.vega.View", "kind" : "def"}, {"label" : "longitude2", "tail" : "(field: JsValue, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, title: String): View", "member" : "smile.plot.vega.View.longitude2", "link" : "smile\/plot\/vega\/Layer.html#longitude2(field:smile.json.JsValue,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,title:String):smile.plot.vega.View", "kind" : "def"}, {"label" : "latitude", "tail" : "(field: JsValue, type: String, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, title: String): View", "member" : "smile.plot.vega.View.latitude", "link" : "smile\/plot\/vega\/Layer.html#latitude(field:smile.json.JsValue,type:String,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,title:String):smile.plot.vega.View", "kind" : "def"}, {"label" : "longitude", "tail" : "(field: JsValue, type: String, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, title: String): View", "member" : "smile.plot.vega.View.longitude", "link" : "smile\/plot\/vega\/Layer.html#longitude(field:smile.json.JsValue,type:String,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,title:String):smile.plot.vega.View", "kind" : "def"}, {"label" : "yError2", "tail" : "(field: JsValue, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, title: String): View", "member" : "smile.plot.vega.View.yError2", "link" : "smile\/plot\/vega\/Layer.html#yError2(field:smile.json.JsValue,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,title:String):smile.plot.vega.View", "kind" : "def"}, {"label" : "xError2", "tail" : "(field: JsValue, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, title: String): View", "member" : "smile.plot.vega.View.xError2", "link" : "smile\/plot\/vega\/Layer.html#xError2(field:smile.json.JsValue,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,title:String):smile.plot.vega.View", "kind" : "def"}, {"label" : "yError", "tail" : "(field: JsValue, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, title: String): View", "member" : "smile.plot.vega.View.yError", "link" : "smile\/plot\/vega\/Layer.html#yError(field:smile.json.JsValue,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,title:String):smile.plot.vega.View", "kind" : "def"}, {"label" : "xError", "tail" : "(field: JsValue, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, title: String): View", "member" : "smile.plot.vega.View.xError", "link" : "smile\/plot\/vega\/Layer.html#xError(field:smile.json.JsValue,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,title:String):smile.plot.vega.View", "kind" : "def"}, {"label" : "y2", "tail" : "(field: JsValue, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, title: String): View", "member" : "smile.plot.vega.View.y2", "link" : "smile\/plot\/vega\/Layer.html#y2(field:smile.json.JsValue,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,title:String):smile.plot.vega.View", "kind" : "def"}, {"label" : "x2", "tail" : "(field: JsValue, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, title: String): View", "member" : "smile.plot.vega.View.x2", "link" : "smile\/plot\/vega\/Layer.html#x2(field:smile.json.JsValue,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,title:String):smile.plot.vega.View", "kind" : "def"}, {"label" : "y", "tail" : "(field: JsValue, type: String, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, title: String, scale: JsValue, axis: JsValue, sort: Option[String], band: Option[Double], impute: JsValue, stack: JsValue): View", "member" : "smile.plot.vega.View.y", "link" : "smile\/plot\/vega\/Layer.html#y(field:smile.json.JsValue,type:String,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,title:String,scale:smile.json.JsValue,axis:smile.json.JsValue,sort:Option[String],band:Option[Double],impute:smile.json.JsValue,stack:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "x", "tail" : "(field: JsValue, type: String, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, title: String, scale: JsValue, axis: JsValue, sort: Option[String], band: Option[Double], impute: JsValue, stack: JsValue): View", "member" : "smile.plot.vega.View.x", "link" : "smile\/plot\/vega\/Layer.html#x(field:smile.json.JsValue,type:String,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,title:String,scale:smile.json.JsValue,axis:smile.json.JsValue,sort:Option[String],band:Option[Double],impute:smile.json.JsValue,stack:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "y", "tail" : "(datum: JsValue): View", "member" : "smile.plot.vega.View.y", "link" : "smile\/plot\/vega\/Layer.html#y(datum:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "x", "tail" : "(datum: JsValue): View", "member" : "smile.plot.vega.View.x", "link" : "smile\/plot\/vega\/Layer.html#x(datum:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "encode", "tail" : "(x: String, y: String, color: Option[(String, String)]): View", "member" : "smile.plot.vega.View.encode", "link" : "smile\/plot\/vega\/Layer.html#encode(x:String,y:String,color:Option[(String,String)]):smile.plot.vega.View", "kind" : "def"}, {"label" : "mark", "tail" : "(mark: String): View", "member" : "smile.plot.vega.View.mark", "link" : "smile\/plot\/vega\/Layer.html#mark(mark:String):smile.plot.vega.View", "kind" : "def"}, {"label" : "mark", "tail" : "(mark: JsObject): View", "member" : "smile.plot.vega.View.mark", "link" : "smile\/plot\/vega\/Layer.html#mark(mark:smile.json.JsObject):smile.plot.vega.View", "kind" : "def"}, {"label" : "heightStep", "tail" : "(step: Int): View", "member" : "smile.plot.vega.View.heightStep", "link" : "smile\/plot\/vega\/Layer.html#heightStep(step:Int):smile.plot.vega.View", "kind" : "def"}, {"label" : "widthStep", "tail" : "(step: Int): View", "member" : "smile.plot.vega.View.widthStep", "link" : "smile\/plot\/vega\/Layer.html#widthStep(step:Int):smile.plot.vega.View", "kind" : "def"}, {"label" : "height", "tail" : "(height: String): View", "member" : "smile.plot.vega.View.height", "link" : "smile\/plot\/vega\/Layer.html#height(height:String):smile.plot.vega.View", "kind" : "def"}, {"label" : "width", "tail" : "(width: String): View", "member" : "smile.plot.vega.View.width", "link" : "smile\/plot\/vega\/Layer.html#width(width:String):smile.plot.vega.View", "kind" : "def"}, {"label" : "height", "tail" : "(height: Int): View", "member" : "smile.plot.vega.View.height", "link" : "smile\/plot\/vega\/Layer.html#height(height:Int):smile.plot.vega.View", "kind" : "def"}, {"label" : "width", "tail" : "(width: Int): View", "member" : "smile.plot.vega.View.width", "link" : "smile\/plot\/vega\/Layer.html#width(width:Int):smile.plot.vega.View", "kind" : "def"}, {"label" : "iframe", "tail" : "(id: String): String", "member" : "smile.plot.vega.VegaLite.iframe", "link" : "smile\/plot\/vega\/Layer.html#iframe(id:String):String", "kind" : "def"}, {"label" : "embed", "tail" : "(): String", "member" : "smile.plot.vega.VegaLite.embed", "link" : "smile\/plot\/vega\/Layer.html#embed:String", "kind" : "def"}, {"label" : "transform", "tail" : "(transforms: JsObject*): VegaLite", "member" : "smile.plot.vega.VegaLite.transform", "link" : "smile\/plot\/vega\/Layer.html#transform(transforms:smile.json.JsObject*):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "transform", "tail" : "(transforms: JsArray): VegaLite", "member" : "smile.plot.vega.VegaLite.transform", "link" : "smile\/plot\/vega\/Layer.html#transform(transforms:smile.json.JsArray):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "data", "tail" : "(url: String, format: JsValue): VegaLite", "member" : "smile.plot.vega.VegaLite.data", "link" : "smile\/plot\/vega\/Layer.html#data(url:String,format:smile.json.JsValue):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "data", "tail" : "(df: DataFrame): VegaLite", "member" : "smile.plot.vega.VegaLite.data", "link" : "smile\/plot\/vega\/Layer.html#data(df:smile.data.DataFrame):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "data", "tail" : "(rows: JsObject*): VegaLite", "member" : "smile.plot.vega.VegaLite.data", "link" : "smile\/plot\/vega\/Layer.html#data(rows:smile.json.JsObject*):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "data", "tail" : "(json: JsArray): VegaLite", "member" : "smile.plot.vega.VegaLite.data", "link" : "smile\/plot\/vega\/Layer.html#data(json:smile.json.JsArray):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "title", "tail" : "(title: String): VegaLite", "member" : "smile.plot.vega.VegaLite.title", "link" : "smile\/plot\/vega\/Layer.html#title(title:String):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "description", "tail" : "(description: String): VegaLite", "member" : "smile.plot.vega.VegaLite.description", "link" : "smile\/plot\/vega\/Layer.html#description(description:String):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "name", "tail" : "(name: String): VegaLite", "member" : "smile.plot.vega.VegaLite.name", "link" : "smile\/plot\/vega\/Layer.html#name(name:String):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "usermeta", "tail" : "(data: JsValue): VegaLite", "member" : "smile.plot.vega.VegaLite.usermeta", "link" : "smile\/plot\/vega\/Layer.html#usermeta(data:smile.json.JsValue):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "config", "tail" : "(properties: JsObject): VegaLite", "member" : "smile.plot.vega.VegaLite.config", "link" : "smile\/plot\/vega\/Layer.html#config(properties:smile.json.JsObject):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "autosize", "tail" : "(type: String, resize: Boolean, contains: String): VegaLite", "member" : "smile.plot.vega.VegaLite.autosize", "link" : "smile\/plot\/vega\/Layer.html#autosize(type:String,resize:Boolean,contains:String):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "padding", "tail" : "(left: Int, top: Int, right: Int, bottom: Int): VegaLite", "member" : "smile.plot.vega.VegaLite.padding", "link" : "smile\/plot\/vega\/Layer.html#padding(left:Int,top:Int,right:Int,bottom:Int):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "padding", "tail" : "(size: Int): VegaLite", "member" : "smile.plot.vega.VegaLite.padding", "link" : "smile\/plot\/vega\/Layer.html#padding(size:Int):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "background", "tail" : "(color: String): VegaLite", "member" : "smile.plot.vega.VegaLite.background", "link" : "smile\/plot\/vega\/Layer.html#background(color:String):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.plot.vega.VegaLite.toString", "link" : "smile\/plot\/vega\/Layer.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/plot\/vega\/Layer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/plot\/vega\/Layer.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/plot\/vega\/Layer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/plot\/vega\/Layer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/plot\/vega\/Layer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/plot\/vega\/Layer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/plot\/vega\/Layer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/vega\/Layer.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/vega\/Layer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/vega\/Layer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/plot\/vega\/Layer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/plot\/vega\/Layer.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/plot\/vega\/Layer.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/plot\/vega\/Layer.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/plot\/vega\/Layer.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/plot\/vega\/Layer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/plot\/vega\/Layer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/plot\/vega\/Layer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "spec", "tail" : ": JsObject", "member" : "smile.plot.vega.VegaLite.spec", "link" : "smile\/plot\/vega\/Layer.html#spec:smile.json.JsObject", "kind" : "abstract val"}], "shortDescription" : "To superimpose one chart on top of another."}, {"name" : "smile.plot.vega.VegaLite", "object" : "smile\/plot\/vega\/VegaLite$.html", "members_object" : [{"label" : "splom", "tail" : "(df: DataFrame, color: String): ViewLayoutComposition", "member" : "smile.plot.vega.VegaLite.splom", "link" : "smile\/plot\/vega\/VegaLite$.html#splom(df:smile.data.DataFrame,color:String):smile.plot.vega.ViewLayoutComposition", "kind" : "def"}, {"label" : "repeat", "tail" : "(url: String, format: JsValue, view: VegaLite, row: Seq[String], column: Seq[String]): ViewLayoutComposition", "member" : "smile.plot.vega.VegaLite.repeat", "link" : "smile\/plot\/vega\/VegaLite$.html#repeat(url:String,format:smile.json.JsValue,view:smile.plot.vega.VegaLite,row:Seq[String],column:Seq[String]):smile.plot.vega.ViewLayoutComposition", "kind" : "def"}, {"label" : "repeat", "tail" : "(df: DataFrame, view: VegaLite, row: Seq[String], column: Seq[String]): ViewLayoutComposition", "member" : "smile.plot.vega.VegaLite.repeat", "link" : "smile\/plot\/vega\/VegaLite$.html#repeat(df:smile.data.DataFrame,view:smile.plot.vega.VegaLite,row:Seq[String],column:Seq[String]):smile.plot.vega.ViewLayoutComposition", "kind" : "def"}, {"label" : "repeat", "tail" : "(json: JsArray, view: VegaLite, row: Seq[String], column: Seq[String]): ViewLayoutComposition", "member" : "smile.plot.vega.VegaLite.repeat", "link" : "smile\/plot\/vega\/VegaLite$.html#repeat(json:smile.json.JsArray,view:smile.plot.vega.VegaLite,row:Seq[String],column:Seq[String]):smile.plot.vega.ViewLayoutComposition", "kind" : "def"}, {"label" : "repeat", "tail" : "(url: String, format: JsValue, view: VegaLite, fields: String*): ViewLayoutComposition", "member" : "smile.plot.vega.VegaLite.repeat", "link" : "smile\/plot\/vega\/VegaLite$.html#repeat(url:String,format:smile.json.JsValue,view:smile.plot.vega.VegaLite,fields:String*):smile.plot.vega.ViewLayoutComposition", "kind" : "def"}, {"label" : "repeat", "tail" : "(df: DataFrame, view: VegaLite, fields: String*): ViewLayoutComposition", "member" : "smile.plot.vega.VegaLite.repeat", "link" : "smile\/plot\/vega\/VegaLite$.html#repeat(df:smile.data.DataFrame,view:smile.plot.vega.VegaLite,fields:String*):smile.plot.vega.ViewLayoutComposition", "kind" : "def"}, {"label" : "repeat", "tail" : "(json: JsArray, view: VegaLite, fields: String*): ViewLayoutComposition", "member" : "smile.plot.vega.VegaLite.repeat", "link" : "smile\/plot\/vega\/VegaLite$.html#repeat(json:smile.json.JsArray,view:smile.plot.vega.VegaLite,fields:String*):smile.plot.vega.ViewLayoutComposition", "kind" : "def"}, {"label" : "concat", "tail" : "(url: String, format: JsValue, columns: Int, views: VegaLite*): ViewLayoutComposition", "member" : "smile.plot.vega.VegaLite.concat", "link" : "smile\/plot\/vega\/VegaLite$.html#concat(url:String,format:smile.json.JsValue,columns:Int,views:smile.plot.vega.VegaLite*):smile.plot.vega.ViewLayoutComposition", "kind" : "def"}, {"label" : "concat", "tail" : "(df: DataFrame, columns: Int, views: VegaLite*): ViewLayoutComposition", "member" : "smile.plot.vega.VegaLite.concat", "link" : "smile\/plot\/vega\/VegaLite$.html#concat(df:smile.data.DataFrame,columns:Int,views:smile.plot.vega.VegaLite*):smile.plot.vega.ViewLayoutComposition", "kind" : "def"}, {"label" : "concat", "tail" : "(json: JsArray, columns: Int, views: VegaLite*): ViewLayoutComposition", "member" : "smile.plot.vega.VegaLite.concat", "link" : "smile\/plot\/vega\/VegaLite$.html#concat(json:smile.json.JsArray,columns:Int,views:smile.plot.vega.VegaLite*):smile.plot.vega.ViewLayoutComposition", "kind" : "def"}, {"label" : "concat", "tail" : "(columns: Int, views: VegaLite*): ViewLayoutComposition", "member" : "smile.plot.vega.VegaLite.concat", "link" : "smile\/plot\/vega\/VegaLite$.html#concat(columns:Int,views:smile.plot.vega.VegaLite*):smile.plot.vega.ViewLayoutComposition", "kind" : "def"}, {"label" : "vconcat", "tail" : "(url: String, format: JsValue, views: VegaLite*): ViewLayoutComposition", "member" : "smile.plot.vega.VegaLite.vconcat", "link" : "smile\/plot\/vega\/VegaLite$.html#vconcat(url:String,format:smile.json.JsValue,views:smile.plot.vega.VegaLite*):smile.plot.vega.ViewLayoutComposition", "kind" : "def"}, {"label" : "vconcat", "tail" : "(df: DataFrame, views: VegaLite*): ViewLayoutComposition", "member" : "smile.plot.vega.VegaLite.vconcat", "link" : "smile\/plot\/vega\/VegaLite$.html#vconcat(df:smile.data.DataFrame,views:smile.plot.vega.VegaLite*):smile.plot.vega.ViewLayoutComposition", "kind" : "def"}, {"label" : "vconcat", "tail" : "(json: JsArray, views: VegaLite*): ViewLayoutComposition", "member" : "smile.plot.vega.VegaLite.vconcat", "link" : "smile\/plot\/vega\/VegaLite$.html#vconcat(json:smile.json.JsArray,views:smile.plot.vega.VegaLite*):smile.plot.vega.ViewLayoutComposition", "kind" : "def"}, {"label" : "vconcat", "tail" : "(views: VegaLite*): ViewLayoutComposition", "member" : "smile.plot.vega.VegaLite.vconcat", "link" : "smile\/plot\/vega\/VegaLite$.html#vconcat(views:smile.plot.vega.VegaLite*):smile.plot.vega.ViewLayoutComposition", "kind" : "def"}, {"label" : "hconcat", "tail" : "(url: String, format: JsValue, views: VegaLite*): ViewLayoutComposition", "member" : "smile.plot.vega.VegaLite.hconcat", "link" : "smile\/plot\/vega\/VegaLite$.html#hconcat(url:String,format:smile.json.JsValue,views:smile.plot.vega.VegaLite*):smile.plot.vega.ViewLayoutComposition", "kind" : "def"}, {"label" : "hconcat", "tail" : "(df: DataFrame, views: VegaLite*): ViewLayoutComposition", "member" : "smile.plot.vega.VegaLite.hconcat", "link" : "smile\/plot\/vega\/VegaLite$.html#hconcat(df:smile.data.DataFrame,views:smile.plot.vega.VegaLite*):smile.plot.vega.ViewLayoutComposition", "kind" : "def"}, {"label" : "hconcat", "tail" : "(json: JsArray, views: VegaLite*): ViewLayoutComposition", "member" : "smile.plot.vega.VegaLite.hconcat", "link" : "smile\/plot\/vega\/VegaLite$.html#hconcat(json:smile.json.JsArray,views:smile.plot.vega.VegaLite*):smile.plot.vega.ViewLayoutComposition", "kind" : "def"}, {"label" : "hconcat", "tail" : "(views: VegaLite*): ViewLayoutComposition", "member" : "smile.plot.vega.VegaLite.hconcat", "link" : "smile\/plot\/vega\/VegaLite$.html#hconcat(views:smile.plot.vega.VegaLite*):smile.plot.vega.ViewLayoutComposition", "kind" : "def"}, {"label" : "layer", "tail" : "(url: String, format: JsValue, layers: View*): Layer", "member" : "smile.plot.vega.VegaLite.layer", "link" : "smile\/plot\/vega\/VegaLite$.html#layer(url:String,format:smile.json.JsValue,layers:smile.plot.vega.View*):smile.plot.vega.Layer", "kind" : "def"}, {"label" : "layer", "tail" : "(df: DataFrame, layers: View*): Layer", "member" : "smile.plot.vega.VegaLite.layer", "link" : "smile\/plot\/vega\/VegaLite$.html#layer(df:smile.data.DataFrame,layers:smile.plot.vega.View*):smile.plot.vega.Layer", "kind" : "def"}, {"label" : "layer", "tail" : "(json: JsArray, layers: View*): Layer", "member" : "smile.plot.vega.VegaLite.layer", "link" : "smile\/plot\/vega\/VegaLite$.html#layer(json:smile.json.JsArray,layers:smile.plot.vega.View*):smile.plot.vega.Layer", "kind" : "def"}, {"label" : "layer", "tail" : "(layers: View*): Layer", "member" : "smile.plot.vega.VegaLite.layer", "link" : "smile\/plot\/vega\/VegaLite$.html#layer(layers:smile.plot.vega.View*):smile.plot.vega.Layer", "kind" : "def"}, {"label" : "facet", "tail" : "(url: String, format: JsValue): Facet", "member" : "smile.plot.vega.VegaLite.facet", "link" : "smile\/plot\/vega\/VegaLite$.html#facet(url:String,format:smile.json.JsValue):smile.plot.vega.Facet", "kind" : "def"}, {"label" : "facet", "tail" : "(df: DataFrame): Facet", "member" : "smile.plot.vega.VegaLite.facet", "link" : "smile\/plot\/vega\/VegaLite$.html#facet(df:smile.data.DataFrame):smile.plot.vega.Facet", "kind" : "def"}, {"label" : "facet", "tail" : "(json: JsArray): Facet", "member" : "smile.plot.vega.VegaLite.facet", "link" : "smile\/plot\/vega\/VegaLite$.html#facet(json:smile.json.JsArray):smile.plot.vega.Facet", "kind" : "def"}, {"label" : "facet", "tail" : "(rows: JsObject*): Facet", "member" : "smile.plot.vega.VegaLite.facet", "link" : "smile\/plot\/vega\/VegaLite$.html#facet(rows:smile.json.JsObject*):smile.plot.vega.Facet", "kind" : "def"}, {"label" : "view", "tail" : "(init: JsObject): View", "member" : "smile.plot.vega.VegaLite.view", "link" : "smile\/plot\/vega\/VegaLite$.html#view(init:smile.json.JsObject):smile.plot.vega.View", "kind" : "def"}, {"label" : "apply", "tail" : "(url: String, format: JsValue): View", "member" : "smile.plot.vega.VegaLite.apply", "link" : "smile\/plot\/vega\/VegaLite$.html#apply(url:String,format:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "apply", "tail" : "(df: DataFrame): View", "member" : "smile.plot.vega.VegaLite.apply", "link" : "smile\/plot\/vega\/VegaLite$.html#apply(df:smile.data.DataFrame):smile.plot.vega.View", "kind" : "def"}, {"label" : "apply", "tail" : "(json: JsArray): View", "member" : "smile.plot.vega.VegaLite.apply", "link" : "smile\/plot\/vega\/VegaLite$.html#apply(json:smile.json.JsArray):smile.plot.vega.View", "kind" : "def"}, {"label" : "apply", "tail" : "(rows: JsObject*): View", "member" : "smile.plot.vega.VegaLite.apply", "link" : "smile\/plot\/vega\/VegaLite$.html#apply(rows:smile.json.JsObject*):smile.plot.vega.View", "kind" : "def"}, {"label" : "mime", "tail" : ": String", "member" : "smile.plot.vega.VegaLite.mime", "link" : "smile\/plot\/vega\/VegaLite$.html#mime:String", "kind" : "val"}, {"label" : "$schema", "tail" : ": String", "member" : "smile.plot.vega.VegaLite.$schema", "link" : "smile\/plot\/vega\/VegaLite$.html#$schema:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/plot\/vega\/VegaLite$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/plot\/vega\/VegaLite$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/plot\/vega\/VegaLite$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/plot\/vega\/VegaLite$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/plot\/vega\/VegaLite$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/plot\/vega\/VegaLite$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/plot\/vega\/VegaLite$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/vega\/VegaLite$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/vega\/VegaLite$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/vega\/VegaLite$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/plot\/vega\/VegaLite$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/plot\/vega\/VegaLite$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/plot\/vega\/VegaLite$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/plot\/vega\/VegaLite$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/plot\/vega\/VegaLite$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/plot\/vega\/VegaLite$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/plot\/vega\/VegaLite$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/plot\/vega\/VegaLite$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/plot\/vega\/VegaLite$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "smile\/plot\/vega\/VegaLite.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "smile\/plot\/vega\/VegaLite.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/plot\/vega\/VegaLite.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (VegaLite) => Boolean, msg: => Any): VegaLite", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/plot\/vega\/VegaLite.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (VegaLite) => Boolean): VegaLite", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/plot\/vega\/VegaLite.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): VegaLite", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/plot\/vega\/VegaLite.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): VegaLite", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/plot\/vega\/VegaLite.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (VegaLite, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/plot\/vega\/VegaLite.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (VegaLite, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/plot\/vega\/VegaLite.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "iframe", "tail" : "(id: String): String", "member" : "smile.plot.vega.VegaLite.iframe", "link" : "smile\/plot\/vega\/VegaLite.html#iframe(id:String):String", "kind" : "def"}, {"label" : "embed", "tail" : "(): String", "member" : "smile.plot.vega.VegaLite.embed", "link" : "smile\/plot\/vega\/VegaLite.html#embed:String", "kind" : "def"}, {"label" : "transform", "tail" : "(transforms: JsObject*): VegaLite", "member" : "smile.plot.vega.VegaLite.transform", "link" : "smile\/plot\/vega\/VegaLite.html#transform(transforms:smile.json.JsObject*):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "transform", "tail" : "(transforms: JsArray): VegaLite", "member" : "smile.plot.vega.VegaLite.transform", "link" : "smile\/plot\/vega\/VegaLite.html#transform(transforms:smile.json.JsArray):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "data", "tail" : "(url: String, format: JsValue): VegaLite", "member" : "smile.plot.vega.VegaLite.data", "link" : "smile\/plot\/vega\/VegaLite.html#data(url:String,format:smile.json.JsValue):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "data", "tail" : "(df: DataFrame): VegaLite", "member" : "smile.plot.vega.VegaLite.data", "link" : "smile\/plot\/vega\/VegaLite.html#data(df:smile.data.DataFrame):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "data", "tail" : "(rows: JsObject*): VegaLite", "member" : "smile.plot.vega.VegaLite.data", "link" : "smile\/plot\/vega\/VegaLite.html#data(rows:smile.json.JsObject*):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "data", "tail" : "(json: JsArray): VegaLite", "member" : "smile.plot.vega.VegaLite.data", "link" : "smile\/plot\/vega\/VegaLite.html#data(json:smile.json.JsArray):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "title", "tail" : "(title: String): VegaLite", "member" : "smile.plot.vega.VegaLite.title", "link" : "smile\/plot\/vega\/VegaLite.html#title(title:String):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "description", "tail" : "(description: String): VegaLite", "member" : "smile.plot.vega.VegaLite.description", "link" : "smile\/plot\/vega\/VegaLite.html#description(description:String):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "name", "tail" : "(name: String): VegaLite", "member" : "smile.plot.vega.VegaLite.name", "link" : "smile\/plot\/vega\/VegaLite.html#name(name:String):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "usermeta", "tail" : "(data: JsValue): VegaLite", "member" : "smile.plot.vega.VegaLite.usermeta", "link" : "smile\/plot\/vega\/VegaLite.html#usermeta(data:smile.json.JsValue):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "config", "tail" : "(properties: JsObject): VegaLite", "member" : "smile.plot.vega.VegaLite.config", "link" : "smile\/plot\/vega\/VegaLite.html#config(properties:smile.json.JsObject):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "autosize", "tail" : "(type: String, resize: Boolean, contains: String): VegaLite", "member" : "smile.plot.vega.VegaLite.autosize", "link" : "smile\/plot\/vega\/VegaLite.html#autosize(type:String,resize:Boolean,contains:String):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "padding", "tail" : "(left: Int, top: Int, right: Int, bottom: Int): VegaLite", "member" : "smile.plot.vega.VegaLite.padding", "link" : "smile\/plot\/vega\/VegaLite.html#padding(left:Int,top:Int,right:Int,bottom:Int):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "padding", "tail" : "(size: Int): VegaLite", "member" : "smile.plot.vega.VegaLite.padding", "link" : "smile\/plot\/vega\/VegaLite.html#padding(size:Int):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "background", "tail" : "(color: String): VegaLite", "member" : "smile.plot.vega.VegaLite.background", "link" : "smile\/plot\/vega\/VegaLite.html#background(color:String):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.plot.vega.VegaLite.toString", "link" : "smile\/plot\/vega\/VegaLite.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/plot\/vega\/VegaLite.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/plot\/vega\/VegaLite.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/plot\/vega\/VegaLite.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/plot\/vega\/VegaLite.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/plot\/vega\/VegaLite.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/plot\/vega\/VegaLite.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/plot\/vega\/VegaLite.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/vega\/VegaLite.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/vega\/VegaLite.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/vega\/VegaLite.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/plot\/vega\/VegaLite.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/plot\/vega\/VegaLite.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/plot\/vega\/VegaLite.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/plot\/vega\/VegaLite.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/plot\/vega\/VegaLite.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/plot\/vega\/VegaLite.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/plot\/vega\/VegaLite.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/plot\/vega\/VegaLite.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "spec", "tail" : ": JsObject", "member" : "smile.plot.vega.VegaLite.spec", "link" : "smile\/plot\/vega\/VegaLite.html#spec:smile.json.JsObject", "kind" : "abstract val"}], "shortDescription" : "Vega-Lite specifications are JSON objects that describe a diverse rangeof interactive visualizations."}, {"name" : "smile.plot.vega.View", "object" : "smile\/plot\/vega\/View$.html", "members_object" : [{"label" : "markPropField", "tail" : "(field: JsValue, type: String, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, scale: JsValue, legend: JsValue, condition: JsValue): JsObject", "member" : "smile.plot.vega.View.markPropField", "link" : "smile\/plot\/vega\/View$.html#markPropField(field:smile.json.JsValue,type:String,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,scale:smile.json.JsValue,legend:smile.json.JsValue,condition:smile.json.JsValue):smile.json.JsObject", "kind" : "def"}, {"label" : "polarField", "tail" : "(field: JsValue, type: String, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, title: String, scale: JsValue, sort: Option[String], stack: JsValue): JsObject", "member" : "smile.plot.vega.View.polarField", "link" : "smile\/plot\/vega\/View$.html#polarField(field:smile.json.JsValue,type:String,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,title:String,scale:smile.json.JsValue,sort:Option[String],stack:smile.json.JsValue):smile.json.JsObject", "kind" : "def"}, {"label" : "positionField", "tail" : "(field: JsValue, type: String, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, title: String, scale: JsValue, axis: JsValue, sort: Option[String], band: Option[Double], impute: JsValue, stack: JsValue): JsObject", "member" : "smile.plot.vega.View.positionField", "link" : "smile\/plot\/vega\/View$.html#positionField(field:smile.json.JsValue,type:String,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,title:String,scale:smile.json.JsValue,axis:smile.json.JsValue,sort:Option[String],band:Option[Double],impute:smile.json.JsValue,stack:smile.json.JsValue):smile.json.JsObject", "kind" : "def"}, {"label" : "field", "tail" : "(field: JsValue, type: String, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, title: String): JsObject", "member" : "smile.plot.vega.View.field", "link" : "smile\/plot\/vega\/View$.html#field(field:smile.json.JsValue,type:String,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,title:String):smile.json.JsObject", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/plot\/vega\/View$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/plot\/vega\/View$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/plot\/vega\/View$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/plot\/vega\/View$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/plot\/vega\/View$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/plot\/vega\/View$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/plot\/vega\/View$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/vega\/View$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/vega\/View$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/vega\/View$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/plot\/vega\/View$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/plot\/vega\/View$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/plot\/vega\/View$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/plot\/vega\/View$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/plot\/vega\/View$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/plot\/vega\/View$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/plot\/vega\/View$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/plot\/vega\/View$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/plot\/vega\/View$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "smile\/plot\/vega\/View.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "smile\/plot\/vega\/View.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/plot\/vega\/View.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (View) => Boolean, msg: => Any): View", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/plot\/vega\/View.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (View) => Boolean): View", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/plot\/vega\/View.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): View", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/plot\/vega\/View.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): View", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/plot\/vega\/View.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (View, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/plot\/vega\/View.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (View, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/plot\/vega\/View.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "projection", "tail" : "(projection: JsObject): View", "member" : "smile.plot.vega.View.projection", "link" : "smile\/plot\/vega\/View.html#projection(projection:smile.json.JsObject):smile.plot.vega.View", "kind" : "def"}, {"label" : "selection", "tail" : "(selections: (String, String)*): View", "member" : "smile.plot.vega.View.selection", "link" : "smile\/plot\/vega\/View.html#selection(selections:(String,String)*):smile.plot.vega.View", "kind" : "def"}, {"label" : "view", "tail" : "(background: JsObject): View", "member" : "smile.plot.vega.View.view", "link" : "smile\/plot\/vega\/View.html#view(background:smile.json.JsObject):smile.plot.vega.View", "kind" : "def"}, {"label" : "opacity", "tail" : "(value: JsValue): View", "member" : "smile.plot.vega.View.opacity", "link" : "smile\/plot\/vega\/View.html#opacity(value:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "opacity", "tail" : "(field: JsValue, type: String, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, scale: JsValue, legend: JsValue, condition: JsValue): View", "member" : "smile.plot.vega.View.opacity", "link" : "smile\/plot\/vega\/View.html#opacity(field:smile.json.JsValue,type:String,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,scale:smile.json.JsValue,legend:smile.json.JsValue,condition:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "text", "tail" : "(value: JsValue): View", "member" : "smile.plot.vega.View.text", "link" : "smile\/plot\/vega\/View.html#text(value:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "text", "tail" : "(field: JsValue, type: String, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, scale: JsValue, legend: JsValue, condition: JsValue): View", "member" : "smile.plot.vega.View.text", "link" : "smile\/plot\/vega\/View.html#text(field:smile.json.JsValue,type:String,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,scale:smile.json.JsValue,legend:smile.json.JsValue,condition:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "size", "tail" : "(value: JsValue): View", "member" : "smile.plot.vega.View.size", "link" : "smile\/plot\/vega\/View.html#size(value:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "size", "tail" : "(field: JsValue, type: String, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, scale: JsValue, legend: JsValue, condition: JsValue): View", "member" : "smile.plot.vega.View.size", "link" : "smile\/plot\/vega\/View.html#size(field:smile.json.JsValue,type:String,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,scale:smile.json.JsValue,legend:smile.json.JsValue,condition:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "shape", "tail" : "(value: JsValue): View", "member" : "smile.plot.vega.View.shape", "link" : "smile\/plot\/vega\/View.html#shape(value:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "shape", "tail" : "(field: JsValue, type: String, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, scale: JsValue, legend: JsValue, condition: JsValue): View", "member" : "smile.plot.vega.View.shape", "link" : "smile\/plot\/vega\/View.html#shape(field:smile.json.JsValue,type:String,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,scale:smile.json.JsValue,legend:smile.json.JsValue,condition:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "stroke", "tail" : "(value: JsValue): View", "member" : "smile.plot.vega.View.stroke", "link" : "smile\/plot\/vega\/View.html#stroke(value:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "stroke", "tail" : "(field: JsValue, type: String, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, scale: JsValue, legend: JsValue, condition: JsValue): View", "member" : "smile.plot.vega.View.stroke", "link" : "smile\/plot\/vega\/View.html#stroke(field:smile.json.JsValue,type:String,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,scale:smile.json.JsValue,legend:smile.json.JsValue,condition:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "fill", "tail" : "(value: JsValue): View", "member" : "smile.plot.vega.View.fill", "link" : "smile\/plot\/vega\/View.html#fill(value:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "fill", "tail" : "(field: JsValue, type: String, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, scale: JsValue, legend: JsValue, condition: JsValue): View", "member" : "smile.plot.vega.View.fill", "link" : "smile\/plot\/vega\/View.html#fill(field:smile.json.JsValue,type:String,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,scale:smile.json.JsValue,legend:smile.json.JsValue,condition:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "angle", "tail" : "(value: JsValue): View", "member" : "smile.plot.vega.View.angle", "link" : "smile\/plot\/vega\/View.html#angle(value:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "angle", "tail" : "(field: JsValue, type: String, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, scale: JsValue, legend: JsValue, condition: JsValue): View", "member" : "smile.plot.vega.View.angle", "link" : "smile\/plot\/vega\/View.html#angle(field:smile.json.JsValue,type:String,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,scale:smile.json.JsValue,legend:smile.json.JsValue,condition:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "color", "tail" : "(value: JsValue): View", "member" : "smile.plot.vega.View.color", "link" : "smile\/plot\/vega\/View.html#color(value:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "color", "tail" : "(field: JsValue, type: String, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, scale: JsValue, legend: JsValue, condition: JsValue): View", "member" : "smile.plot.vega.View.color", "link" : "smile\/plot\/vega\/View.html#color(field:smile.json.JsValue,type:String,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,scale:smile.json.JsValue,legend:smile.json.JsValue,condition:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "setPropertyDatum", "tail" : "(prop: String, datum: JsValue): View", "member" : "smile.plot.vega.View.setPropertyDatum", "link" : "smile\/plot\/vega\/View.html#setPropertyDatum(prop:String,datum:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "setPropertyValue", "tail" : "(prop: String, value: JsValue): View", "member" : "smile.plot.vega.View.setPropertyValue", "link" : "smile\/plot\/vega\/View.html#setPropertyValue(prop:String,value:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "setProperty", "tail" : "(prop: String, field: JsValue, type: String, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, scale: JsValue, legend: JsValue, condition: JsValue): View", "member" : "smile.plot.vega.View.setProperty", "link" : "smile\/plot\/vega\/View.html#setProperty(prop:String,field:smile.json.JsValue,type:String,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,scale:smile.json.JsValue,legend:smile.json.JsValue,condition:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "radius2", "tail" : "(field: JsValue, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, title: String): View", "member" : "smile.plot.vega.View.radius2", "link" : "smile\/plot\/vega\/View.html#radius2(field:smile.json.JsValue,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,title:String):smile.plot.vega.View", "kind" : "def"}, {"label" : "theta2", "tail" : "(field: JsValue, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, title: String): View", "member" : "smile.plot.vega.View.theta2", "link" : "smile\/plot\/vega\/View.html#theta2(field:smile.json.JsValue,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,title:String):smile.plot.vega.View", "kind" : "def"}, {"label" : "radius", "tail" : "(field: JsValue, type: String, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, title: String, scale: JsValue, sort: Option[String], stack: JsValue): View", "member" : "smile.plot.vega.View.radius", "link" : "smile\/plot\/vega\/View.html#radius(field:smile.json.JsValue,type:String,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,title:String,scale:smile.json.JsValue,sort:Option[String],stack:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "theta", "tail" : "(field: JsValue, type: String, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, title: String, scale: JsValue, sort: Option[String], stack: JsValue): View", "member" : "smile.plot.vega.View.theta", "link" : "smile\/plot\/vega\/View.html#theta(field:smile.json.JsValue,type:String,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,title:String,scale:smile.json.JsValue,sort:Option[String],stack:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "latitude2", "tail" : "(field: JsValue, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, title: String): View", "member" : "smile.plot.vega.View.latitude2", "link" : "smile\/plot\/vega\/View.html#latitude2(field:smile.json.JsValue,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,title:String):smile.plot.vega.View", "kind" : "def"}, {"label" : "longitude2", "tail" : "(field: JsValue, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, title: String): View", "member" : "smile.plot.vega.View.longitude2", "link" : "smile\/plot\/vega\/View.html#longitude2(field:smile.json.JsValue,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,title:String):smile.plot.vega.View", "kind" : "def"}, {"label" : "latitude", "tail" : "(field: JsValue, type: String, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, title: String): View", "member" : "smile.plot.vega.View.latitude", "link" : "smile\/plot\/vega\/View.html#latitude(field:smile.json.JsValue,type:String,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,title:String):smile.plot.vega.View", "kind" : "def"}, {"label" : "longitude", "tail" : "(field: JsValue, type: String, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, title: String): View", "member" : "smile.plot.vega.View.longitude", "link" : "smile\/plot\/vega\/View.html#longitude(field:smile.json.JsValue,type:String,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,title:String):smile.plot.vega.View", "kind" : "def"}, {"label" : "yError2", "tail" : "(field: JsValue, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, title: String): View", "member" : "smile.plot.vega.View.yError2", "link" : "smile\/plot\/vega\/View.html#yError2(field:smile.json.JsValue,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,title:String):smile.plot.vega.View", "kind" : "def"}, {"label" : "xError2", "tail" : "(field: JsValue, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, title: String): View", "member" : "smile.plot.vega.View.xError2", "link" : "smile\/plot\/vega\/View.html#xError2(field:smile.json.JsValue,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,title:String):smile.plot.vega.View", "kind" : "def"}, {"label" : "yError", "tail" : "(field: JsValue, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, title: String): View", "member" : "smile.plot.vega.View.yError", "link" : "smile\/plot\/vega\/View.html#yError(field:smile.json.JsValue,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,title:String):smile.plot.vega.View", "kind" : "def"}, {"label" : "xError", "tail" : "(field: JsValue, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, title: String): View", "member" : "smile.plot.vega.View.xError", "link" : "smile\/plot\/vega\/View.html#xError(field:smile.json.JsValue,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,title:String):smile.plot.vega.View", "kind" : "def"}, {"label" : "y2", "tail" : "(field: JsValue, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, title: String): View", "member" : "smile.plot.vega.View.y2", "link" : "smile\/plot\/vega\/View.html#y2(field:smile.json.JsValue,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,title:String):smile.plot.vega.View", "kind" : "def"}, {"label" : "x2", "tail" : "(field: JsValue, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, title: String): View", "member" : "smile.plot.vega.View.x2", "link" : "smile\/plot\/vega\/View.html#x2(field:smile.json.JsValue,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,title:String):smile.plot.vega.View", "kind" : "def"}, {"label" : "y", "tail" : "(field: JsValue, type: String, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, title: String, scale: JsValue, axis: JsValue, sort: Option[String], band: Option[Double], impute: JsValue, stack: JsValue): View", "member" : "smile.plot.vega.View.y", "link" : "smile\/plot\/vega\/View.html#y(field:smile.json.JsValue,type:String,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,title:String,scale:smile.json.JsValue,axis:smile.json.JsValue,sort:Option[String],band:Option[Double],impute:smile.json.JsValue,stack:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "x", "tail" : "(field: JsValue, type: String, bin: Either[Boolean, JsObject], timeUnit: String, aggregate: String, title: String, scale: JsValue, axis: JsValue, sort: Option[String], band: Option[Double], impute: JsValue, stack: JsValue): View", "member" : "smile.plot.vega.View.x", "link" : "smile\/plot\/vega\/View.html#x(field:smile.json.JsValue,type:String,bin:Either[Boolean,smile.json.JsObject],timeUnit:String,aggregate:String,title:String,scale:smile.json.JsValue,axis:smile.json.JsValue,sort:Option[String],band:Option[Double],impute:smile.json.JsValue,stack:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "y", "tail" : "(datum: JsValue): View", "member" : "smile.plot.vega.View.y", "link" : "smile\/plot\/vega\/View.html#y(datum:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "x", "tail" : "(datum: JsValue): View", "member" : "smile.plot.vega.View.x", "link" : "smile\/plot\/vega\/View.html#x(datum:smile.json.JsValue):smile.plot.vega.View", "kind" : "def"}, {"label" : "encode", "tail" : "(x: String, y: String, color: Option[(String, String)]): View", "member" : "smile.plot.vega.View.encode", "link" : "smile\/plot\/vega\/View.html#encode(x:String,y:String,color:Option[(String,String)]):smile.plot.vega.View", "kind" : "def"}, {"label" : "mark", "tail" : "(mark: String): View", "member" : "smile.plot.vega.View.mark", "link" : "smile\/plot\/vega\/View.html#mark(mark:String):smile.plot.vega.View", "kind" : "def"}, {"label" : "mark", "tail" : "(mark: JsObject): View", "member" : "smile.plot.vega.View.mark", "link" : "smile\/plot\/vega\/View.html#mark(mark:smile.json.JsObject):smile.plot.vega.View", "kind" : "def"}, {"label" : "heightStep", "tail" : "(step: Int): View", "member" : "smile.plot.vega.View.heightStep", "link" : "smile\/plot\/vega\/View.html#heightStep(step:Int):smile.plot.vega.View", "kind" : "def"}, {"label" : "widthStep", "tail" : "(step: Int): View", "member" : "smile.plot.vega.View.widthStep", "link" : "smile\/plot\/vega\/View.html#widthStep(step:Int):smile.plot.vega.View", "kind" : "def"}, {"label" : "height", "tail" : "(height: String): View", "member" : "smile.plot.vega.View.height", "link" : "smile\/plot\/vega\/View.html#height(height:String):smile.plot.vega.View", "kind" : "def"}, {"label" : "width", "tail" : "(width: String): View", "member" : "smile.plot.vega.View.width", "link" : "smile\/plot\/vega\/View.html#width(width:String):smile.plot.vega.View", "kind" : "def"}, {"label" : "height", "tail" : "(height: Int): View", "member" : "smile.plot.vega.View.height", "link" : "smile\/plot\/vega\/View.html#height(height:Int):smile.plot.vega.View", "kind" : "def"}, {"label" : "width", "tail" : "(width: Int): View", "member" : "smile.plot.vega.View.width", "link" : "smile\/plot\/vega\/View.html#width(width:Int):smile.plot.vega.View", "kind" : "def"}, {"label" : "iframe", "tail" : "(id: String): String", "member" : "smile.plot.vega.VegaLite.iframe", "link" : "smile\/plot\/vega\/View.html#iframe(id:String):String", "kind" : "def"}, {"label" : "embed", "tail" : "(): String", "member" : "smile.plot.vega.VegaLite.embed", "link" : "smile\/plot\/vega\/View.html#embed:String", "kind" : "def"}, {"label" : "transform", "tail" : "(transforms: JsObject*): VegaLite", "member" : "smile.plot.vega.VegaLite.transform", "link" : "smile\/plot\/vega\/View.html#transform(transforms:smile.json.JsObject*):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "transform", "tail" : "(transforms: JsArray): VegaLite", "member" : "smile.plot.vega.VegaLite.transform", "link" : "smile\/plot\/vega\/View.html#transform(transforms:smile.json.JsArray):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "data", "tail" : "(url: String, format: JsValue): VegaLite", "member" : "smile.plot.vega.VegaLite.data", "link" : "smile\/plot\/vega\/View.html#data(url:String,format:smile.json.JsValue):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "data", "tail" : "(df: DataFrame): VegaLite", "member" : "smile.plot.vega.VegaLite.data", "link" : "smile\/plot\/vega\/View.html#data(df:smile.data.DataFrame):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "data", "tail" : "(rows: JsObject*): VegaLite", "member" : "smile.plot.vega.VegaLite.data", "link" : "smile\/plot\/vega\/View.html#data(rows:smile.json.JsObject*):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "data", "tail" : "(json: JsArray): VegaLite", "member" : "smile.plot.vega.VegaLite.data", "link" : "smile\/plot\/vega\/View.html#data(json:smile.json.JsArray):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "title", "tail" : "(title: String): VegaLite", "member" : "smile.plot.vega.VegaLite.title", "link" : "smile\/plot\/vega\/View.html#title(title:String):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "description", "tail" : "(description: String): VegaLite", "member" : "smile.plot.vega.VegaLite.description", "link" : "smile\/plot\/vega\/View.html#description(description:String):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "name", "tail" : "(name: String): VegaLite", "member" : "smile.plot.vega.VegaLite.name", "link" : "smile\/plot\/vega\/View.html#name(name:String):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "usermeta", "tail" : "(data: JsValue): VegaLite", "member" : "smile.plot.vega.VegaLite.usermeta", "link" : "smile\/plot\/vega\/View.html#usermeta(data:smile.json.JsValue):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "config", "tail" : "(properties: JsObject): VegaLite", "member" : "smile.plot.vega.VegaLite.config", "link" : "smile\/plot\/vega\/View.html#config(properties:smile.json.JsObject):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "autosize", "tail" : "(type: String, resize: Boolean, contains: String): VegaLite", "member" : "smile.plot.vega.VegaLite.autosize", "link" : "smile\/plot\/vega\/View.html#autosize(type:String,resize:Boolean,contains:String):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "padding", "tail" : "(left: Int, top: Int, right: Int, bottom: Int): VegaLite", "member" : "smile.plot.vega.VegaLite.padding", "link" : "smile\/plot\/vega\/View.html#padding(left:Int,top:Int,right:Int,bottom:Int):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "padding", "tail" : "(size: Int): VegaLite", "member" : "smile.plot.vega.VegaLite.padding", "link" : "smile\/plot\/vega\/View.html#padding(size:Int):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "background", "tail" : "(color: String): VegaLite", "member" : "smile.plot.vega.VegaLite.background", "link" : "smile\/plot\/vega\/View.html#background(color:String):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.plot.vega.VegaLite.toString", "link" : "smile\/plot\/vega\/View.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/plot\/vega\/View.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/plot\/vega\/View.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/plot\/vega\/View.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/plot\/vega\/View.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/plot\/vega\/View.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/plot\/vega\/View.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/plot\/vega\/View.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/vega\/View.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/vega\/View.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/vega\/View.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/plot\/vega\/View.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/plot\/vega\/View.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/plot\/vega\/View.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/plot\/vega\/View.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/plot\/vega\/View.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/plot\/vega\/View.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/plot\/vega\/View.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/plot\/vega\/View.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "spec", "tail" : ": JsObject", "member" : "smile.plot.vega.VegaLite.spec", "link" : "smile\/plot\/vega\/View.html#spec:smile.json.JsObject", "kind" : "abstract val"}], "shortDescription" : "Single view specification, which describes a view that uses a singlemark type to visualize the data."}, {"name" : "smile.plot.vega.ViewComposition", "trait" : "smile\/plot\/vega\/ViewComposition.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "smile\/plot\/vega\/ViewComposition.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/plot\/vega\/ViewComposition.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ViewComposition) => Boolean, msg: => Any): ViewComposition", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/plot\/vega\/ViewComposition.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ViewComposition) => Boolean): ViewComposition", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/plot\/vega\/ViewComposition.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): ViewComposition", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/plot\/vega\/ViewComposition.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ViewComposition", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/plot\/vega\/ViewComposition.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ViewComposition, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/plot\/vega\/ViewComposition.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ViewComposition, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/plot\/vega\/ViewComposition.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "resolveLegend", "tail" : "(legend: JsObject): ViewComposition", "member" : "smile.plot.vega.ViewComposition.resolveLegend", "link" : "smile\/plot\/vega\/ViewComposition.html#resolveLegend(legend:smile.json.JsObject):smile.plot.vega.ViewComposition", "kind" : "def"}, {"label" : "resolveAxis", "tail" : "(axis: JsObject): ViewComposition", "member" : "smile.plot.vega.ViewComposition.resolveAxis", "link" : "smile\/plot\/vega\/ViewComposition.html#resolveAxis(axis:smile.json.JsObject):smile.plot.vega.ViewComposition", "kind" : "def"}, {"label" : "resolveScale", "tail" : "(scale: JsObject): ViewComposition", "member" : "smile.plot.vega.ViewComposition.resolveScale", "link" : "smile\/plot\/vega\/ViewComposition.html#resolveScale(scale:smile.json.JsObject):smile.plot.vega.ViewComposition", "kind" : "def"}, {"label" : "iframe", "tail" : "(id: String): String", "member" : "smile.plot.vega.VegaLite.iframe", "link" : "smile\/plot\/vega\/ViewComposition.html#iframe(id:String):String", "kind" : "def"}, {"label" : "embed", "tail" : "(): String", "member" : "smile.plot.vega.VegaLite.embed", "link" : "smile\/plot\/vega\/ViewComposition.html#embed:String", "kind" : "def"}, {"label" : "transform", "tail" : "(transforms: JsObject*): VegaLite", "member" : "smile.plot.vega.VegaLite.transform", "link" : "smile\/plot\/vega\/ViewComposition.html#transform(transforms:smile.json.JsObject*):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "transform", "tail" : "(transforms: JsArray): VegaLite", "member" : "smile.plot.vega.VegaLite.transform", "link" : "smile\/plot\/vega\/ViewComposition.html#transform(transforms:smile.json.JsArray):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "data", "tail" : "(url: String, format: JsValue): VegaLite", "member" : "smile.plot.vega.VegaLite.data", "link" : "smile\/plot\/vega\/ViewComposition.html#data(url:String,format:smile.json.JsValue):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "data", "tail" : "(df: DataFrame): VegaLite", "member" : "smile.plot.vega.VegaLite.data", "link" : "smile\/plot\/vega\/ViewComposition.html#data(df:smile.data.DataFrame):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "data", "tail" : "(rows: JsObject*): VegaLite", "member" : "smile.plot.vega.VegaLite.data", "link" : "smile\/plot\/vega\/ViewComposition.html#data(rows:smile.json.JsObject*):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "data", "tail" : "(json: JsArray): VegaLite", "member" : "smile.plot.vega.VegaLite.data", "link" : "smile\/plot\/vega\/ViewComposition.html#data(json:smile.json.JsArray):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "title", "tail" : "(title: String): VegaLite", "member" : "smile.plot.vega.VegaLite.title", "link" : "smile\/plot\/vega\/ViewComposition.html#title(title:String):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "description", "tail" : "(description: String): VegaLite", "member" : "smile.plot.vega.VegaLite.description", "link" : "smile\/plot\/vega\/ViewComposition.html#description(description:String):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "name", "tail" : "(name: String): VegaLite", "member" : "smile.plot.vega.VegaLite.name", "link" : "smile\/plot\/vega\/ViewComposition.html#name(name:String):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "usermeta", "tail" : "(data: JsValue): VegaLite", "member" : "smile.plot.vega.VegaLite.usermeta", "link" : "smile\/plot\/vega\/ViewComposition.html#usermeta(data:smile.json.JsValue):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "config", "tail" : "(properties: JsObject): VegaLite", "member" : "smile.plot.vega.VegaLite.config", "link" : "smile\/plot\/vega\/ViewComposition.html#config(properties:smile.json.JsObject):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "autosize", "tail" : "(type: String, resize: Boolean, contains: String): VegaLite", "member" : "smile.plot.vega.VegaLite.autosize", "link" : "smile\/plot\/vega\/ViewComposition.html#autosize(type:String,resize:Boolean,contains:String):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "padding", "tail" : "(left: Int, top: Int, right: Int, bottom: Int): VegaLite", "member" : "smile.plot.vega.VegaLite.padding", "link" : "smile\/plot\/vega\/ViewComposition.html#padding(left:Int,top:Int,right:Int,bottom:Int):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "padding", "tail" : "(size: Int): VegaLite", "member" : "smile.plot.vega.VegaLite.padding", "link" : "smile\/plot\/vega\/ViewComposition.html#padding(size:Int):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "background", "tail" : "(color: String): VegaLite", "member" : "smile.plot.vega.VegaLite.background", "link" : "smile\/plot\/vega\/ViewComposition.html#background(color:String):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.plot.vega.VegaLite.toString", "link" : "smile\/plot\/vega\/ViewComposition.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/plot\/vega\/ViewComposition.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/plot\/vega\/ViewComposition.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/plot\/vega\/ViewComposition.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/plot\/vega\/ViewComposition.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/plot\/vega\/ViewComposition.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/plot\/vega\/ViewComposition.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/plot\/vega\/ViewComposition.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/vega\/ViewComposition.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/vega\/ViewComposition.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/vega\/ViewComposition.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/plot\/vega\/ViewComposition.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/plot\/vega\/ViewComposition.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/plot\/vega\/ViewComposition.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/plot\/vega\/ViewComposition.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/plot\/vega\/ViewComposition.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/plot\/vega\/ViewComposition.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/plot\/vega\/ViewComposition.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/plot\/vega\/ViewComposition.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "spec", "tail" : ": JsObject", "member" : "smile.plot.vega.VegaLite.spec", "link" : "smile\/plot\/vega\/ViewComposition.html#spec:smile.json.JsObject", "kind" : "abstract val"}], "shortDescription" : "All view composition specifications (layer, facet, concat, and repeat)can have the resolve property for scale, axes, and legend resolution."}, {"name" : "smile.plot.vega.ViewLayoutComposition", "trait" : "smile\/plot\/vega\/ViewLayoutComposition.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "smile\/plot\/vega\/ViewLayoutComposition.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/plot\/vega\/ViewLayoutComposition.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ViewLayoutComposition) => Boolean, msg: => Any): ViewLayoutComposition", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/plot\/vega\/ViewLayoutComposition.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ViewLayoutComposition) => Boolean): ViewLayoutComposition", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/plot\/vega\/ViewLayoutComposition.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): ViewLayoutComposition", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/plot\/vega\/ViewLayoutComposition.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ViewLayoutComposition", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/plot\/vega\/ViewLayoutComposition.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ViewLayoutComposition, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/plot\/vega\/ViewLayoutComposition.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ViewLayoutComposition, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/plot\/vega\/ViewLayoutComposition.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "spacing", "tail" : "(row: Int, column: Int): ViewLayoutComposition", "member" : "smile.plot.vega.ViewLayoutComposition.spacing", "link" : "smile\/plot\/vega\/ViewLayoutComposition.html#spacing(row:Int,column:Int):smile.plot.vega.ViewLayoutComposition", "kind" : "def"}, {"label" : "spacing", "tail" : "(size: Int): ViewLayoutComposition", "member" : "smile.plot.vega.ViewLayoutComposition.spacing", "link" : "smile\/plot\/vega\/ViewLayoutComposition.html#spacing(size:Int):smile.plot.vega.ViewLayoutComposition", "kind" : "def"}, {"label" : "center", "tail" : "(row: Int, column: Int): ViewLayoutComposition", "member" : "smile.plot.vega.ViewLayoutComposition.center", "link" : "smile\/plot\/vega\/ViewLayoutComposition.html#center(row:Int,column:Int):smile.plot.vega.ViewLayoutComposition", "kind" : "def"}, {"label" : "center", "tail" : "(flag: Boolean): ViewLayoutComposition", "member" : "smile.plot.vega.ViewLayoutComposition.center", "link" : "smile\/plot\/vega\/ViewLayoutComposition.html#center(flag:Boolean):smile.plot.vega.ViewLayoutComposition", "kind" : "def"}, {"label" : "bounds", "tail" : "(bounds: String): ViewLayoutComposition", "member" : "smile.plot.vega.ViewLayoutComposition.bounds", "link" : "smile\/plot\/vega\/ViewLayoutComposition.html#bounds(bounds:String):smile.plot.vega.ViewLayoutComposition", "kind" : "def"}, {"label" : "align", "tail" : "(row: String, column: String): ViewLayoutComposition", "member" : "smile.plot.vega.ViewLayoutComposition.align", "link" : "smile\/plot\/vega\/ViewLayoutComposition.html#align(row:String,column:String):smile.plot.vega.ViewLayoutComposition", "kind" : "def"}, {"label" : "align", "tail" : "(align: String): ViewLayoutComposition", "member" : "smile.plot.vega.ViewLayoutComposition.align", "link" : "smile\/plot\/vega\/ViewLayoutComposition.html#align(align:String):smile.plot.vega.ViewLayoutComposition", "kind" : "def"}, {"label" : "resolveLegend", "tail" : "(legend: JsObject): ViewComposition", "member" : "smile.plot.vega.ViewComposition.resolveLegend", "link" : "smile\/plot\/vega\/ViewLayoutComposition.html#resolveLegend(legend:smile.json.JsObject):smile.plot.vega.ViewComposition", "kind" : "def"}, {"label" : "resolveAxis", "tail" : "(axis: JsObject): ViewComposition", "member" : "smile.plot.vega.ViewComposition.resolveAxis", "link" : "smile\/plot\/vega\/ViewLayoutComposition.html#resolveAxis(axis:smile.json.JsObject):smile.plot.vega.ViewComposition", "kind" : "def"}, {"label" : "resolveScale", "tail" : "(scale: JsObject): ViewComposition", "member" : "smile.plot.vega.ViewComposition.resolveScale", "link" : "smile\/plot\/vega\/ViewLayoutComposition.html#resolveScale(scale:smile.json.JsObject):smile.plot.vega.ViewComposition", "kind" : "def"}, {"label" : "iframe", "tail" : "(id: String): String", "member" : "smile.plot.vega.VegaLite.iframe", "link" : "smile\/plot\/vega\/ViewLayoutComposition.html#iframe(id:String):String", "kind" : "def"}, {"label" : "embed", "tail" : "(): String", "member" : "smile.plot.vega.VegaLite.embed", "link" : "smile\/plot\/vega\/ViewLayoutComposition.html#embed:String", "kind" : "def"}, {"label" : "transform", "tail" : "(transforms: JsObject*): VegaLite", "member" : "smile.plot.vega.VegaLite.transform", "link" : "smile\/plot\/vega\/ViewLayoutComposition.html#transform(transforms:smile.json.JsObject*):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "transform", "tail" : "(transforms: JsArray): VegaLite", "member" : "smile.plot.vega.VegaLite.transform", "link" : "smile\/plot\/vega\/ViewLayoutComposition.html#transform(transforms:smile.json.JsArray):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "data", "tail" : "(url: String, format: JsValue): VegaLite", "member" : "smile.plot.vega.VegaLite.data", "link" : "smile\/plot\/vega\/ViewLayoutComposition.html#data(url:String,format:smile.json.JsValue):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "data", "tail" : "(df: DataFrame): VegaLite", "member" : "smile.plot.vega.VegaLite.data", "link" : "smile\/plot\/vega\/ViewLayoutComposition.html#data(df:smile.data.DataFrame):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "data", "tail" : "(rows: JsObject*): VegaLite", "member" : "smile.plot.vega.VegaLite.data", "link" : "smile\/plot\/vega\/ViewLayoutComposition.html#data(rows:smile.json.JsObject*):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "data", "tail" : "(json: JsArray): VegaLite", "member" : "smile.plot.vega.VegaLite.data", "link" : "smile\/plot\/vega\/ViewLayoutComposition.html#data(json:smile.json.JsArray):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "title", "tail" : "(title: String): VegaLite", "member" : "smile.plot.vega.VegaLite.title", "link" : "smile\/plot\/vega\/ViewLayoutComposition.html#title(title:String):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "description", "tail" : "(description: String): VegaLite", "member" : "smile.plot.vega.VegaLite.description", "link" : "smile\/plot\/vega\/ViewLayoutComposition.html#description(description:String):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "name", "tail" : "(name: String): VegaLite", "member" : "smile.plot.vega.VegaLite.name", "link" : "smile\/plot\/vega\/ViewLayoutComposition.html#name(name:String):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "usermeta", "tail" : "(data: JsValue): VegaLite", "member" : "smile.plot.vega.VegaLite.usermeta", "link" : "smile\/plot\/vega\/ViewLayoutComposition.html#usermeta(data:smile.json.JsValue):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "config", "tail" : "(properties: JsObject): VegaLite", "member" : "smile.plot.vega.VegaLite.config", "link" : "smile\/plot\/vega\/ViewLayoutComposition.html#config(properties:smile.json.JsObject):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "autosize", "tail" : "(type: String, resize: Boolean, contains: String): VegaLite", "member" : "smile.plot.vega.VegaLite.autosize", "link" : "smile\/plot\/vega\/ViewLayoutComposition.html#autosize(type:String,resize:Boolean,contains:String):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "padding", "tail" : "(left: Int, top: Int, right: Int, bottom: Int): VegaLite", "member" : "smile.plot.vega.VegaLite.padding", "link" : "smile\/plot\/vega\/ViewLayoutComposition.html#padding(left:Int,top:Int,right:Int,bottom:Int):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "padding", "tail" : "(size: Int): VegaLite", "member" : "smile.plot.vega.VegaLite.padding", "link" : "smile\/plot\/vega\/ViewLayoutComposition.html#padding(size:Int):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "background", "tail" : "(color: String): VegaLite", "member" : "smile.plot.vega.VegaLite.background", "link" : "smile\/plot\/vega\/ViewLayoutComposition.html#background(color:String):smile.plot.vega.VegaLite", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "smile.plot.vega.VegaLite.toString", "link" : "smile\/plot\/vega\/ViewLayoutComposition.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/plot\/vega\/ViewLayoutComposition.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/plot\/vega\/ViewLayoutComposition.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/plot\/vega\/ViewLayoutComposition.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/plot\/vega\/ViewLayoutComposition.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/plot\/vega\/ViewLayoutComposition.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/plot\/vega\/ViewLayoutComposition.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/plot\/vega\/ViewLayoutComposition.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/vega\/ViewLayoutComposition.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/vega\/ViewLayoutComposition.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/vega\/ViewLayoutComposition.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/plot\/vega\/ViewLayoutComposition.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/plot\/vega\/ViewLayoutComposition.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/plot\/vega\/ViewLayoutComposition.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/plot\/vega\/ViewLayoutComposition.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/plot\/vega\/ViewLayoutComposition.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/plot\/vega\/ViewLayoutComposition.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/plot\/vega\/ViewLayoutComposition.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/plot\/vega\/ViewLayoutComposition.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "spec", "tail" : ": JsObject", "member" : "smile.plot.vega.VegaLite.spec", "link" : "smile\/plot\/vega\/ViewLayoutComposition.html#spec:smile.json.JsObject", "kind" : "abstract val"}], "shortDescription" : "all view layout composition (facet, concat, and repeat) can have thefollowing layout properties: align, bounds, center, spacing."}, {"name" : "smile.plot.vega.WindowFX", "shortDescription" : "JavaFX WebView with vega-lite plot.", "object" : "smile\/plot\/vega\/WindowFX$.html", "members_object" : [{"label" : "sceneOf", "tail" : "(spec: VegaLite): Scene", "member" : "smile.plot.vega.WindowFX.sceneOf", "link" : "smile\/plot\/vega\/WindowFX$.html#sceneOf(spec:smile.plot.vega.VegaLite):javafx.scene.Scene", "kind" : "def"}, {"label" : "apply", "tail" : "(spec: VegaLite): WindowFX", "member" : "smile.plot.vega.WindowFX.apply", "link" : "smile\/plot\/vega\/WindowFX$.html#apply(spec:smile.plot.vega.VegaLite):smile.plot.vega.WindowFX", "kind" : "def"}, {"label" : "logger", "tail" : ": Logger", "member" : "com.typesafe.scalalogging.LazyLogging.logger", "link" : "smile\/plot\/vega\/WindowFX$.html#logger:com.typesafe.scalalogging.Logger", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/plot\/vega\/WindowFX$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/plot\/vega\/WindowFX$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/plot\/vega\/WindowFX$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/plot\/vega\/WindowFX$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/plot\/vega\/WindowFX$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/plot\/vega\/WindowFX$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/plot\/vega\/WindowFX$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/vega\/WindowFX$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/vega\/WindowFX$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/vega\/WindowFX$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/plot\/vega\/WindowFX$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/plot\/vega\/WindowFX$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/plot\/vega\/WindowFX$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/plot\/vega\/WindowFX$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/plot\/vega\/WindowFX$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/plot\/vega\/WindowFX$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/plot\/vega\/WindowFX$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/plot\/vega\/WindowFX$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/plot\/vega\/WindowFX$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "smile\/plot\/vega\/WindowFX.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/plot\/vega\/WindowFX.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (WindowFX) => Boolean, msg: => Any): WindowFX", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/plot\/vega\/WindowFX.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (WindowFX) => Boolean): WindowFX", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/plot\/vega\/WindowFX.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): WindowFX", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/plot\/vega\/WindowFX.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): WindowFX", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/plot\/vega\/WindowFX.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (WindowFX, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/plot\/vega\/WindowFX.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (WindowFX, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/plot\/vega\/WindowFX.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "close", "tail" : "(): Unit", "member" : "smile.plot.vega.WindowFX.close", "link" : "smile\/plot\/vega\/WindowFX.html#close:Unit", "kind" : "def"}, {"member" : "smile.plot.vega.WindowFX#<init>", "error" : "unsupported entity"}, {"label" : "spec", "tail" : ": VegaLite", "member" : "smile.plot.vega.WindowFX.spec", "link" : "smile\/plot\/vega\/WindowFX.html#spec:smile.plot.vega.VegaLite", "kind" : "val"}, {"label" : "stage", "tail" : ": Stage", "member" : "smile.plot.vega.WindowFX.stage", "link" : "smile\/plot\/vega\/WindowFX.html#stage:javafx.stage.Stage", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/plot\/vega\/WindowFX.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/plot\/vega\/WindowFX.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/plot\/vega\/WindowFX.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/plot\/vega\/WindowFX.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/plot\/vega\/WindowFX.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/plot\/vega\/WindowFX.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/plot\/vega\/WindowFX.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/plot\/vega\/WindowFX.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/vega\/WindowFX.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/vega\/WindowFX.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/vega\/WindowFX.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/plot\/vega\/WindowFX.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/plot\/vega\/WindowFX.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/plot\/vega\/WindowFX.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/plot\/vega\/WindowFX.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/plot\/vega\/WindowFX.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/plot\/vega\/WindowFX.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/plot\/vega\/WindowFX.html", "kind" : "case class"}], "smile.validation" : [{"name" : "smile.validation.bootstrap", "shortDescription" : "", "object" : "smile\/validation\/package$$bootstrap$.html", "members_object" : [{"label" : "regression", "tail" : "(k: Int, formula: Formula, data: DataFrame)(trainer: (Formula, DataFrame) => DataFrameRegression): Array[Double]", "member" : "smile.validation.bootstrap.regression", "link" : "smile\/validation\/package$$bootstrap$.html#regression(k:Int,formula:smile.data.formula.Formula,data:smile.data.DataFrame)(trainer:(smile.data.formula.Formula,smile.data.DataFrame)=>smile.regression.DataFrameRegression):Array[Double]", "kind" : "def"}, {"label" : "regression", "tail" : "(x: Array[T], y: Array[Double], k: Int, measures: RegressionMeasure*)(trainer: (Array[T], Array[Double]) => Regression[T]): Array[Double]", "member" : "smile.validation.bootstrap.regression", "link" : "smile\/validation\/package$$bootstrap$.html#regression[T<:AnyRef](x:Array[T],y:Array[Double],k:Int,measures:smile.validation.RegressionMeasure*)(trainer:(Array[T],Array[Double])=>smile.regression.Regression[T]):Array[Double]", "kind" : "def"}, {"label" : "classification", "tail" : "(k: Int, formula: Formula, data: DataFrame)(trainer: (Formula, DataFrame) => DataFrameClassifier): Array[Double]", "member" : "smile.validation.bootstrap.classification", "link" : "smile\/validation\/package$$bootstrap$.html#classification(k:Int,formula:smile.data.formula.Formula,data:smile.data.DataFrame)(trainer:(smile.data.formula.Formula,smile.data.DataFrame)=>smile.classification.DataFrameClassifier):Array[Double]", "kind" : "def"}, {"label" : "classification", "tail" : "(k: Int, x: Array[T], y: Array[Int])(trainer: (Array[T], Array[Int]) => Classifier[T]): Array[Double]", "member" : "smile.validation.bootstrap.classification", "link" : "smile\/validation\/package$$bootstrap$.html#classification[T<:AnyRef](k:Int,x:Array[T],y:Array[Int])(trainer:(Array[T],Array[Int])=>smile.classification.Classifier[T]):Array[Double]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/validation\/package$$bootstrap$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/validation\/package$$bootstrap$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/validation\/package$$bootstrap$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/validation\/package$$bootstrap$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/validation\/package$$bootstrap$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/validation\/package$$bootstrap$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/validation\/package$$bootstrap$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/validation\/package$$bootstrap$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/validation\/package$$bootstrap$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/validation\/package$$bootstrap$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/validation\/package$$bootstrap$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/validation\/package$$bootstrap$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/validation\/package$$bootstrap$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/validation\/package$$bootstrap$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/validation\/package$$bootstrap$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/validation\/package$$bootstrap$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/validation\/package$$bootstrap$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/validation\/package$$bootstrap$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/validation\/package$$bootstrap$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "smile.validation.cv", "shortDescription" : "", "object" : "smile\/validation\/package$$cv$.html", "members_object" : [{"label" : "regression", "tail" : "(k: Int, formula: Formula, data: DataFrame, measures: RegressionMeasure*)(trainer: (Formula, DataFrame) => DataFrameRegression): Array[Double]", "member" : "smile.validation.cv.regression", "link" : "smile\/validation\/package$$cv$.html#regression(k:Int,formula:smile.data.formula.Formula,data:smile.data.DataFrame,measures:smile.validation.RegressionMeasure*)(trainer:(smile.data.formula.Formula,smile.data.DataFrame)=>smile.regression.DataFrameRegression):Array[Double]", "kind" : "def"}, {"label" : "regression", "tail" : "(k: Int, x: Array[T], y: Array[Double], measures: RegressionMeasure*)(trainer: (Array[T], Array[Double]) => Regression[T]): Array[Double]", "member" : "smile.validation.cv.regression", "link" : "smile\/validation\/package$$cv$.html#regression[T<:AnyRef](k:Int,x:Array[T],y:Array[Double],measures:smile.validation.RegressionMeasure*)(trainer:(Array[T],Array[Double])=>smile.regression.Regression[T]):Array[Double]", "kind" : "def"}, {"label" : "classification", "tail" : "(k: Int, formula: Formula, data: DataFrame, measures: ClassificationMeasure*)(trainer: (Formula, DataFrame) => DataFrameClassifier): Array[Double]", "member" : "smile.validation.cv.classification", "link" : "smile\/validation\/package$$cv$.html#classification(k:Int,formula:smile.data.formula.Formula,data:smile.data.DataFrame,measures:smile.validation.ClassificationMeasure*)(trainer:(smile.data.formula.Formula,smile.data.DataFrame)=>smile.classification.DataFrameClassifier):Array[Double]", "kind" : "def"}, {"label" : "classification", "tail" : "(k: Int, x: Array[T], y: Array[Int], measures: ClassificationMeasure*)(trainer: (Array[T], Array[Int]) => Classifier[T]): Array[Double]", "member" : "smile.validation.cv.classification", "link" : "smile\/validation\/package$$cv$.html#classification[T<:AnyRef](k:Int,x:Array[T],y:Array[Int],measures:smile.validation.ClassificationMeasure*)(trainer:(Array[T],Array[Int])=>smile.classification.Classifier[T]):Array[Double]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/validation\/package$$cv$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/validation\/package$$cv$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/validation\/package$$cv$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/validation\/package$$cv$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/validation\/package$$cv$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/validation\/package$$cv$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/validation\/package$$cv$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/validation\/package$$cv$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/validation\/package$$cv$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/validation\/package$$cv$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/validation\/package$$cv$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/validation\/package$$cv$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/validation\/package$$cv$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/validation\/package$$cv$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/validation\/package$$cv$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/validation\/package$$cv$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/validation\/package$$cv$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/validation\/package$$cv$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/validation\/package$$cv$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "smile.validation.loocv", "shortDescription" : "", "object" : "smile\/validation\/package$$loocv$.html", "members_object" : [{"label" : "regression", "tail" : "(formula: Formula, data: DataFrame, measures: RegressionMeasure*)(trainer: (Formula, DataFrame) => DataFrameRegression): Array[Double]", "member" : "smile.validation.loocv.regression", "link" : "smile\/validation\/package$$loocv$.html#regression(formula:smile.data.formula.Formula,data:smile.data.DataFrame,measures:smile.validation.RegressionMeasure*)(trainer:(smile.data.formula.Formula,smile.data.DataFrame)=>smile.regression.DataFrameRegression):Array[Double]", "kind" : "def"}, {"label" : "regression", "tail" : "(x: Array[T], y: Array[Double], measures: RegressionMeasure*)(trainer: (Array[T], Array[Double]) => Regression[T]): Array[Double]", "member" : "smile.validation.loocv.regression", "link" : "smile\/validation\/package$$loocv$.html#regression[T<:AnyRef](x:Array[T],y:Array[Double],measures:smile.validation.RegressionMeasure*)(trainer:(Array[T],Array[Double])=>smile.regression.Regression[T]):Array[Double]", "kind" : "def"}, {"label" : "classification", "tail" : "(formula: Formula, data: DataFrame, measures: ClassificationMeasure*)(trainer: (Formula, DataFrame) => DataFrameClassifier): Array[Double]", "member" : "smile.validation.loocv.classification", "link" : "smile\/validation\/package$$loocv$.html#classification(formula:smile.data.formula.Formula,data:smile.data.DataFrame,measures:smile.validation.ClassificationMeasure*)(trainer:(smile.data.formula.Formula,smile.data.DataFrame)=>smile.classification.DataFrameClassifier):Array[Double]", "kind" : "def"}, {"label" : "classification", "tail" : "(x: Array[T], y: Array[Int], measures: ClassificationMeasure*)(trainer: (Array[T], Array[Int]) => Classifier[T]): Array[Double]", "member" : "smile.validation.loocv.classification", "link" : "smile\/validation\/package$$loocv$.html#classification[T<:AnyRef](x:Array[T],y:Array[Int],measures:smile.validation.ClassificationMeasure*)(trainer:(Array[T],Array[Int])=>smile.classification.Classifier[T]):Array[Double]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/validation\/package$$loocv$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/validation\/package$$loocv$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/validation\/package$$loocv$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/validation\/package$$loocv$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/validation\/package$$loocv$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/validation\/package$$loocv$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/validation\/package$$loocv$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/validation\/package$$loocv$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/validation\/package$$loocv$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/validation\/package$$loocv$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/validation\/package$$loocv$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/validation\/package$$loocv$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/validation\/package$$loocv$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/validation\/package$$loocv$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/validation\/package$$loocv$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/validation\/package$$loocv$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/validation\/package$$loocv$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/validation\/package$$loocv$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/validation\/package$$loocv$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "smile.plot.swing" : [{"name" : "smile.plot.swing.CanvasWindow", "shortDescription" : "Plot canvas window.", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "smile\/plot\/swing\/CanvasWindow.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/plot\/swing\/CanvasWindow.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (CanvasWindow) => Boolean, msg: => Any): CanvasWindow", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/plot\/swing\/CanvasWindow.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (CanvasWindow) => Boolean): CanvasWindow", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/plot\/swing\/CanvasWindow.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): CanvasWindow", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/plot\/swing\/CanvasWindow.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): CanvasWindow", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/plot\/swing\/CanvasWindow.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (CanvasWindow, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/plot\/swing\/CanvasWindow.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (CanvasWindow, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/plot\/swing\/CanvasWindow.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "smile.plot.swing.CanvasWindow#<init>", "error" : "unsupported entity"}, {"label" : "canvas", "tail" : ": Canvas", "member" : "smile.plot.swing.CanvasWindow.canvas", "link" : "smile\/plot\/swing\/CanvasWindow.html#canvas:smile.plot.swing.Canvas", "kind" : "val"}, {"label" : "frame", "tail" : ": JFrame", "member" : "smile.plot.swing.CanvasWindow.frame", "link" : "smile\/plot\/swing\/CanvasWindow.html#frame:javax.swing.JFrame", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/plot\/swing\/CanvasWindow.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "close", "tail" : "(): Unit", "member" : "smile.plot.swing.JWindow.close", "link" : "smile\/plot\/swing\/CanvasWindow.html#close:Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/plot\/swing\/CanvasWindow.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/plot\/swing\/CanvasWindow.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/plot\/swing\/CanvasWindow.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/plot\/swing\/CanvasWindow.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/plot\/swing\/CanvasWindow.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/plot\/swing\/CanvasWindow.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/plot\/swing\/CanvasWindow.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/swing\/CanvasWindow.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/swing\/CanvasWindow.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/swing\/CanvasWindow.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/plot\/swing\/CanvasWindow.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/plot\/swing\/CanvasWindow.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/plot\/swing\/CanvasWindow.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/plot\/swing\/CanvasWindow.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/plot\/swing\/CanvasWindow.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/plot\/swing\/CanvasWindow.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/plot\/swing\/CanvasWindow.html", "kind" : "case class"}, {"name" : "smile.plot.swing.Html", "shortDescription" : "HTML  tag of Canvas and JComponent.", "object" : "smile\/plot\/swing\/Html$.html", "members_object" : [{"label" : "of", "tail" : "(canvas: JComponent, width: Int, height: Int): String", "member" : "smile.plot.swing.Html.of", "link" : "smile\/plot\/swing\/Html$.html#of(canvas:javax.swing.JComponent,width:Int,height:Int):String", "kind" : "def"}, {"label" : "canvas", "tail" : "(canvas: Canvas, width: Int, height: Int): String", "member" : "smile.plot.swing.Html.canvas", "link" : "smile\/plot\/swing\/Html$.html#canvas(canvas:smile.plot.swing.Canvas,width:Int,height:Int):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/plot\/swing\/Html$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/plot\/swing\/Html$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/plot\/swing\/Html$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/plot\/swing\/Html$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/plot\/swing\/Html$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/plot\/swing\/Html$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/plot\/swing\/Html$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/swing\/Html$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/swing\/Html$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/swing\/Html$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/plot\/swing\/Html$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/plot\/swing\/Html$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/plot\/swing\/Html$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/plot\/swing\/Html$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/plot\/swing\/Html$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/plot\/swing\/Html$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/plot\/swing\/Html$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/plot\/swing\/Html$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/plot\/swing\/Html$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "smile.plot.swing.JWindow", "object" : "smile\/plot\/swing\/JWindow$.html", "members_object" : [{"label" : "apply", "tail" : "(canvas: PlotGrid): PlotGridWindow", "member" : "smile.plot.swing.JWindow.apply", "link" : "smile\/plot\/swing\/JWindow$.html#apply(canvas:smile.plot.swing.PlotGrid):smile.plot.swing.PlotGridWindow", "kind" : "def"}, {"label" : "apply", "tail" : "(canvas: Canvas): CanvasWindow", "member" : "smile.plot.swing.JWindow.apply", "link" : "smile\/plot\/swing\/JWindow$.html#apply(canvas:smile.plot.swing.Canvas):smile.plot.swing.CanvasWindow", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/plot\/swing\/JWindow$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/plot\/swing\/JWindow$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/plot\/swing\/JWindow$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/plot\/swing\/JWindow$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/plot\/swing\/JWindow$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/plot\/swing\/JWindow$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/plot\/swing\/JWindow$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/swing\/JWindow$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/swing\/JWindow$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/swing\/JWindow$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/plot\/swing\/JWindow$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/plot\/swing\/JWindow$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/plot\/swing\/JWindow$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/plot\/swing\/JWindow$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/plot\/swing\/JWindow$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/plot\/swing\/JWindow$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/plot\/swing\/JWindow$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/plot\/swing\/JWindow$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/plot\/swing\/JWindow$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "smile\/plot\/swing\/JWindow.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "smile\/plot\/swing\/JWindow.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/plot\/swing\/JWindow.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (JWindow) => Boolean, msg: => Any): JWindow", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/plot\/swing\/JWindow.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (JWindow) => Boolean): JWindow", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/plot\/swing\/JWindow.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): JWindow", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/plot\/swing\/JWindow.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): JWindow", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/plot\/swing\/JWindow.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (JWindow, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/plot\/swing\/JWindow.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (JWindow, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/plot\/swing\/JWindow.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "close", "tail" : "(): Unit", "member" : "smile.plot.swing.JWindow.close", "link" : "smile\/plot\/swing\/JWindow.html#close:Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/plot\/swing\/JWindow.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/plot\/swing\/JWindow.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/plot\/swing\/JWindow.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/plot\/swing\/JWindow.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/plot\/swing\/JWindow.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/plot\/swing\/JWindow.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/plot\/swing\/JWindow.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/swing\/JWindow.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/swing\/JWindow.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/swing\/JWindow.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/plot\/swing\/JWindow.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/plot\/swing\/JWindow.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/plot\/swing\/JWindow.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/plot\/swing\/JWindow.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/plot\/swing\/JWindow.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/plot\/swing\/JWindow.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/plot\/swing\/JWindow.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/plot\/swing\/JWindow.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/plot\/swing\/JWindow.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "frame", "tail" : ": JFrame", "member" : "smile.plot.swing.JWindow.frame", "link" : "smile\/plot\/swing\/JWindow.html#frame:javax.swing.JFrame", "kind" : "abstract val"}], "shortDescription" : "JFrame window."}, {"name" : "smile.plot.swing.PlotGridWindow", "shortDescription" : "Plot grid window.", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "smile\/plot\/swing\/PlotGridWindow.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "smile\/plot\/swing\/PlotGridWindow.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (PlotGridWindow) => Boolean, msg: => Any): PlotGridWindow", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/plot\/swing\/PlotGridWindow.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (PlotGridWindow) => Boolean): PlotGridWindow", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/plot\/swing\/PlotGridWindow.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): PlotGridWindow", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/plot\/swing\/PlotGridWindow.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): PlotGridWindow", "member" : "scala.Predef.Ensuring.ensuring", "link" : "smile\/plot\/swing\/PlotGridWindow.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (PlotGridWindow, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "smile\/plot\/swing\/PlotGridWindow.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (PlotGridWindow, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "smile\/plot\/swing\/PlotGridWindow.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "smile.plot.swing.PlotGridWindow#<init>", "error" : "unsupported entity"}, {"label" : "canvas", "tail" : ": PlotGrid", "member" : "smile.plot.swing.PlotGridWindow.canvas", "link" : "smile\/plot\/swing\/PlotGridWindow.html#canvas:smile.plot.swing.PlotGrid", "kind" : "val"}, {"label" : "frame", "tail" : ": JFrame", "member" : "smile.plot.swing.PlotGridWindow.frame", "link" : "smile\/plot\/swing\/PlotGridWindow.html#frame:javax.swing.JFrame", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "smile\/plot\/swing\/PlotGridWindow.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "close", "tail" : "(): Unit", "member" : "smile.plot.swing.JWindow.close", "link" : "smile\/plot\/swing\/PlotGridWindow.html#close:Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/plot\/swing\/PlotGridWindow.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/plot\/swing\/PlotGridWindow.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/plot\/swing\/PlotGridWindow.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/plot\/swing\/PlotGridWindow.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/plot\/swing\/PlotGridWindow.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/plot\/swing\/PlotGridWindow.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/plot\/swing\/PlotGridWindow.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/swing\/PlotGridWindow.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/swing\/PlotGridWindow.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/plot\/swing\/PlotGridWindow.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/plot\/swing\/PlotGridWindow.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/plot\/swing\/PlotGridWindow.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/plot\/swing\/PlotGridWindow.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/plot\/swing\/PlotGridWindow.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/plot\/swing\/PlotGridWindow.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/plot\/swing\/PlotGridWindow.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "smile\/plot\/swing\/PlotGridWindow.html", "kind" : "case class"}], "smile.projection" : [{"name" : "smile.projection.$dummy", "shortDescription" : "Hacking scaladoc issue-8124.", "object" : "smile\/projection\/package$$$dummy$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/projection\/package$$$dummy$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/projection\/package$$$dummy$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/projection\/package$$$dummy$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/projection\/package$$$dummy$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/projection\/package$$$dummy$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/projection\/package$$$dummy$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/projection\/package$$$dummy$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/projection\/package$$$dummy$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/projection\/package$$$dummy$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/projection\/package$$$dummy$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/projection\/package$$$dummy$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/projection\/package$$$dummy$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/projection\/package$$$dummy$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/projection\/package$$$dummy$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/projection\/package$$$dummy$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/projection\/package$$$dummy$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/projection\/package$$$dummy$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/projection\/package$$$dummy$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/projection\/package$$$dummy$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "smile.classification" : [{"name" : "smile.classification.$dummy", "shortDescription" : "Hacking scaladoc issue-8124.", "object" : "smile\/classification\/package$$$dummy$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/classification\/package$$$dummy$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/classification\/package$$$dummy$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/classification\/package$$$dummy$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/classification\/package$$$dummy$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/classification\/package$$$dummy$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/classification\/package$$$dummy$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/classification\/package$$$dummy$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/classification\/package$$$dummy$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/classification\/package$$$dummy$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/classification\/package$$$dummy$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/classification\/package$$$dummy$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/classification\/package$$$dummy$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/classification\/package$$$dummy$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/classification\/package$$$dummy$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/classification\/package$$$dummy$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/classification\/package$$$dummy$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/classification\/package$$$dummy$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/classification\/package$$$dummy$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/classification\/package$$$dummy$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "smile.nlp" : [{"name" : "smile.nlp.$dummy", "shortDescription" : "Hacking scaladoc issue-8124.", "object" : "smile\/nlp\/$dummy$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "smile\/nlp\/$dummy$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "smile\/nlp\/$dummy$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "smile\/nlp\/$dummy$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "smile\/nlp\/$dummy$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "smile\/nlp\/$dummy$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "smile\/nlp\/$dummy$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "smile\/nlp\/$dummy$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/nlp\/$dummy$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/nlp\/$dummy$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "smile\/nlp\/$dummy$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "smile\/nlp\/$dummy$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "smile\/nlp\/$dummy$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "smile\/nlp\/$dummy$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "smile\/nlp\/$dummy$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "smile\/nlp\/$dummy$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "smile\/nlp\/$dummy$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "smile\/nlp\/$dummy$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "smile\/nlp\/$dummy$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "smile\/nlp\/$dummy$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}]};